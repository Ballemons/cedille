module Id.

import Sigma.
import SubstComp.


-- dependent extensional identity
IdExtDep ◂ Π A : ★. Π B : A ➔ ★. ★ = λ A : ★. λ B : A ➔ ★. 
 Π a : A. Sigma · (B a) · (λ b : B a. { b ≃ a }).

elimIdExtDep ◂ ∀ A : ★ . ∀ B : A ➔ ★ . IdExtDep · A · B ➾ Π a : A . B a =
  Λ A . Λ B . Λ c . λ a . subst · (B a) · A -(proj1 · (B a) · (λ b : (B a). {b ≃ a}) (c a)) a -(proj2 · (B a) · (λ b : (B a). {b ≃ a}) (c a)) .

intrIdExtDep ◂ ∀ X : ★. ∀ Y : X ➔ ★. Π f : (Π x : X. Y x). (Π z : X. {f z ≃ z}) ➔ IdExtDep · X · Y 
 = Λ X. Λ Y. λ if. λ p. λ a. pair · (Y a) · (λ y : (Y a). {y ≃ a}) (if a) (p a).


-- non-dependent extensional identity
IdExt ◂ Π A : ★. Π B : ★. ★ = λ A : ★. λ B : ★. IdExtDep · A · (λ _ : A. B).

elimIdExt ◂ ∀ A : ★ . ∀ B : ★ . IdExt · A · B ➾ Π a : A . B =
  Λ A . Λ B . Λ c . λ a . subst · B · A -(proj1 · B · (λ b : B. {b ≃ a}) (c a)) a -(proj2 · B · (λ b : B. {b ≃ a}) (c a)) .

intrIdExt ◂ ∀ X : ★. ∀ Y : ★. Π f : X ➔ Y. (Π z : X. {f z ≃ z}) ➔ IdExt · X · Y 
 = Λ X. Λ Y. λ if. λ p. λ a. pair · Y · (λ y : Y. {y ≃ a}) (if a) (p a).

trivIdExt ◂ ∀ A : ★. IdExt · A · A = Λ A. λ a. pair · A · (λ a1 : A. {a1 ≃ a}) a β.
