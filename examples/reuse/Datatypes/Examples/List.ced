module List.

import Id.
import IIdMapping.
import FixIndM.
import ListF.
import Nat.
import IFixM.
import Unit.

-- polymorphic lists defined as least fixed point of functor ListF with
-- identity mapping lfimap
List ◂ ★ ➔ ★ = λ A : ★. FixIndM · (ListF · A) (lfimap · A).


-- length algebra and function in terms of it
lenAlgM ◂ ∀ A : ★. AlgM · (ListF · A) · Nat 
 = Λ A. Λ R. λ rec. λ lf. lf.1 · Nat Z (λ a. λ r. S (rec r)).


length ◂ ∀ A : ★. List · A ➔ Nat 
 = Λ A. λ l. foldM · (ListF · A) -(lfimap · A) · Nat (lenAlgM · A) l.


rebList ◂ ∀ A : ★. ∀ X : ★. Π z : ListF · A · X. {ListFInd z in2lf in1lf ≃ z}
 = Λ A. Λ X. λ z. θ<z> (ListFInd · A · X z) (λ a. λ x. β) β.


