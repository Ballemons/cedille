module ReuseForgetful.

import Id.
import IIdMapping.
import IFixIndM.
import IInductionM.
import Sigma.

Conv ◂ Π I : ★. Π J : ★. (I ➔ J) ➔ (J ➔ ★) ➔ (I ➔ ★)
 = λ I : ★. λ J : ★. λ f : I ➔ J. λ jX : J ➔ ★. λ i : I . jX (f i).


iforget ◂ ∀ I : ★. ∀ F : (I ➔ ★) ➔ (I ➔ ★). ∀ fimap : IIdMapping · I · F.
          ∀ J : ★. ∀ G : (J ➔ ★) ➔ (J ➔ ★). ∀ gimap : IIdMapping · J · G.
        Π f : I ➔ J.
       (∀ X : I ➔ ★.  ∀ Y : J ➔ ★. (∀ i : I . IdExt · (X i) · (Y (f i))) ➔ ∀ i : I. IdExt · (F · X i) · (G · Y (f i) )) 
 ➾ ∀ i : I. IdExt · (IFixIndM · I · F fimap i) · (IFixIndM · J · G gimap (f i)) =
  Λ I. Λ F. Λ fimap. 
  Λ J. Λ G. Λ gimap. 
  λ f. Λ ifg. Λ i. λ v.  induction · I · F -fimap ·  
  (λ ii : I. λ y : IFixIndM · I · F fimap ii. Sigma · (IFixIndM · J · G gimap (f ii)) · (λ x : (IFixIndM · J · G gimap (f ii)).  {x ≃ y}))
  (Λ R. Λ c. λ ih. Λ i. λ gr. 
        pair · (IFixIndM · J · G gimap (f i)) · (λ x : IFixIndM · J · G gimap (f i) . ({x ≃ iinFixIndM gr})) 
     (iinFixIndM · J · G -gimap -(f i) 
         (elimIdExt · (F · (Conv · I · J f · (IFixIndM · J · G gimap)) i) · (G · (IFixIndM · J · G gimap) (f i)) 
           -(ifg · (λ i : I. IFixIndM · J · G gimap (f i)) · (IFixIndM · J · G gimap) 
               (Λ i : I. trivIdExt · (IFixIndM · J · G gimap (f i))) -i)  
           (elimIdExt · (F · R i) · (F · (Conv · I · J f · (IFixIndM · J · G gimap)) i ) 
           -(fimap · R · (Conv · I · J f · (IFixIndM · J · G gimap)) -ih -i) gr))) 
     β) -i v.

