import Top.
import Unit.
import Sigma.
import Product.
import SigmaImplicit.

% definition of nats by using fibrations avoids allows to derive
% induction without intersection types.
% (also uses propositional truncation)

cNat ◂ ★ = ∀ X : ★. (X ➔ X) ➔ X ➔ X.

cZero ◂ cNat = Λ X. λ s. λ z. z.
cSucc ◂ cNat ➔ cNat = λ n. Λ X. λ s. λ z. s (n · X s z).

Ind ◂ cNat ➔ ★ = λ v : cNat. ∀ P : cNat ➔ ★. (∀ n : cNat. P n ➔ P (cSucc n)) ➔ P cZero ➔ P v.

Nat ◂ ★ = Sigma · cNat · (λ x : cNat. SigmaEr · (Ind x) · (λ y : Ind x. x ≃ y)).

projNat ◂ Nat ➔ cNat = λ n. (proj1 · cNat · (λ x : cNat. SigmaEr · (Ind x) · (λ y : Ind x. x ≃ y))  n).
projNatInd ◂ Π n : Nat.  ( (Ind (projNat n)) )   = λ n. proj1er · (Ind (projNat n)) · (λ y : Ind (projNat n). (projNat n) ≃ y) (proj2 · cNat · (λ x : cNat. SigmaEr · (Ind x) · (λ y : Ind x. x ≃ y))   n).


thm ◂ Π  n : Nat. projNatInd n ≃ (projNat n) = λ n. θ<n> (ind-sigma · cNat · (λ x : cNat. SigmaEr · (Ind x) · (λ y : Ind x. x ≃ y)) n) 
  (λ a . λ b. θ<b> (ind-sigmaer · (Ind a) · (λ y : (Ind a) . (a ≃ y)) b)  
  (λ x. Λ y. ρ (ς y) - β    )  )   .


zeroInd ◂ SigmaEr · (Ind cZero) · (λ y : Ind cZero. cZero ≃ y) = mksigmaer · (Ind cZero) · (λ y : Ind cZero. cZero ≃ y)  (Λ P. λ s. λ z. z)  -β .
sucInd  ◂ Π n : Nat. SigmaEr · (Ind (cSucc (projNat n))) · (λ y : Ind (cSucc (projNat n)). (cSucc (projNat n)) ≃ y) = λ n.

   mksigmaer · (Ind (cSucc (projNat n))) · (λ y : Ind (cSucc (projNat n)). (cSucc (projNat n)) ≃ y)   (Λ P. λ s. λ z. s -(projNat n) (projNatInd n · P s z ) ) 
    -(ρ (thm n) - β )   .


zero ◂ Nat = mkdsigma · cNat · (λ x : cNat. SigmaEr · (Ind x) · (λ y : Ind x. x ≃ y)) cZero zeroInd.
succ ◂ Nat ➔ Nat = λ n. mkdsigma · cNat · (λ x : cNat. SigmaEr · (Ind x) · (λ y : Ind x. x ≃ y)) (cSucc (projNat n)) (sucInd n).


Lift ◂ (Nat ➔ ★) ➔ (cNat ➔ ★) = λ P : (Nat ➔ ★). λ n : cNat. Sigma · cNat · (λ m : cNat. Product · (n ≃ m) · (Sigma · (SigmaEr · (Ind n) · (λ y : Ind n. n ≃ y)) · (λ prf : (SigmaEr · (Ind n) · (λ y : Ind n. n ≃ y)) . P (mkdsigma · cNat · (λ x : cNat. SigmaEr · (Ind x) · (λ y : Ind x. x ≃ y)) n prf)))).




projNatLift ◂ ∀ P : Nat ➔ ★. ∀ n : cNat. Lift · P n ➔ cNat = Λ P. Λ n. λ p. proj1 · cNat · (λ m : cNat. Product · (n ≃ m) · (Sigma · (SigmaEr · (Ind n) · (λ y : Ind n. n ≃ y)) · (λ prf : (SigmaEr · (Ind n) · (λ y : Ind n. n ≃ y)) . P (mkdsigma · cNat · (λ x : cNat. SigmaEr · (Ind x) · (λ y : Ind x. x ≃ y)) n prf)))) p.



projNatNat ◂ ∀ P : Nat ➔ ★. ∀ n : cNat. Lift · P n ➔ Nat = Λ P. Λ n. λ l. θ (ind-sigma · cNat · (λ m : cNat. Product · (n ≃ m) · (Sigma · (SigmaEr · (Ind n) · (λ y : Ind n. n ≃ y)) · (λ prf : (SigmaEr · (Ind n) · (λ y : Ind n. n ≃ y)) . P (mkdsigma · cNat · (λ x : cNat. SigmaEr · (Ind x) · (λ y : Ind x. x ≃ y)) n prf)))) l ) 
  (λ a. λ b. θ (ind-Product · (n ≃ a) · (Sigma · (SigmaEr · (Ind n) · (λ y : (Ind n) . (n ≃ y))) · (λ prf : (SigmaEr · (Ind n) · (λ y : (Ind n) . (n ≃ y))) . (P (mkdsigma · cNat · (λ x : cNat. SigmaEr · (Ind x) · (λ y : Ind x. x ≃ y)) n prf))))  
      b)
       (λ ss. λ s. mkdsigma · cNat · (λ x : cNat. SigmaEr · (Ind x) · (λ y : Ind x. x ≃ y)) a (ρ ς ss - (proj1 · (SigmaEr · (Ind n) · (λ y : (Ind n) . (n ≃ y))) · (λ prf : (SigmaEr · (Ind n) · (λ y : (Ind n) . (n ≃ y))) . (P (mkdsigma · cNat · (λ x : cNat. SigmaEr · (Ind x) · (λ y : Ind x. x ≃ y)) n prf))) s))  )  )  .



thm2 ◂  ∀ P : Nat ➔ ★. ∀ n : cNat. Π l : Lift · P n.  (projNat (projNatNat -n l)) ≃ n = Λ P. Λ n. λ l.
  θ<l> (ind-sigma · cNat · (λ m : cNat. Product · (n ≃ m) · (Sigma · (SigmaEr · (Ind n) · (λ y : Ind n. n ≃ y)) · (λ prf : (SigmaEr · (Ind n) · (λ y : Ind n. n ≃ y)) . P (mkdsigma · cNat · (λ x : cNat. SigmaEr · (Ind x) · (λ y : Ind x. x ≃ y)) n prf)))) l ) 
  (λ a. λ b. θ<b> (ind-Product · (n ≃ a) · (Sigma · (SigmaEr · (Ind n) · (λ y : (Ind n) . (n ≃ y))) · (λ prf : (SigmaEr · (Ind n) · (λ y : (Ind n) . (n ≃ y))) . (P (mkdsigma · cNat · (λ x : cNat. SigmaEr · (Ind x) · (λ y : Ind x. x ≃ y)) n prf))))  
      b)
       (λ ss. λ s.  θ<s> (ind-sigma · (SigmaEr · (Ind n) · (λ y : (Ind n) . (n ≃ y))) · (λ prf : (SigmaEr · (Ind n) · (λ y : (Ind n) . (n ≃ y))) . (P (mkdsigma · cNat · (λ x' : cNat . (SigmaEr · (Ind x') · (λ y : (Ind x') . (x' ≃ y)))) n prf))) s) 
  (λ z. λ q. ε (ς ss)))).

thm3 ◂ ∀ P : Nat ➔ ★. ∀ n : cNat. Π lftp : Lift · P n. projNatLift lftp ≃ n = Λ P. Λ n. λ l.
  θ<l> (ind-sigma · cNat · (λ m : cNat. Product · (n ≃ m) · (Sigma · (SigmaEr · (Ind n) · (λ y : Ind n. n ≃ y)) · (λ prf : (SigmaEr · (Ind n) · (λ y : Ind n. n ≃ y)) . P (mkdsigma · cNat · (λ x : cNat. SigmaEr · (Ind x) · (λ y : Ind x. x ≃ y)) n prf)))) l ) 
  (λ a. λ b. θ<b> (ind-Product · (n ≃ a) · (Sigma · (SigmaEr · (Ind n) · (λ y : (Ind n) . (n ≃ y))) · (λ prf : (SigmaEr · (Ind n) · (λ y : (Ind n) . (n ≃ y))) . (P (mkdsigma · cNat · (λ x : cNat. SigmaEr · (Ind x) · (λ y : Ind x. x ≃ y)) n prf))))  
      b)
       (λ ss. λ s.  θ<s> (ind-sigma · (SigmaEr · (Ind n) · (λ y : (Ind n) . (n ≃ y))) · (λ prf : (SigmaEr · (Ind n) · (λ y : (Ind n) . (n ≃ y))) . (P (mkdsigma · cNat · (λ x' : cNat . (SigmaEr · (Ind x') · (λ y : (Ind x') . (x' ≃ y)))) n prf))) s) 
  (λ z. λ q. (ς ss)))).

projNatP  ◂ ∀ P : Nat ➔ ★. ∀ n : cNat. Π l : Lift · P n. P (projNatNat · P -n l) = Λ P. Λ n. λ l.
  θ<l> (ind-sigma · cNat · (λ m : cNat. Product · (n ≃ m) · (Sigma · (SigmaEr · (Ind n) · (λ y : Ind n. n ≃ y)) · (λ prf : (SigmaEr · (Ind n) · (λ y : Ind n. n ≃ y)) . P (mkdsigma · cNat · (λ x : cNat. SigmaEr · (Ind x) · (λ y : Ind x. x ≃ y)) n prf)))) l ) 
  (λ a. λ b. θ<b> (ind-Product · (n ≃ a) · (Sigma · (SigmaEr · (Ind n) · (λ y : (Ind n) . (n ≃ y))) · (λ prf : (SigmaEr · (Ind n) · (λ y : (Ind n) . (n ≃ y))) . (P (mkdsigma · cNat · (λ x : cNat. SigmaEr · (Ind x) · (λ y : Ind x. x ≃ y)) n prf))))  
      b)
       (λ ss. λ s.  θ<s> (ind-sigma · (SigmaEr · (Ind n) · (λ y : (Ind n) . (n ≃ y))) · (λ prf : (SigmaEr · (Ind n) · (λ y : (Ind n) . (n ≃ y))) . (P (mkdsigma · cNat · (λ x' : cNat . (SigmaEr · (Ind x') · (λ y : (Ind x') . (x' ≃ y)))) n prf))) s) 
  (λ z. λ q. ρ+ ς ss - q   )  )).





Induct' ◂ ∀ P : Nat ➔ ★. (∀ n : Nat. P n ➔ P (succ n)) ➔ P zero ➔ Π n : Nat. Lift · P (projNat n) = Λ P. λ s. λ z. λ n. projNatInd n · (Lift · P) 

  (Λ n. λ lftp . mkdsigma · cNat ·  (λ m : cNat. Product · ((cSucc n) ≃ m) · (Sigma · (SigmaEr · (Ind (cSucc n)) · (λ y : (Ind (cSucc n)) . ((cSucc n) ≃ y))) · 
                            (λ prf : (SigmaEr · (Ind (cSucc n)) · (λ y : (Ind (cSucc n)) . ((cSucc n) ≃ y))) . (P (mkdsigma · cNat · (λ x : cNat. SigmaEr · (Ind x) · (λ y : Ind x. x ≃ y)) (cSucc n) prf))))) 
   (cSucc (projNatLift · P -n lftp))
  
  (pair · ((cSucc n) ≃  (cSucc (projNatLift -n lftp))) ·  (Sigma · (SigmaEr · (Ind (cSucc n)) · (λ y : (Ind (cSucc n)) . ((cSucc n) ≃ y))) · 
                            (λ prf : (SigmaEr · (Ind (cSucc n)) · (λ y : (Ind (cSucc n)) . ((cSucc n) ≃ y))) . (P (mkdsigma · cNat · (λ x : cNat. SigmaEr · (Ind x) · (λ y : Ind x. x ≃ y)) (cSucc n) prf))))
  (ρ (thm3 · P -n lftp) - β) (mkdsigma · (SigmaEr · (Ind (cSucc n)) · (λ y : (Ind (cSucc n)) . ((cSucc n) ≃ y))) · 
                            (λ prf : (SigmaEr · (Ind (cSucc n)) · (λ y : (Ind (cSucc n)) . ((cSucc n) ≃ y))) . (P (mkdsigma · cNat · (λ x : cNat. SigmaEr · (Ind x) · (λ y : Ind x. x ≃ y)) (cSucc n) prf)))
    (ρ ς (thm2 · P -n lftp) - (sucInd (projNatNat · P -n lftp) )) (ρ ς (thm2 · P -n lftp) - (s -(projNatNat · P -n lftp)  (projNatP · P -n lftp)) )    ))    )


  (mkdsigma · cNat · (λ m : cNat. Product · (cZero ≃ m) · (Sigma · (SigmaEr · (Ind cZero) · (λ y : Ind cZero. cZero ≃ y)) · (λ prf : (SigmaEr · (Ind cZero) · (λ y : Ind cZero. cZero ≃ y)) . P (mkdsigma · cNat · (λ x : cNat. SigmaEr · (Ind x) · (λ y : Ind x. x ≃ y)) cZero prf)))) cZero (mkdsigma · (cZero ≃ cZero) · (λ _ : (cZero ≃ cZero) . (Sigma · (SigmaEr · (Ind cZero) · (λ y : (Ind cZero) . (cZero ≃ y))) · (λ prf : (SigmaEr · (Ind cZero) · (λ y : (Ind cZero) . (cZero ≃ y))) . (P (mkdsigma · cNat ·  (λ x : cNat. SigmaEr · (Ind x) · (λ y : Ind x. x ≃ y)) cZero prf))))) β (mkdsigma · (SigmaEr · (Ind cZero) · (λ y : (Ind cZero) . (cZero ≃ y))) · (λ prf : (SigmaEr · (Ind cZero) · (λ y : (Ind cZero) . (cZero ≃ y))) . (P (mkdsigma · cNat ·  (λ x : cNat. SigmaEr · (Ind x) · (λ y : Ind x. x ≃ y)) cZero prf))) (mksigmaer · (Ind cZero) · (λ y : (Ind cZero) . (cZero ≃ y)) (Λ P. λ s. λ z. z) -β  ) z )  )  )   .



tr ◂ ∀ w : Top. ∀ a : Top. ∀ b : Top.  (w ≃ a) ➾ (a ≃ b) ➾ (w ≃ b) = Λ w. Λ a. Λ b. Λ p1. Λ p2. ρ p1 - ρ p2 - β.

conv ◂ ∀ P : Nat ➔ ★. Π n : Nat. Lift · P (projNat n) ➔ P n = Λ P. λ n.  θ<n> (ind-sigma · cNat · (λ x : cNat. SigmaEr · (Ind x) · (λ y : Ind x. x ≃ y)) n ) 
 (λ a. λ b. λ l. θ<l> (ind-sigma · cNat · 
   (λ m : cNat. Product · ((projNat (mkdsigma · cNat · (λ x : cNat. SigmaEr · (Ind x) · (λ y : Ind x. x ≃ y)) a b)) ≃ m) · (Sigma · (SigmaEr · (Ind (projNat (mkdsigma · cNat · (λ x : cNat. SigmaEr · (Ind x) · (λ y : Ind x. x ≃ y)) a b))) · (λ y : Ind (projNat (mkdsigma · cNat · (λ x : cNat. SigmaEr · (Ind x) · (λ y : Ind x. x ≃ y)) a b)). (projNat (mkdsigma · cNat · (λ x : cNat. SigmaEr · (Ind x) · (λ y : Ind x. x ≃ y)) a b)) ≃ y)) · (λ prf : (SigmaEr · (Ind (projNat (mkdsigma · cNat · (λ x : cNat. SigmaEr · (Ind x) · (λ y : Ind x. x ≃ y)) a b))) · (λ y : Ind (projNat (mkdsigma · cNat · (λ x : cNat. SigmaEr · (Ind x) · (λ y : Ind x. x ≃ y)) a b)). (projNat (mkdsigma · cNat · (λ x : cNat. SigmaEr · (Ind x) · (λ y : Ind x. x ≃ y)) a b)) ≃ y)) . P (mkdsigma · cNat · (λ x : cNat. SigmaEr · (Ind x) · (λ y : Ind x. x ≃ y)) (projNat (mkdsigma · cNat · (λ x : cNat. SigmaEr · (Ind x) · (λ y : Ind x. x ≃ y)) a b)) prf))))
           l) 
 (λ p. λ q. θ<b> (ind-sigmaer · (Ind a) · (λ y : (Ind a) . (a ≃ y)) b) 


  (λ w. Λ z. θ (ind-Product · ((projNat (mkdsigma a b)) ≃ p) · (Sigma · (SigmaEr · (Ind (projNat (mkdsigma · cNat · (λ x : cNat. SigmaEr · (Ind x) · (λ y : Ind x. x ≃ y)) a b))) · (λ y : (Ind (projNat (mkdsigma · cNat · (λ x : cNat. SigmaEr · (Ind x) · (λ y : Ind x. x ≃ y)) a b))) . ((projNat (mkdsigma a b)) ≃ y))) · (λ prf : (SigmaEr · (Ind (projNat (mkdsigma · cNat · (λ x : cNat. SigmaEr · (Ind x) · (λ y : Ind x. x ≃ y)) a b))) · (λ y : (Ind (projNat (mkdsigma · cNat · (λ x : cNat. SigmaEr · (Ind x) · (λ y : Ind x. x ≃ y)) a b))) . ((projNat (mkdsigma · cNat · (λ x : cNat. SigmaEr · (Ind x) · (λ y : Ind x. x ≃ y)) a b)) ≃ y))) . (P (mkdsigma  · cNat · (λ x : cNat . (SigmaEr · (Ind x) · (λ y : (Ind x) . (x ≃ y)))) (projNat (mkdsigma · cNat · (λ x : cNat. SigmaEr · (Ind x) · (λ y : Ind x. x ≃ y)) a b)) prf)))) q )
   (λ kk. λ qq. θ<qq> (ind-sigma · (SigmaEr · (Ind (projNat (mkdsigma · cNat · (λ x : cNat. SigmaEr · (Ind x) · (λ y : Ind x. x ≃ y)) a b))) · (λ y : (Ind (projNat (mkdsigma · cNat · (λ x : cNat. SigmaEr · (Ind x) · (λ y : Ind x. x ≃ y)) a b))) . ((projNat (mkdsigma · cNat · (λ x : cNat. SigmaEr · (Ind x) · (λ y : Ind x. x ≃ y)) a b)) ≃ y))) · (λ prf : (SigmaEr · (Ind (projNat (mkdsigma · cNat · (λ x : cNat. SigmaEr · (Ind x) · (λ y : Ind x. x ≃ y)) a b))) · (λ y : (Ind (projNat (mkdsigma · cNat · (λ x : cNat. SigmaEr · (Ind x) · (λ y : Ind x. x ≃ y)) a b))) . ((projNat (mkdsigma · cNat · (λ x : cNat. SigmaEr · (Ind x) · (λ y : Ind x. x ≃ y)) a b)) ≃ y))) . (P (mkdsigma · cNat · (λ x : cNat . (SigmaEr · (Ind x) · (λ y : (Ind x) . (x ≃ y)))) (projNat (mkdsigma · cNat · (λ x : cNat. SigmaEr · (Ind x) · (λ y : Ind x. x ≃ y)) a b)) prf))) qq) 
  (λ aa. θ<aa> (ind-sigmaer · (Ind (projNat (mkdsigma · cNat · (λ x : cNat. SigmaEr · (Ind x) · (λ y : Ind x. x ≃ y)) a b))) · (λ y : (Ind (projNat (mkdsigma · cNat · (λ x : cNat. SigmaEr · (Ind x) · (λ y : Ind x. x ≃ y)) a b))) . ((projNat (mkdsigma · cNat · (λ x : cNat. SigmaEr · (Ind x) · (λ y : Ind x. x ≃ y)) a b)) ≃ y)) aa ) 
    (λ bb. Λ cc. λ dd. ρ (tr -β{w} -β{a} -β{bb} -(ς z) -(cc) ) - dd   ))   )   )  )  )       


   .
 


Induction ◂ ∀ P : Nat ➔ ★. (∀ n : Nat. P n ➔ P (succ n)) ➔ P zero ➔ Π n : Nat. P n = Λ P. λ s. λ z. λ n. conv · P n (Induct' · P s z n).
