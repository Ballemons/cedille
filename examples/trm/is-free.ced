import bool.
import nat.
import trm.
import test-trms.

num-free-occ ◂ Nat ➔ trm ➔ Nat = 
  λ i . λ t .
    θ t (λ _ . λ _ . add)
        (λ _ . λ _ . λ N . N Z)
        (λ j . θ (eqnat j i) one Z) .

is-free = λ i : Nat . λ t : trm . not (is-zero (num-free-occ i t)) .

is-free Z omega-trm !
is-free (S Z) fv-trm !

apart-from ◂ Nat ➔ trm ➔ Bool = λ n . λ t . eqnat (num-free-occ n t) Z .

Apart-from ◂ Nat ➔ trm ➔ ★ = λ n : Nat . λ t : trm . apart-from n t ≃ tt .

is-bound ◂ Nat ➔ trm ➔ Bool = 
 λ x . λ t .
   θ t (λ _ . λ _ . or)
       (λ i . λ _ . λ N . or (eqnat i x) (N ff))
       (λ _ . ff) .

is-bound Z omega-trm !
is-bound (S Z) fv-trm !
is-bound (S Z) fv-trm2 !
