import bool.
import nat.
import trm.
import trm-util.

substh-app ⇐ trm → trm → trm → trm → trm = λ t1 . λ t2 . λ r1 . λ r2 . app r1 r2 .
substh-lam ⇐ Bool → trm → trm → Nat → trm → (trm → trm) → trm = 
  λ avoid-capture . λ t . λ t' . λ i . λ f . λ r . 
     (λ bnd : Nat .
         χ trm - (θ (and avoid-capture (lt i bnd)) (lam bnd (r (var bnd))) (lam i (r (var i)))))
     (max (var-bound t) (var-bound t')) .
substh-var ⇐ Nat → trm → Nat → trm = λ x . λ t' . λ i . θ (eqnat i x) t' (var i) .

substh ⇐ Bool → trm → Nat → trm → trm =
  λ avoid-capture . λ t' . λ x . λ t .
    θ t substh-app
        (substh-lam avoid-capture t t')
        (substh-var x t') .

subst = substh tt.
graft = substh ff.

test ⇐ trm = lam Z (app (var (S Z)) (lam (S Z) (var (S Z)))) !

to-ctrm test !

to-ctrm fv-trm !
to-ctrm (graft (var Z) (S Z) fv-trm) !
to-ctrm (subst (var Z) (S Z) fv-trm) !
