import nat.
import nat-thms-compare.

extend ⇐ ∀ tp : ★ .
         ∀ P : tp → ★ .
         Π var : Nat → tp .
         Π v : (Π i : Nat . P (var i)) .
         Π i : Nat . 
         Π p : P (var i) .
           (Π j : Nat . P (var j)) =  
  Λ tp . Λ P . λ var . λ v . λ i . λ p . λ j .
    θ+ (eqnat i j) (λ u . ρ ς (eqnat-eq i j u) - p) (λ u . v j) .

rec tp : | arrow : tp → tp → tp ,
           forall : Nat → tp → tp ,
           var : Nat → tp =
 ∀ P : tp → ★ .  
   (Π t1 : tp . Π t2 : tp . P t1 → P t2 → P (arrow t1 t2)) → 
   (Π i : Nat . Π f : tp . (P (var i) → P f) → P (forall i f)) → 
   (Π i : Nat . P (var i)) → 
   P self
with 
  arrow = λ t1 . λ t2 . Λ P . λ a . λ l . λ v . a t1 t2 (t1 · P a l v) (t2 · P a l v),
  forall = λ i . λ f . Λ P . λ a . λ l . λ v . l i f (λ x . f · P a l (extend · tp · P var v i x)),
  var = λ i . Λ P . λ a . λ l . λ v . v i 
 .

test ⇐ (Nat → ★ → ★) → ★ → ★ = ↑ X . Z · (λ n : Nat . X) : ((Nat → ☆ → ☆) → ☆ → ☆) !

interp ⇐ (Nat → ★) → tp → ★ =
   λ R : Nat → ★ . λ T : tp .
    ↑ X . T · (λ _ : tp . X) : ((tp → tp → ☆ → ☆ → ☆) → (Nat → tp → (☆ → ☆) → ☆) → (Nat → ☆) → ☆)
            · (λ _ : tp . λ _ : tp . λ S1 : ★ . λ S2 : ★ . (S1 → S2))
	    · (λ _ : Nat . λ _ : tp . λ S : ★ → ★ . ∀ X : ★ . S · X)
	    · R .
	      
test ⇐ ★ = interp · (λ X : Nat . Nat) (forall Z (arrow (var Z) (var Z))) !
