import stlc.
import subst.
import stlc-examples.

hastp-assumed ⇐ Π x : Nat . Π xT : tp . Π t : trm . Π T : tp .
                hastp t T → Bool =
  λ x . λ xT . λ t . λ T . λ u .
    θ<t T u> u
        (λ _ . λ _ . λ _ . λ _ . λ _ . λ _ . and)
        (λ _ . λ _ . λ _ . λ _ . λ _ . λ r . r tt)
        (λ x' . λ xT' . imp (eqnat x x') (eq-tp xT xT')) .

hastp-assumed one (arrow (arrow (base Z) (base Z)) (base Z)) (app (var one) (lam Z (var Z))) (base Z) hastp-eg1 !

hastp-assumed one (arrow (base Z) (base Z)) (app (var one) (lam Z (var Z))) (base Z) hastp-eg1 !

hastp-assumed Z (base Z) (app (var one) (lam Z (var Z))) (base Z) hastp-eg1 !

hastp-subst ⇐ Π t1 : trm . Π x : Nat . Π t2 : trm .
              Π T1 : tp . Π T2 : tp . Π d : hastp t2 T2 .
              (hastp-assumed x T1 t2 T2 d ≃ tt) → 
              hastp (subst t1 x t2) T2 = 
  λ t1 . λ x . λ t2 . λ T1 . λ T2 . λ d . 
    θ<t2 T2 d> d (λ t2a . λ t2b . λ Ta . λ Tb . λ d1 . λ d2 . λ r1 . λ r2 . λ ha. 
                    hastp-app (subst t1 x t2a) (subst t1 x t2b) Ta Tb
		      (r1 (andE1 (hastp-assumed x T1 t2a (arrow Ta Tb) d1) (hastp-assumed x T1 t2b Ta d2) ha))
		      (r2 (andE2 (hastp-assumed x T1 t2a (arrow Ta Tb) d1) (hastp-assumed x T1 t2b Ta d2) ha))) ● ● .
  
