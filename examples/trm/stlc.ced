import trm.
import simple-types.

hastp-extend ⇐ ∀ P : trm → tp → ★ . 
         Π v : (Π x : Nat . Π T : tp . P (var x) T) .
         Π x : Nat .
         Π T : tp .
         Π u : P (var x) T .
         (Π y : Nat . Π T' : tp . P (var y) T') =
  Λ P . λ v . λ x . λ T . λ u . λ y . λ T' .
    θ+ (eqnat x y) (λ u1 . (θ+ (eq-tp T T') (λ u2 . ρ ς (eqnat-eq x y u1) - ρ ς (eq-tp-sound T T' u2) - u) 
                                            (λ _ . v y T'))) 
                   (λ _ . v y T') .

rec hastp : (t : trm)(T : tp) | 
  hastp-app : Π t1 : trm . Π t2 : trm . Π Ta : tp . Π Tb : tp .
                hastp t1 (arrow Ta Tb) → hastp t2 Ta → hastp (app t1 t2) Tb ,
  hastp-lam : Π x : Nat . Π b : trm . Π Ta : tp . Π Tb : tp .
                hastp b Tb → hastp (lam x b) (arrow Ta Tb) , 
  hastp-assume : Π x : Nat . Π T : tp . hastp (var x) T =
  ∀ P : trm → tp → ★ .
    (Π t1 : trm . Π t2 : trm . Π Ta : tp . Π Tb : tp .
     P t1 (arrow Ta Tb) → P t2 Ta → P (app t1 t2) Tb ) →
    (Π x : Nat . Π b : trm . Π Ta : tp . Π Tb : tp .
     (P (var x) Ta → P b Tb) → P (lam x b) (arrow Ta Tb)) →
    (Π x : Nat . Π T : tp . P (var x) T) → 
    P t T 
with
  hastp-app = λ t1 . λ t2 . λ Ta . λ Tb . λ h1 . λ h2 .
                Λ P . λ a . λ l . λ v . a t1 t2 Ta Tb (h1 · P a l v) (h2 · P a l v) ,
  hastp-lam = λ x . λ b . λ Ta . λ Tb . λ h .
                Λ P . λ a . λ l . λ v . l x b Ta Tb (λ u . h · P a l (hastp-extend · P v x Ta u)) ,
  hastp-assume = λ x . λ T . Λ P . λ a . λ l . λ v . v x T .
