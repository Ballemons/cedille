import base.

BinaryParam ◂ cNat ➔ ★ =
  λ x : cNat . ∀ A : ★ . ∀ B : ★ . ∀ R : A ➔ B ➔ ★ . ∀ f : A ➔ A . ∀ g : B ➔ B .
    (∀ a : A . ∀ b : B . R a b ➔ R (f a) (g b)) ➔ (∀ a : A . ∀ b : B . R a b ➔ R (x · A f a) (x · B g b)).

Nat ◂ ★ = ι x : cNat . BinaryParam x .

Z ◂ Nat = [ cZ , Λ A . Λ B . Λ R . Λ f . Λ g . λ s . Λ a . Λ b . λ z . z ] .
S ◂ Nat ➔ Nat = λ n : Nat . [ cS n.1 , 
                              Λ A . Λ B . Λ R . Λ f. Λ g . λ s . Λ a . Λ b . λ z .
                                s -(n.1 · A f a) -(n.1 · B g b)
                                   (n.2 · A · B · R -f -g s -a -b z) ] .

rebuilding ◂ Π n : Nat . n S Z ≃ n =
  λ n . ω (Λ A : ★ . ω (Λ s : A ➔ A . ω (Λ z : A .
          χ (n S Z s z ≃ n s z) -
            (n.2 · Nat · A · (λ n : Nat . λ a : A . n s z ≃ a)
              -S -s (Λ a . Λ b . λ u . ρ+ u - β) -Z -z β)))) .
        
Ind ◂ Π x : Nat . ∀ Q : Nat ➔ ★ . (∀ x : Nat . Q x ➔ Q (S x)) ➔ Q Z ➔ Q x =
  λ x . Λ Q . λ s . λ z . ρ ς (rebuilding x) - (x.2 · Nat · Nat · (λ x : Nat . λ y : Nat . Q x) -S -S (Λ x . Λ y . s -x) -Z -Z z) .


