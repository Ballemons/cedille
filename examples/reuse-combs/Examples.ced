import Cast.
module ReuseCombs.Examples
  (Nat : ★) (List : ★ ➔ ★) (Vec : ★ ➔ Nat ➔ ★)
  (len : ∀ A : ★ . List · A ➔ Nat)
  (plus : Nat ➔ Nat ➔ Nat)
  (v2l : ∀ A : ★ . ∀ n : Nat . Cast' · (Vec · A n) · (List · A))
  (l2v : ∀ A : ★ . Cast · (List · A) · (λ xs : List · A . Vec · A (len · A xs)))
  (v2u : ∀ A : ★ . ∀ n : Nat . Cast' · (Vec · A n) · (ι xs : List · A . n ≃ len xs))
  (u2v : ∀ A : ★ . ∀ n : Nat . Cast' · (ι xs : List · A . n ≃ len xs) · (Vec · A n))
  .

VecL ◂ ★ ➔ Nat ➔ ★ = λ A : ★ . λ n : Nat .
  ι xs : List · A . n ≃ len xs .

appendV2appendL ◂ Cast'
  · (∀ A : ★ . ∀ n : Nat . Vec · A n ➔ ∀ m : Nat . Vec · A m ➔ Vec · A (plus n m))
  · (∀ A : ★ . List · A ➔ List · A ➔ List · A)
  = copyType
  · (λ A : ★ . ∀ n : Nat . Vec · A n ➔ ∀ m : Nat . Vec · A m ➔ Vec · A (plus n m))
  · (λ A : ★ . List · A ➔ List · A ➔ List · A)
  -(Λ A . allArr2arr
  · Nat · (Vec · A) · (λ n : Nat . ∀ m : Nat . Vec · A m ➔ Vec · A (plus n m))
  · (List · A) · (List · A ➔ List · A)
  -(len · A) -(l2v · A)
  -(λ n . allArr2arr
  · Nat · (Vec · A) · (λ m : Nat . Vec · A (plus n m))
  · (List · A) · (List · A)
  -(len · A)
  -(l2v · A)
  -(λ m . v2l · A -(plus n m)
  ))) .

% could also take appendL and proof that appendV ≃ appendL
assocV2assocL ◂
  ∀ appendV : ∀ A : ★ . ∀ n : Nat . Vec · A n ➔ ∀ m : Nat . Vec · A m ➔ Vec · A (plus n m) .
  Cast'
  · (∀ A : ★ .
     ∀ n : Nat . Π xs : Vec · A n .
     ∀ m : Nat . Π ys : Vec · A m .
     ∀ o : Nat . Π zs : Vec · A o .
     appendV (appendV xs ys) zs ≃ appendV xs (appendV ys zs))
  · (∀ A : ★ .
     Π xs : List · A .
     Π ys : List · A .
     Π zs : List · A .
     appendV (appendV xs ys) zs ≃ appendV xs (appendV ys zs))
  = Λ appendV . copyType
  · (λ A : ★ .
     ∀ n : Nat . Π xs : Vec · A n .
     ∀ m : Nat . Π ys : Vec · A m .
     ∀ o : Nat . Π zs : Vec · A o .
     appendV (appendV xs ys) zs ≃ appendV xs (appendV ys zs))
  · (λ A : ★ .
     Π xs : List · A .
     Π ys : List · A .
     Π zs : List · A .
     appendV (appendV xs ys) zs ≃ appendV xs (appendV ys zs))
  -(Λ A . allPi2Pi
  · Nat · (Vec · A) · (λ n : Nat . λ xs : Vec · A n .
    ∀ m : Nat . Π ys : Vec · A m .
    ∀ o : Nat . Π zs : Vec · A o .
    appendV (appendV xs ys) zs ≃ appendV xs (appendV ys zs))
  · (List · A) · (λ xs : List · A .
    Π ys : List · A .
    Π zs : List · A .
    appendV (appendV xs ys) zs ≃ appendV xs (appendV ys zs))
  -(len · A) -(l2v · A)
  -(λ xs . allPi2Pi
  · Nat · (Vec · A) · (λ m : Nat . λ ys : Vec · A m .
    ∀ o : Nat . Π zs : Vec · A o .
    appendV (appendV xs ys) zs ≃ appendV xs (appendV ys zs))
  · (List · A) · (λ ys : List · A .
    Π zs : List · A .
    appendV (appendV xs ys) zs ≃ appendV xs (appendV ys zs))
  -(len · A) -(l2v · A)
  -(λ ys . allPi2Pi
  · Nat · (Vec · A) · (λ o : Nat . λ zs : Vec · A o .
    appendV (appendV xs ys) zs ≃ appendV xs (appendV ys zs))
  · (List · A) · (λ zs : List · A .
    appendV (appendV xs ys) zs ≃ appendV xs (appendV ys zs))
  -(len · A) -(l2v · A)
  -(λ zs . id
  · (appendV (appendV xs ys) zs ≃ appendV xs (appendV ys zs))
  )))) .

appendL2appendV ◂ Cast'
  · (∀ A : ★ . Π xs : List · A . Π ys : List · A . VecL · A (plus (len · A xs) (len · A ys)))
  · (∀ A : ★ . ∀ n : Nat . Vec · A n ➔ ∀ m : Nat . Vec · A m ➔ Vec · A (plus n m))
  = copyType
  · (λ A : ★ . Π xs : List · A . Π ys : List · A . VecL · A (plus (len · A xs) (len · A ys)))
  · (λ A : ★ . ∀ n : Nat . Vec · A n ➔ ∀ m : Nat . Vec · A m ➔ Vec · A (plus n m))
  -(Λ A . pi2allArr
  · (List · A) · (λ xs : List · A . Π ys : List · A . VecL · A (plus (len · A xs) (len · A ys)))
  · Nat · (Vec · A) · (λ n : Nat . ∀ m : Nat . Vec · A m ➔ Vec · A (plus n m))
  -(len · A) -(λ n . v2u · A -n)
  -(λ xs . pi2allArr
  · (List · A) · (λ ys : List · A . VecL · A (plus (len · A xs) (len · A ys)))
  · Nat · (Vec · A) · (λ m : Nat . Vec · A (plus (len · A xs) m))
  -(len · A) -(λ m . v2u · A -m)
  -(λ ys . u2v · A -(plus (len · A xs) (len · A ys))
  ))) .

assocL2assocV ◂
  ∀ appendL : ∀ A : ★ . Π xs : List · A . Π ys : List · A . VecL · A (plus (len · A xs) (len · A ys)) .
  Cast'
  · (∀ A : ★ .
     Π xs : List · A .
     Π ys : List · A .
     Π zs : List · A .
     appendL (appendL xs ys) zs ≃ appendL xs (appendL ys zs))
  · (∀ A : ★ .
     ∀ n : Nat . Π xs : Vec · A n .
     ∀ m : Nat . Π ys : Vec · A m .
     ∀ o : Nat . Π zs : Vec · A o .
     appendL (appendL xs ys) zs ≃ appendL xs (appendL ys zs))
  = Λ appendL . copyType
  · (λ A : ★ .
     Π xs : List · A .
     Π ys : List · A .
     Π zs : List · A .
     appendL (appendL xs ys) zs ≃ appendL xs (appendL ys zs))
  · (λ A : ★ .
     ∀ n : Nat . Π xs : Vec · A n .
     ∀ m : Nat . Π ys : Vec · A m .
     ∀ o : Nat . Π zs : Vec · A o .
     appendL (appendL xs ys) zs ≃ appendL xs (appendL ys zs))
  -(Λ A . pi2allPi
  · (List · A) · (λ xs : List · A .
    Π ys : List · A .
    Π zs : List · A .
    appendL (appendL xs ys) zs ≃ appendL xs (appendL ys zs))
  · Nat · (Vec · A) · (λ n : Nat . λ xs : Vec · A n .
    ∀ m : Nat . Π ys : Vec · A m .
    ∀ o : Nat . Π zs : Vec · A o .
    appendL (appendL xs ys) zs ≃ appendL xs (appendL ys zs))
  -(len · A) -(l2v · A) -(λ n . v2u · A -n)
  -(λ xs . pi2allPi
  · (List · A) · (λ ys : List · A .
    Π zs : List · A .
    appendL (appendL xs ys) zs ≃ appendL xs (appendL ys zs))
  · Nat · (Vec · A) · (λ m : Nat . λ ys : Vec · A m .
    ∀ o : Nat . Π zs : Vec · A o .
    appendL (appendL xs ys) zs ≃ appendL xs (appendL ys zs))
  -(len · A) -(l2v · A) -(λ m . v2u · A -m)
  -(λ ys . pi2allPi
  · (List · A) · (λ zs : List · A .
    appendL (appendL xs ys) zs ≃ appendL xs (appendL ys zs))
  · Nat · (Vec · A) · (λ o : Nat . λ zs : Vec · A o .
    appendL (appendL xs ys) zs ≃ appendL xs (appendL ys zs))
  -(len · A) -(l2v · A) -(λ o . v2u · A -o)
  -(λ zs . id
  · (appendL (appendL xs ys) zs ≃ appendL xs (appendL ys zs))
  )))) .

mapL2mapV ◂ Cast'
  · (∀ A : ★ . ∀ B : ★ .  (A ➔ B) ➔ Π xs : List · A . VecL · B (len · A xs))
  · (∀ A : ★ . ∀ B : ★ .  (A ➔ B) ➔ ∀ n : Nat . Vec · A n ➔ Vec · B n)
  = copyType
  · (λ A : ★ . ∀ B : ★ .  (A ➔ B) ➔ Π xs : List · A . VecL · B (len · A xs))
  · (λ A : ★ . ∀ B : ★ .  (A ➔ B) ➔ ∀ n : Nat . Vec · A n ➔ Vec · B n)
  -(Λ A . copyType
  · (λ B : ★ . (A ➔ B) ➔ Π xs : List · A . VecL · B (len · A xs))
  · (λ B : ★ . (A ➔ B) ➔ ∀ n : Nat . Vec · A n ➔ Vec · B n)
  -(Λ B . copyArr · (A ➔ B)
  · (Π xs : List · A . VecL · B (len · A xs))
  · (∀ n : Nat . Vec · A n ➔ Vec · B n)
  -(λ f . pi2allArr
  · (List · A) · (λ xs : List · A . VecL · B (len · A xs))
  · Nat · (Vec · A) · (λ n : Nat . Vec · B n)
  -(len · A) -(λ n . v2u · A -n)
  -(λ xs . u2v · B -(len · A xs)
  )))) .

