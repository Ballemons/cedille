module FreeProofReuse.VecReuse.
import Nat.
import List.
import Vec.
import Coe.
import VecDefs.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

appendL ◂ ∀ A : ★ . List · A ➔ List · A ➔ List · A
  = Λ A . λ xs . λ ys . v2l · A
  -(add (length · A xs) (length · A ys))
  (appendV · A
    -(length · A xs)
    (l2v · A xs)
    -(length · A ys)
    (l2v · A ys)) .

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

appendNilL ◂ ∀ A : ★ . Π xs : List · A . appendL xs nilL ≃ xs
  = Λ A . λ xs . appendNilV · A -(length · A xs) (l2v · A xs) .

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

appendAssocL ◂ ∀ A : ★ .
  Π xs : List · A .
  Π ys : List · A .
  Π zs : List · A .
  appendL (appendL xs ys) zs ≃ appendL xs (appendL ys zs)
  = Λ A . λ xs . λ ys . λ zs .
  appendAssocV · A
    -(length · A xs) (l2v · A xs)
    -(length · A ys) (l2v · A ys)
    -(length · A zs) (l2v · A zs) .

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
