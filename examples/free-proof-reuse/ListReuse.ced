import Nat.
import List.
import VecL.
import Vec.
import Coe.
import Coes.
import ListDefs.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

mapV ◂ ∀ A : ★ . ∀ B : ★ .  (A ➔ B) ➔
  ∀ n : Nat . Vec · A n ➔ Vec · B n
  = Λ A . Λ B . λ f . Λ n . λ xs .
  ρ (v2u · A -n xs).2 -
  ρ (mapPresLengthL · A · B f (v2l · A -n xs)) -
  (l2v · B (mapL · A · B f (v2l · A -n xs))) .

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

mapCompV ◂ ∀ A : ★ . ∀ B : ★ . ∀ C : ★ .
  Π f : A ➔ B . Π g : B ➔ C .
  ∀ n : Nat . Π xs : Vec · A n .
  mapV (λ x . g (f x)) xs ≃ mapV g (mapV f xs)
  = Λ A . Λ B . Λ C . λ f . λ g . Λ n . λ xs .
  mapCompL · A · B · C f g (v2l · A -n xs) .

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

appendV ◂ ∀ A : ★ .
  ∀ n : Nat . Vec · A n ➔
  ∀ m : Nat . Vec · A m ➔
  Vec · A (add n m)
  = Λ A . Λ n . λ xs . Λ m . λ ys .
  ρ (lengthPres · A -n xs) -
  ρ (lengthPres · A -m ys) -
  ρ (lengthDistAppendL · A (v2l · A -n xs) (v2l · A -m ys)) -
  (l2v · A
    (appendL · A (v2l · A -n xs) (v2l · A -m ys))) .

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

appendV2 ◂ ∀ A : ★ .
  ∀ n : Nat . Vec · A n ➔
  ∀ m : Nat . Vec · A m ➔
  Vec · A (add n m)
  = Λ A . Λ n . λ xs . Λ m . λ ys .
  ρ (v2u · A -n xs).2 -
  ρ (v2u · A -m ys).2 -
  ρ (lengthDistAppendL · A (v2u · A -n xs).1 (v2u · A -m ys).1) -
  (l2v · A
    (appendL · A (v2u · A -n xs).1 (v2u · A -m ys).1)) .

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

appendNilV ◂ ∀ A : ★ .
  ∀ n : Nat . Π xs : Vec · A n . appendV xs nilV ≃ xs
  = Λ A . Λ n . λ xs . appendNilL · A (v2l · A -n xs) .

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

appendAssocV ◂ ∀ A : ★ .
  ∀ n : Nat . Π xs : Vec · A n .
  ∀ m : Nat . Π ys : Vec · A m .
  ∀ o : Nat . Π zs : Vec · A o .
  appendV (appendV xs ys) zs ≃ appendV xs (appendV ys zs)
  = Λ A . Λ n . λ xs . Λ m . λ ys . Λ o . λ zs .
  appendAssocL · A
    (v2l · A -n xs)
    (v2l · A -m ys)
    (v2l · A -o zs) .

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

concatV ◂ ∀ A : ★ . ∀ n : Nat . ∀ m : Nat .
  Vec · (Vec · A n) m ➔ Vec · A (mult m n)
  = Λ A . Λ n . Λ m . λ xss .
  ρ (v2u · (Vec · A n) -m xss).2 -
  ρ (lengthDistConcatL · A -n (v2u-v2l · A -n -m xss)) -
  (l2v · A (concatL · A (v2l-v2l · A -n -m xss))) .

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

concatIdV ◂ ∀ A : ★ . ∀ n : Nat . Π xs : Vec · A n .
  concatV (mapV injV xs) ≃ xs
  = Λ A . Λ n . λ xs .
  concatIdL · A (v2l · A -n xs) .

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

concatDistAppendV ◂ ∀ A : ★ .
  ∀ n1 : Nat . ∀ m1 : Nat . Π xss : Vec · (Vec · A n1) m1 .
  ∀ n2 : Nat . ∀ m2 : Nat . Π yss : Vec · (Vec · A n2) m2 .
  appendV (concatV xss) (concatV yss) ≃ concatV (appendV xss yss)
  = Λ A . Λ n1 . Λ m1 . λ xss . Λ n2 . Λ m2 . λ yss .
  concatDistAppendL · A
    (v2l-v2l · A -n1 -m1 xss)
    (v2l-v2l · A -n2 -m2 yss) .

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

concatCompV ◂ ∀ A : ★ . ∀ n1 : Nat . ∀ n2 : Nat . ∀ n3 : Nat . 
  Π xsss : Vec · (Vec · (Vec · A n1) n2) n3.
  concatV (mapV concatV xsss) ≃ concatV (concatV xsss)
  = Λ A . Λ n1 . Λ n2 . Λ n3 . λ xsss .
  concatCompL · A
    (v222l · A -n1 -n2 -n3 xsss) .

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

