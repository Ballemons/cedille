import nat.
import trm.

size-app = Λ _ : substmap · trm . Λ _ : trm . Λ _ : trm . λ s1 : Nat . λ s2 : Nat . S (add s1 s2) .
size-lam = Λ _ : substmap · trm . Λ _ : Nat . Λ _ : trm . λ N : (∀ _ : trm . Nat → Nat) . S (N -(var Z) one) .
size-var = extmapStart · trm · (λ _ : trm . Nat) -(var Z) one .

triv-subst = substmapStart · trm (var Z).

size ⇐ trm → Nat = 
  λ t . t · (λ _ : trm . Nat) size-app size-lam -triv-subst size-var.

test ⇐ trm = lam Z (app (var Z) (lam (S Z) (var (S Z)))) !

toCNat (size test) !

depth-app = Λ _ : substmap · trm . Λ _ : trm . Λ _ : trm . λ s1 : Nat . λ s2 : Nat . S (max s1 s2) .
depth-lam = Λ _ : substmap · trm . Λ _ : Nat . Λ _ : trm . λ N : (∀ _ : trm . Nat → Nat) . S (N -(var Z) Z) .
depth-var = extmapStart · trm · (λ _ : trm . Nat) -(var Z) Z.

depth ⇐ trm → Nat = 
  λ t . t · (λ _ : trm . Nat) depth-app depth-lam -triv-subst depth-var.

toCNat (depth test) !

depth-Lte-lem ⇐ ∀ x : Nat . ∀ y : Nat . ∀ x' : Nat . ∀ y' : Nat.
                Lte x x' → Lte y y' → Lte (max x y) (add x' y') = ●.

test = λ s : substmap · trm. λ i : Nat. λ f : trm . depth (subst s (lam i f)) !!
test2 = λ s : substmap · trm. λ i : Nat. λ f : trm . depth (subst (substmapUpdate · trm s i (var i)) f) !!

depth-Lte-size ⇐ Π t : trm . Lte (depth t) (size t) = 
  λ t . t · (λ t : trm . Lte (depth t) (size t))
          (Λ s . Λ t1 . Λ t2 . λ ih1 . λ ih2 .
	    depth-Lte-lem -(depth (subst s t1)) -(depth (subst s t2)) -(size (subst s t1)) -(size (subst s t2)) ih1 ih2)
	  (Λ s . Λ i . Λ f . λ ih .
             χ (lte (f depth-app depth-lam (extmapUpdate (substmapToExtmap depth s) i Z))
                    (f size-app size-lam (extmapUpdate (substmapToExtmap size s) i one)) ≃ tt) -
                ρ (extmapUpdateSubstmap s i · Nat -depth) -
                ρ (extmapUpdateSubstmap s i · Nat -size) -
                 (ih -(var i) β))
	  -triv-subst (extmapStart · trm · (λ t : trm . (Lte (depth t) (size t))) -(var Z) β) .

