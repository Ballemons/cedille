import finmap.
import nat.

rec trm : | app : trm → trm → trm ,
            lam : Nat → trm → trm ,
            subst : (finmap · (λ _ : Nat . trm)) → trm → trm,
            var : Nat → trm =
 ∀ P : trm → ★ .  
   (∀ s : finmap · (λ _ : Nat . trm) . ∀ t1 : trm . ∀ t2 : trm . P (subst s t1) → P (subst s t2) → P (subst s (app t1 t2))) → 
   (∀ s : finmap · (λ _ : Nat . trm) . ∀ i : Nat . ∀ f : trm .
      (∀ t : trm . P t → P (subst (finmapUpdate · (λ _ : Nat . trm) s i t) f)) → P (subst s (lam i f))) → 
   ∀ s : finmap · (λ _ : Nat . trm).
   finmap · (λ i : Nat . P (finmapLookup · (λ i : Nat . trm) s i)) →
   P (subst s self)
with 
  app = λ t1 . λ t2 . Λ P . λ a . λ l . Λ s . λ v . a -s -t1 -t2 (t1 · P a l -s v) (t2 · P a l -s v) ,
  lam = λ i . λ f . Λ P . λ a . λ l . Λ s . λ v .
        l -s -i -f (Λ t . λ u . f · P a l
                                  -(finmapUpdate · (λ _ : Nat . trm) s i t)
                                   (finmapUpdateDep · (λ _ : Nat . trm) · (λ _ : Nat . λ t : trm . P t)
                                     -s v i -t u)),
  subst = λ s1 . λ t . Λ P . λ a . λ l . Λ s . λ v . t · P a l -(finmapMap · (λ _ : Nat . trm) · (λ _ : Nat . trm)
                                                                   (λ _ . subst s) (λ b . Λ x . subst s (b -x)) s1) (λ i . s1 i · P a l -s v) , 
  var = λ i . Λ P . λ a . λ l . Λ s . λ v . ρ (eqnat-refl i) - (v i)
 .

fv-trm ⇐ trm = lam (S Z) (app (var (S Z)) (var Z)) !

test = subst (λ i . θ i (λ p . λ _ . (var (S p))) (var (S Z))) fv-trm !

triv-subst ⇐ Nat → trm = λ i . (var i) .

