import extmap2. 

rec trm : | app : trm ➔ trm ➔ trm ,
            lam : Nat ➔ trm ➔ trm ,
            subst : substmap · trm ➔ trm ➔ trm,
            var : Nat ➔ trm =
 ∀ P : trm ➔ ★ .  
   (∀ s : substmap · trm . ∀ t1 : trm . ∀ t2 : trm . P (subst s t1) ➔ P (subst s t2) ➔ P (subst s (app t1 t2))) ➔ 
   (∀ s : substmap · trm . ∀ i : Nat . ∀ f : trm .
      (∀ t : trm . P t ➔ P (subst (substmapUpdate · trm s i t) f)) ➔ P (subst s (lam i f))) ➔ 
   ∀ s : substmap · trm.
   extmap · trm · P s ➔
   P (subst s self)
with 
  app = λ t1 . λ t2 . Λ P . λ a . λ l . Λ s . λ v . a -s -t1 -t2 (t1 · P a l -s v) (t2 · P a l -s v) ,
  lam = λ i . λ f . Λ P . λ a . λ l . Λ s . λ v .
        l -s -i -f (Λ t . λ u . f · P a l -(substmapUpdate · trm s i t) (extmapUpdate · trm · P -s v i -t u)),
  subst = λ s1 . λ t . Λ P . λ a . λ l . Λ s . λ v .
            ρ (χ (subst s (subst s1 t) ≃ 
                  λ a . λ l . λ v . (t a l ((λ a . λ l . λ v . substmapToExtmap (λ t' . (t' a l (substmapToExtmap (λ t' . (t' a l v)) s))) s1)
                                             a l v))) - β) -
            ρ (substmapComp · trm s1 -s) -
            (t · P a l -(substmapMap · trm (subst s) s1) (substmapToExtmap · trm · P -(subst s) (λ t . t · P a l -s v) s1)) , 
  var = λ i . Λ P . λ a . λ l . Λ s . λ v .
                 ρ (extmapSubstmapLookup · trm s i) -
                 (extmapLookup · trm · P -s v i) .

fv-trm = lam (S Z) (app (var (S Z)) (var Z)) !

var Z !!

id-trm = lam Z (var Z) !!

test-subst = substmapCons · trm Z (var (S Z)) (substmapStart · trm id-trm) .

test = subst test-subst fv-trm !

