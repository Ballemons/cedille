import Nat.
import List.
import Vec.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Cast ◂ Π A : ★ . Π B : A ➔ ★ . ★ =
  λ A : ★ . λ B : A ➔ ★ .
  Π a : A . ι b : B a . b ≃ a .

cast ◂ ∀ A : ★ . ∀ B : A ➔ ★ . Cast · A · B ➾ Π a : A . B a =
  Λ A . Λ B . Λ c . λ a .
  (χ (ι a : A . B a) - [ a , (c a).1 { ρ (c a).2 - β } ]).2 .

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Cast' ◂ ★ ➔ ★ ➔ ★
  = λ A : ★ . λ B : ★ . Cast · A · (λ a : A . B) .

cast' ◂ ∀ A : ★ . ∀ B : ★ . Cast' · A · B ➾ A ➔ B
  = Λ A . Λ B . cast · A · (λ a : A . B) .

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

VecL ◂ ★ ➔ Nat ➔ ★ = λ A : ★ . λ n : Nat .
  ι xs : List · A . n ≃ length xs .

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

v2uCast ◂ ∀ A : ★ . ∀ n : Nat . Cast' · (Vec · A n) · (VecL · A n)
  = Λ A . elimVec · A ·
  (λ n : Nat . λ xs : Vec · A n . ι ys : (VecL · A n) . ys ≃ xs)
  [ [ nilL · A , β{nilL · A} ] , β{[ nilL · A , β{nilL · A} ]} ]
  (Λ n . Λ xs . λ x . λ ih .
    [ [ consL · A x ih.1.1 , (ρ ih.1.2 - β{consL · A x ih.1.1}) ]
    , ρ ih.2 - β{[ consL · A x ih.1.1 , (ρ ih.1.2 - β{consL · A x ih.1.1}) ]} ] ).

l2vCast ◂ ∀ A : ★ . Cast · (List · A) · (λ xs : List · A . Vec · A (length · A xs))
  = Λ A . elimList · A ·
  (λ xs : List · A . ι ys : Vec · A (length · A xs) . ys ≃ xs)
  [ nilV · A , β{nilV · A} ]
  (Λ xs . λ x . λ ih .
    [ consV · A -(length · A xs) x ih.1 ,
      ρ ih.2 - β{consV · A -(length · A xs) x ih.1} ]) .

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

v2u ◂ ∀ A : ★ . ∀ n : Nat . Vec · A n ➔ VecL · A n
  = Λ A . Λ n . cast'
  · (Vec · A n)
  · (VecL · A n)
  -(v2uCast · A -n) .

v2l ◂ ∀ A : ★ . ∀ n : Nat . Vec · A n ➔ List · A
  = Λ A . Λ n . λ xs . (v2u · A -n xs).1 .

l2v ◂ ∀ A : ★ . Π xs : List · A . Vec · A (length · A xs)
  = Λ A . cast
  · (List · A)
  · (λ xs : List · A . Vec · A (length · A xs))
  -(l2vCast · A) .

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

cmapCastL ◂ ∀ A : ★ . ∀ B : ★ .
  Cast' · A · B ➾ Cast' · (List · A) · (List · B)
  = Λ A . Λ B . Λ c . elimList · A ·
  (λ xs : List · A . ι ys : List · B . ys ≃ xs)
  [ nilL · B , β{nilL · B} ]
  (Λ xs . λ x . λ ih .
    [ consL · B (cast' · A · B -c x) ih.1 ,
      ρ ih.2 - β{consL · B (cast' · A · B -c x) ih.1} ]) .

cmapL ◂ ∀ A : ★ . ∀ B : ★ . Cast' · A · B ➾ List · A ➔ List · B
  = Λ A . Λ B . Λ c .
    cast' · (List · A) · (List · B)
      -(cmapCastL · A · B -c) .

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

interCast ◂ ∀ A : ★ . ∀ B : A ➔ ★ . Cast' · (ι a : A . B a) · A
  = Λ A . Λ B . λ a . [ a.1 , β{a.1} ] .

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

vs2usL ◂ ∀ A : ★ . ∀ n : Nat .
  List · (Vec · A n) ➔ List · (VecL · A n)
  = Λ A . Λ n . cmapL · (Vec · A n) · (VecL · A n)
    -(v2uCast · A -n) .

vs2lsL ◂ ∀ A : ★ . ∀ n : Nat .
  List · (Vec · A n) ➔ List · (List · A)
  = Λ A . Λ n . λ xs . cmapL · (VecL · A n) · (List · A)
    -(interCast · (List · A) · (λ xs : List · A . n ≃ length xs))
    (vs2usL · A -n xs) .

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
