import Nat.
import List.
import Vec.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Cast ◂ Π A : ★ . Π B : A ➔ ★ . ★ =
  λ A : ★ . λ B : A ➔ ★ .
  Π a : A . ι b : B a . b ≃ a .

cast ◂ ∀ A : ★ . ∀ B : A ➔ ★ . Cast · A · B ➾ Π a : A . B a =
  Λ A . Λ B . Λ c . λ a .
  (χ (ι a : A . B a) - [ a , (c a).1 { ρ (c a).2 - β } ]).2 .

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

VecL ◂ ★ ➔ Nat ➔ ★ = λ A : ★ . λ n : Nat .
  ι xs : List · A . n ≃ length xs .

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

castV2L ◂ ∀ A : ★ . ∀ n : Nat . Cast · (Vec · A n) · (λ xs : Vec · A n . VecL · A n)
  = Λ A . elimVec · A ·
  (λ n : Nat . λ xs : Vec · A n . ι ys : (VecL · A n) . ys ≃ xs)
  [ [ nilL · A , β{nilL · A} ] , β{[ nilL · A , β{nilL · A} ]} ]
  (Λ n . Λ xs . λ x . λ ih .
    [ [ consL · A x ih.1.1 , (ρ ih.1.2 - β{consL · A x ih.1.1}) ]
    , ρ ih.2 - β{[ consL · A x ih.1.1 , (ρ ih.1.2 - β{consL · A x ih.1.1}) ]} ] ).

castL2V ◂ ∀ A : ★ . Cast · (List · A) · (λ xs : List · A . Vec · A (length · A xs))
  = Λ A . elimList · A ·
  (λ xs : List · A . ι ys : Vec · A (length · A xs) . ys ≃ xs)
  [ nilV · A , β{nilV · A} ]
  (Λ xs . λ x . λ ih .
    [ consV · A -(length · A xs) x ih.1 ,
      ρ ih.2 - β{consV · A -(length · A xs) x ih.1} ]) .

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

v2l ◂ ∀ A : ★ . ∀ n : Nat . Vec · A n ➔ VecL · A n
  = Λ A . Λ n . cast
  · (Vec · A n)
  · (λ xs : Vec · A n . VecL · A n)
  -(castV2L · A -n) .

l2v ◂ ∀ A : ★ . Π xs : List · A . Vec · A (length · A xs)
  = Λ A . cast
  · (List · A)
  · (λ xs : List · A . Vec · A (length · A xs))
  -(castL2V · A) .

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
