import Functor.
import Product.
import SigmaImplicit.
import Sigma.
import Top.
import Unary.

import FixC.
import PredicateLifting.

wsMap ◂ ∀ F : ★ ➔ ★. Fmap · F ➔ ∀ X : ★. ∀ Q : X ➔ ★.  F · (SigmaEr · X · (wsPred · X · Q)) ➔ F · (Unary · X) 
 = Λ F . λ fmap. Λ X. Λ Q. λ gr. (fmap · (SigmaEr · X · (wsPred · X · Q)) · (Unary · X) 
        (λ x . unary · X (wsPrj1 · X · Q x)) gr).
   
PrfAlgC ◂ Π F : ★ ➔ ★.  Fmap · F ➔ Π X : ★. 
 (X ➔ ★) ➔ AlgC · F · X ➔ ★
 = λ F : ★ ➔ ★. λ fmap : Fmap · F. λ X : ★. 
  λ Q : X ➔ ★. λ alg : AlgC · F · X. 
  Π gr : F · (SigmaEr · X · (wsPred · X · Q)).  
    (wsPred · X · Q) 
      (alg (wsMap · F fmap · X · Q gr)).



isIndFixC ◂ Π F : ★ ➔ ★ . Functor · F ➔ FixC · F ➔ ★ 
  = λ F : ★ ➔ ★ . λ fmap : Functor · F . λ e : FixC · F . 
    ∀ Q : (FixC · F) ➔ ★ . 
     PrfAlgC · F fmap · (FixC · F) · Q (inC · F fmap) ➔ (wsPred · (FixC · F) · Q) e .


FixIndC ◂ Π F : ★ ➔ ★ . Functor · F ➔ ★ =   λ F : ★ ➔ ★ . λ fmap : Fmap · F .
    ι x : FixC · F. 
         isIndFixC · F fmap x .  


% it is possible that the above could be redone nicer in terms of:

tm1'' ◂ ∀ F : ★ ➔ ★ . Π fmap : Functor · F . F · (Unary · (FixIndC · F fmap)) ➔ FixC · F = 
  Λ F . λ fmap . λ v . inC · F fmap  (ufmap · F fmap · (FixIndC · F fmap) · (FixC · F) (λ x. x.1) v) .  



zzzz'' ◂ ∀ F : ★ ➔ ★ . Π fmap : Functor · F . FunctorLaw2 · F fmap ➔ FLaw1' · F fmap ➔ ∀ Q : (FixC · F) ➔ ★.  
  Π a : FixIndC · F fmap .
  Π pr : (wsPred · (FixC · F) · Q) a.1.
   (wsPrj1 (mksigmaer pr)) ≃ a = Λ F . λ fmap. λ law2. λ law1 . Λ Q . λ a . λ s . θ<s> (ind-sigma · (FixC · F) ·  (λ x : FixC · F. Product · (x ≃ a) · (Q x)) s) 
   (λ a . λ b . ε β)    .


zzz ◂ ∀ F : ★ ➔ ★ . Π fmap : Functor · F . FunctorLaw2 · F fmap ➔ FLaw1' · F fmap ➔ ∀ Q : (FixC · F) ➔ ★. Π prfalg : PrfAlgC · F fmap · (FixC · F) · Q (inC · F fmap). 
   Π v : F · (Unary · (FixIndC · F fmap)) . 
   (wsMap fmap (fmap  (λ fx . (mksigmaer   ((uproj fx) prfalg))) v)) ≃ (ufmap fmap (λ x . x) v) = 
  Λ F. λ fmap. λ law2 . λ law1. Λ Q. λ prfalg. λ v. ρ (qqq' · (FixIndC · F fmap) · F fmap law1 v) - ρ (law2 · (Unary · (FixIndC · F fmap)) · (SigmaEr · (FixC · F) · (wsPred · (FixC · F) · Q)) · (Unary · (FixC · F)) -(λ x . unary · (FixC · F) (wsPrj1 · (FixC · F) · Q x)) -(λ fx . (mksigmaer · (FixC · F) · (wsPred · (FixC · F) · Q) -((uproj · (FixIndC · F fmap) fx).1) ((uproj · (FixIndC · F fmap) fx).2 · Q prfalg)) ) v ) 
   - ρ (law1 · (Unary · (FixIndC · F fmap)) · (Unary · (FixIndC · F fmap)) -β{λ x' . ((λ x'' . (unary (wsPrj1 x''))) ((λ fx . (mksigmaer (uproj fx prfalg))) x'))} v -(λ z . θ<z> (ind-Unary · (FixIndC · F fmap)  z)  (λ a . ε (ρ+ (zzzz'' · F fmap law2 law1 · Q a (a.2 · Q prfalg)) - β)     )    )  ) -β .




tm2'' ◂ ∀ F : ★ ➔ ★ . Π fmap : Functor · F . FunctorLaw2 · F fmap ➔ FLaw1' · F fmap ➔ Π v : F · (Unary · (FixIndC · F fmap)) . 
  isIndFixC · F fmap (inC · F fmap  (ufmap · F fmap · (FixIndC · F fmap) · (FixC · F) (λ x. x.1) v))
 = Λ F . λ fmap. λ law2 . λ law1 . λ v . Λ Q . λ prfalg.  
   let zz = 
    (prfalg (fmap · (Unary · (FixIndC · F fmap)) · (SigmaEr · (FixC · F) · (wsPred · (FixC · F) · Q)) (λ fx . (mksigmaer · (FixC · F) · (wsPred · (FixC · F) · Q) -((uproj · (FixIndC · F fmap) fx).1) ((uproj · (FixIndC · F fmap) fx).2 · Q prfalg)) ) 
       v )) in 
  ρ ς (zzz · F fmap law2 law1 · Q prfalg v) -
   (prfalg (fmap · (Unary · (FixIndC · F fmap)) · (SigmaEr · (FixC · F) · (wsPred · (FixC · F) · Q)) (λ fx . (mksigmaer · (FixC · F) · (wsPred · (FixC · F) · Q) -((uproj · (FixIndC · F fmap) fx).1) ((uproj · (FixIndC · F fmap) fx).2 · Q prfalg)) ) 
       v ))  .

inFixIndC ◂ ∀ F : ★ ➔ ★ . Π fmap : Functor · F .  FunctorLaw2 · F fmap ➔ FLaw1' · F fmap ➔
  AlgC · F · (FixIndC · F fmap) = Λ F. λ fmap . λ law2 . λ law1.  λ v . [ tm1'' · F fmap v , tm2'' · F fmap law2 law1 v { ε ρ (qqq' · (FixIndC · F fmap) · F fmap law1 v) - β   } ] .


