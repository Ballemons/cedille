

import FixC.
import FixIndCC. 
import Sigma.
import SigmaImplicit.
import Product.
import Functor.
import PredicateLifting.

import Unary.
import Top.



enrLft ◂ Π F : ★ ➔ ★. Π fmap : Functor · F.  
 (FixIndC · F fmap ➔ ★) 
 ➔ FixC · F ➔ ★ 
 = λ F : ★ ➔ ★. λ fmap : Functor · F. 
   λ Q : FixIndC · F fmap ➔ ★. 
   λ e : FixC · F.
  Sigma · (FixIndC · F fmap) · 
    (λ x' : (FixIndC · F fmap) . Product · (e ≃ x') · (Q x')).

% rework with let
enrLftProp1 ◂ ∀ F : ★ ➔ ★. Π fmap : Functor · F.  Π Q : FixIndC · F fmap ➔ ★.
   ∀ e : FixIndC · F fmap. (enrLft · F fmap · Q e.1) ➔ Q e 
  = Λ F . λ fmap . λ Q . Λ e . λ pr . 
     ρ (pproj1 · (e ≃ (proj1 · (FixIndC · F fmap) · (λ x' : (FixIndC · F fmap) . Product · (e ≃ x') · (Q x')) pr)) · (Q (proj1 · (FixIndC · F fmap) · (λ x' : (FixIndC · F fmap) . Product · (e ≃ x') · (Q x')) pr)) (proj2 · (FixIndC · F fmap) · (λ x' : (FixIndC · F fmap) . Product · (e ≃ x') · (Q x')) pr)) -   
   (pproj2 · (e ≃ (proj1 · (FixIndC · F fmap) · (λ x' : (FixIndC · F fmap) . Product · (e ≃ x') · (Q x')) pr)) · (Q (proj1 · (FixIndC · F fmap) · (λ x' : (FixIndC · F fmap) . Product · (e ≃ x') · (Q x')) pr)) (proj2 · (FixIndC · F fmap) · (λ x' : (FixIndC · F fmap) . Product · (e ≃ x') · (Q x')) pr)).

enrLftProp2 ◂ ∀ F : ★ ➔ ★. Π fmap : Functor · F.  ∀ Q : FixIndC · F fmap ➔ ★.
   Π e : FixIndC · F fmap. Q e ➔ (enrLft · F fmap · Q e.1) = Λ F. λ fmap. Λ Q. λ e. λ pr. 
     mkdsigma · (FixIndC · F fmap) · 
      (λ x' : (FixIndC · F fmap) . 
       Product · (e ≃ x') · (Q x')) e (pair · (e ≃ e) · (Q e) β pr).

enrLftProp3 ◂ ∀ F : ★ ➔ ★. Π fmap : Functor · F.  ∀ Q : FixIndC · F fmap ➔ ★.
   ∀ e : FixC · F. enrLft · F fmap · Q e ➔ (FixIndC · F fmap) = Λ F. λ fmap. Λ Q. Λ e. λ pr. 
    proj1 · (FixIndC · F fmap) · (λ x' : (FixIndC · F fmap) . Product · (e ≃ x') · (Q x')) pr. 

enrLftProp4 ◂ ∀ F : ★ ➔ ★. Π fmap : Functor · F.  ∀ Q : FixIndC · F fmap ➔ ★.
  ∀ e : FixC · F. ∀ p : enrLft · F fmap · Q e. enrLftProp3 · F fmap · Q p ≃ e = Λ F . λ fmap . Λ Q . Λ e . Λ pr. 
   ρ (pproj1 · (e ≃ (proj1 · (FixIndC · F fmap) · (λ x' : (FixIndC · F fmap) . Product · (e ≃ x') · (Q x')) pr)) · (Q (proj1 · (FixIndC · F fmap) · (λ x' : (FixIndC · F fmap) . Product · (e ≃ x') · (Q x')) pr)) (proj2 · (FixIndC · F fmap) · (λ x' : (FixIndC · F fmap) . Product · (e ≃ x') · (Q x')) pr)) - β.
