

import FixC.
import FixIndCC. 
import Sigma.
import SigmaImplicit.
import Product.
import Functor.
import PredicateLifting.

import Unary.
import Top.
import InductEnr.


thm1 ◂ ∀ F : ★ ➔ ★ . Π fmap : Functor · F . Π law2 : FunctorLaw2 · F fmap . Π law1 : FLaw1' · F fmap .
  Π v : F · (Unary · (FixC · F)) .
   inC fmap v ≃ inFixIndC fmap law1 law2 v =  Λ F . λ fmap . λ law2 . λ law1 . λ v . ρ+ (qqq' · (FixC · F) · F  fmap law1 v) - β.



func1 ◂ ∀ F : ★ ➔ ★ . Π fmap : Functor · F . Π Flaw2 : FunctorLaw2 · F fmap . Π Flaw1 : FLaw1' · F fmap .
    ∀ Q : FixIndC · F fmap ➔ ★ . 

    ∀ Y : FixC · F ➔ ★ .     
    Π Yprop1 : ∀ e : FixIndC · F fmap. Y e.1 ➔ Q e.
    Π Yprop2 : Π e : FixIndC · F fmap. Q e ➔ Y e.1.
    Π Yprop3 : ∀ e : FixC · F. Y e ➔ FixIndC · F fmap.
    Π Yprop4 : ∀ e : FixC · F. ∀ p : Y e. Yprop3 p ≃ e.
  (SigmaEr · (FixC · F) · (wsPred · (FixC · F) · Y))  ➔ (SigmaEr · (FixIndC · F fmap) · (wsPred · (FixIndC · F fmap) · Q)) = 
 Λ F . λ fmap . λ law2 . λ law1 . Λ Q . Λ Y . λ yp1 . λ yp2 . λ yp3 . λ yp4 . λ s . mksigmaer · (FixIndC · F fmap)  · (wsPred · (FixIndC · F fmap) · Q) -(yp3 -(wsPrj1 · (FixC · F) · Y s) (wsPrj2 · (FixC · F) · Y s)) (zz · (FixIndC · F fmap) · Q (yp3 -(wsPrj1 · (FixC · F) · Y s) (wsPrj2 · (FixC · F) · Y s)) (yp1 -(yp3 -(wsPrj1 · (FixC · F) · Y s) (wsPrj2 · (FixC · F) · Y s)) 
   (ρ (yp4 -(wsPrj1 · (FixC · F) · Y s) -(wsPrj2 · (FixC · F) · Y s)) - (wsPrj2 · (FixC · F) · Y s) )    ) )  .




thm2 ◂ ∀ F : ★ ➔ ★ . Π fmap : Functor · F . Π law2 : FunctorLaw2 · F fmap . Π law1 : FLaw1' · F fmap .
    Π eq : FmapEq · F fmap .
    ∀ Q : FixIndC · F fmap ➔ ★ . 

    ∀ Y : FixC · F ➔ ★ .     
    Π yp1 : ∀ e : FixIndC · F fmap. Y e.1 ➔ Q e.
    Π yp2 : Π e : FixIndC · F fmap. Q e ➔ Y e.1.
    Π yp3 : ∀ e : FixC · F. Y e ➔ FixIndC · F fmap.
    Π yp4 : ∀ e : FixC · F. ∀ p : Y e. yp3 p ≃ e.
    Π gr :  F · (SigmaEr · (FixC · F) · (wsPred · (FixC · F) · Y)).
   wsMap fmap gr ≃ wsMap fmap (fmap (func1 fmap law2 law1 yp1 yp2 yp3 yp4)  gr)
   = Λ F . λ fmap . λ law2 . λ law1 . λ eq.  Λ Q . Λ Y . λ yp1 . λ yp2 . λ yp3 . λ yp4 . λ s . 
    ρ (law2 · (SigmaEr · (FixC · F) · (wsPred · (FixC · F) · Y)) · (SigmaEr · (FixIndC · F fmap) · (wsPred · (FixIndC · F fmap) · Q)) · ((Unary · (FixIndC · F fmap))) -(λ x . unary · (FixIndC · F fmap) (wsPrj1 · (FixIndC · F fmap) · Q x))   -(func1 · F fmap law2 law1 · Q · Y yp1 yp2 yp3 yp4) s   ) - (eq · (SigmaEr · (FixC · F) · (wsPred · (FixC · F) · Y))  -β{(λ x . (unary (wsPrj1 x)))} -β{(λ x' . ((λ x'' . (unary (wsPrj1 x''))) (func1 fmap law2 law1 yp1 yp2 yp3 yp4 x')))} (λ oh . θ<oh> (ind-sigmaer · (FixC · F) · (wsPred · (FixC · F) · Y) oh) (Λ a . λ b . θ<b> (ind-sigma · (FixC · F) · (λ x : (FixC · F). Product · (x ≃ a) · (Y x)) b) 
  (λ a' . λ b' . θ<b'> (ind-Product · (a' ≃ a) · (Y a') b') (λ a'' . λ b'' . ρ+ (yp4 -a' -b'') - β)  )    )   ) s  )     .




convIH ◂  ∀ F : ★ ➔ ★ . Π fmap : Functor · F . Π Flaw2 : FunctorLaw2 · F fmap . Π Flaw1 : FLaw1' · F fmap .    Π eq : FmapEq · F fmap .
    ∀ Q : FixIndC · F fmap ➔ ★ . 
    ∀ Y : FixC · F ➔ ★ .     
    Π Yprop1 : ∀ e : FixIndC · F fmap. Y e.1 ➔ Q e.
    Π Yprop2 : Π e : FixIndC · F fmap. Q e ➔ Y e.1.
    Π Yprop3 : ∀ e : FixC · F. Y e ➔ FixIndC · F fmap.
    Π Yprop4 : ∀ e : FixC · F. ∀ p : Y e. Yprop3 p ≃ e.

    PrfAlgC · F fmap · (FixIndC · F fmap) · Q (inFixIndC · F fmap Flaw2 Flaw1) ➔
    PrfAlgC · F fmap · (FixC · F) · Y (inC · F fmap)
     = Λ F. λ fmap . λ law2 . λ law1 . λ eq . Λ Q . Λ Y . λ yp1 . λ yp2 . λ yp3 . λ yp4 . λ alg . 
    λ gr . 
    let im ◂ F · ((SigmaEr · (FixIndC · F fmap) · (wsPred · (FixIndC · F fmap) · Q))) = (fmap · (SigmaEr · (FixC · F) · (wsPred · (FixC · F) · Y)) · (SigmaEr · (FixIndC · F fmap) · (wsPred · (FixIndC · F fmap) · Q)) 
        (func1 · F fmap law2 law1 · Q · Y yp1 yp2 yp3 yp4)  gr) in 

    let el ◂ FixIndC · F fmap = (inFixIndC · F fmap law2 law1 (wsMap · F fmap · (FixIndC · F fmap) · Q (fmap · (SigmaEr · (FixC · F) · (wsPred · (FixC · F) · Y)) · (SigmaEr · (FixIndC · F fmap) · (wsPred · (FixIndC · F fmap) · Q)) 
        (func1 · F fmap law2 law1 · Q · Y yp1 yp2 yp3 yp4)  gr))) in


 ρ (thm1 · F fmap law2 law1 (wsMap · F fmap · (FixC · F) · Y gr) ) - 
        ρ (thm2  · F fmap law2 law1 eq · Q · Y yp1 yp2 yp3 yp4 gr) - (zz · (FixC · F) · Y (inFixIndC · F fmap law2 law1 (wsMap · F fmap · (FixIndC · F fmap) · Q (fmap · (SigmaEr · (FixC · F) · (wsPred · (FixC · F) · Y)) · (SigmaEr · (FixIndC · F fmap) · (wsPred · (FixIndC · F fmap) · Q)) 
        (func1 · F fmap law2 law1 · Q · Y yp1 yp2 yp3 yp4)  gr))).1 (yp2 (inFixIndC · F fmap law2 law1 (wsMap · F fmap · (FixIndC · F fmap) · Q (fmap · (SigmaEr · (FixC · F) · (wsPred · (FixC · F) · Y)) · (SigmaEr · (FixIndC · F fmap) · (wsPred · (FixIndC · F fmap) · Q)) 
        (func1 · F fmap law2 law1 · Q · Y yp1 yp2 yp3 yp4)  gr))) (zzob · (FixIndC · F fmap) · Q (inFixIndC · F fmap law2 law1 (wsMap · F fmap · (FixIndC · F fmap) · Q (fmap · (SigmaEr · (FixC · F) · (wsPred · (FixC · F) · Y)) · (SigmaEr · (FixIndC · F fmap) · (wsPred · (FixIndC · F fmap) · Q)) 
        (func1 · F fmap law2 law1 · Q · Y yp1 yp2 yp3 yp4)  gr))) (alg (fmap · (SigmaEr · (FixC · F) · (wsPred · (FixC · F) · Y)) · (SigmaEr · (FixIndC · F fmap) · (wsPred · (FixIndC · F fmap) · Q)) 
        (func1 · F fmap law2 law1 · Q · Y yp1 yp2 yp3 yp4)  gr) ) )  ))    .




inductionC'' ◂  ∀ F : ★ ➔ ★. Π fmap : Fmap · F. 
 Π Flaw1 : FLaw1' · F fmap.
 Π Flaw2 : FunctorLaw2 · F fmap.
 Π eq : FmapEq · F fmap.
 ∀ Q : FixIndC · F fmap ➔ ★. 

 ∀ Y : FixC · F ➔ ★. 
 Π Yprop1 : ∀ e : FixIndC · F fmap. Y e.1 ➔ Q e.
 Π Yprop2 : ∀ e : FixIndC · F fmap. Q e ➔ Y e.1.
 Π Yprop3 : ∀ e : FixC · F. Y e ➔ FixIndC · F fmap.
 Π Yprop4 : ∀ e : FixC · F. ∀ p : Y e. Yprop3 p ≃ e.
 PrfAlgC · F fmap · (FixIndC · F fmap) · Q (inFixIndC · F fmap Flaw2 Flaw1) ➔ 
 Π e : FixIndC · F fmap. (wsPred · (FixIndC · F fmap) · Q) e = 
  Λ F. λ fmap. λ Flaw1. λ Flaw2 .  λ eq . Λ Q. Λ Y. λ yp1. λ yp2. λ yp3. λ yp4. λ q. λ e.  
     zz · (FixIndC · F fmap) · Q  e (yp1 -e
        (zzob · (FixC · F) · Y e.1 (e.2 · Y (convIH · F fmap Flaw2 Flaw1 eq · Q · Y yp1 yp2 yp3 yp4 q)))).



inductionC' ◂ ∀ F : ★ ➔ ★. Π fmap : Fmap · F. 
  Π Flaw1 : FLaw1' · F fmap.
  Π Flaw2 : FunctorLaw2 · F fmap.
  Π eq : FmapEq · F fmap.
  ∀ Q : FixIndC · F fmap ➔ ★. 
  PrfAlgC · F fmap · (FixIndC · F fmap) · Q (inFixIndC · F fmap Flaw2 Flaw1) ➔
  Π e : FixIndC · F fmap.  (wsPred · (FixIndC · F fmap) · Q) e
   = Λ F . λ fmap . λ Flaw1 .  λ Flaw2 . λ eq . Λ Q . λ q . λ e. 
       inductionC'' · F fmap Flaw1 Flaw2 eq · Q · 
        (enrLft · F fmap · Q) 
        (enrLftProp1 · F fmap · Q) 
        (enrLftProp2 · F fmap · Q) 
        (enrLftProp3 · F fmap · Q) 
        (enrLftProp4 · F fmap · Q) 
        q e.
