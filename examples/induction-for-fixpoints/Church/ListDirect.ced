
import ../Unit.
import ../Sum.
import ../Functor.
import ../Product.

import InductionInstance.

ListF ◂ ★ ➔ ★ ➔ ★ = λ A : ★ . λ X : ★ . Sum · Unit · (Product · A · X) .

eF ◂ ∀ A : ★ . ∀ X : ★ . Unit ➔ ListF · A · X = Λ A . Λ X . λ u . in1 · Unit · (Product · A · X) u .
cF ◂ ∀ A : ★ . ∀ X : ★ . A ➔ X ➔ ListF · A · X = Λ A . Λ X . λ a . λ x . in2 · Unit · (Product · A · X) (pair · A · X a x) .

ListFF ◂ ∀ A : ★ . Functor · (ListF · A) =
  Λ A . Λ X . Λ Y . λ f . λ u . u.1 · (ListF · A · Y) (eF · A · Y) (λ p . p.1 · (ListF · A · Y) (λ a . λ x . cF · A · Y a (f x) )) .


List-Hom1F ◂ ∀ A : ★ . FunctorLaw2 · (ListF · A) (ListFF · A) = ● .
List-Hom2F ◂ ∀ A : ★ . FunctorLaw1 · (ListF · A) (ListFF · A) = ● .
ListF-eq ◂ ∀ A : ★ . FmapEq · (ListF · A) (ListFF · A) = ● .

List ◂ ★ ➔ ★ = λ A : ★ .
  D · (IF · (ListF · A)) (IFF · (ListF · A) (ListFF · A)) · (IIHType · (IF · (ListF · A)) (IFF · (ListF · A) (ListFF · A)) · (IF' · (ListF · A))  (ifmap-pid-back · (ListF · A) (ListFF · A))) .


List-in ◂ ∀ A : ★ . (IF · (ListF · A)) · (List · A) ➔ List · A = Λ A : ★ . 
    in · (IF · (ListF · A)) (IFF · (ListF · A) (ListFF · A)) · (IIHType · (IF · (ListF · A)) (IFF · (ListF · A) (ListFF · A)) · (IF' · (ListF · A))  (ifmap-pid-back · (ListF · A) (ListFF · A)))
    · (IF' · (ListF · A)) -(IHom1F · (ListF · A) (ListFF · A) (ListF-eq · A) (List-Hom1F · A)) -(IHom2F · (ListF · A) (ListFF · A) (List-Hom2F · A))
      -(ifmap-pid · (ListF · A) (ListFF · A)) -(iFtoSigFamProp · (ListF · A) (ListFF · A))  -(myhomd · (ListF · A) (ListFF · A) -(ListF-eq · A) -(List-Hom1F · A) -(List-Hom2F · A))
      -(iSigFamToIHProp · (ListF · A) (ListFF · A) -(ListF-eq · A) -(List-Hom1F · A) -(List-Hom2F · A)) .


Empty ◂ ∀ A : ★ .  List · A = Λ A . List-in · A (eF · A · (SigmaEr · (List · A) · (Id · (List · A))) unit).
Cons ◂ ∀ A : ★ . A ➔ List · A ➔ List · A = Λ A . λ a . λ l . List-in · A ((cF · A · (SigmaEr · (List · A) · (Id · (List · A))) a (toid' · (List · A) l) )).

List-ind ◂ ∀ A : ★ . Π x : List · A . ∀ P : (List · A) ➔ ★ .
  P (Empty · A) ➔ (Π x : List · A . Π e : A . P x ➔ P (Cons · A e x)) ➔
  P x =
     Λ A . λ x . Λ P . λ pz . λ ps . Iind · (ListF · A) (ListFF · A) -(ListF-eq · A) -(List-Hom1F · A) -(List-Hom2F · A) · P  

  (Λ x' . λ q . ρ q.2
   
      - (ind-Sum · Unit  · (Product · A · (SigmaEr · (List · A) · (Enr · (List · A) · P)))  q.1 ·

    (λ n : (Sum · Unit · (Product · A · (SigmaEr · (List · A) · (Enr · (List · A) · P))))  . P (List-in · A  (ifmap-pid-back · (ListF · A) (ListFF · A) · (List · A) · (Enr · (List · A) · P)
		 (EnrElem · (List · A) · P) 
		 (EnrEq · (List · A) · P)  n)   )   )


    		 (λ u . ρ (eta-Unit u) - pz)
		 (λ b . θ<b> (ind-Product · A · (SigmaEr · (List · A) · (Enr · (List · A) · P)) b) (λ p1 . λ b .
		   ps (es · (List · A) · (Enr · (List · A) · P) (EnrElem · (List · A) · P) (EnrEq · (List · A) · P) b) p1
		 (EnrPred · (List · A) · P -(es · (List · A) · (Enr · (List · A) · P) (EnrElem · (List · A) · P) (EnrEq · (List · A) · P) b) (sp · (List · A) · (Enr · (List · A) · P) (EnrElem · (List · A) · P) (EnrEq · (List · A) · P) b))
		     )  )

		 ) 
     )
   x  .
