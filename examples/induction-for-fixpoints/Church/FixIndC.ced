import Functor.
import Product.
import SigmaImplicit.
import Sigma.
import Top.
import Unary.

import FixC.
import PredicateLifting.

wsMap ◂ ∀ F : ★ ➔ ★. Fmap · F ➔ ∀ X : ★. ∀ Q : X ➔ ★.  F · (SigmaEr · X · (wsPred · X · Q)) ➔ F · (Unary · X) 
 = Λ F . λ fmap. Λ X. Λ Q. λ gr. (fmap · (SigmaEr · X · (wsPred · X · Q)) · (Unary · X) 
        (λ x . unary · X (wsPrj1 · X · Q x)) gr).
   
PrfAlgC ◂ Π F : ★ ➔ ★.  Fmap · F ➔ Π X : ★. 
 (X ➔ ★) ➔ AlgC · F · X ➔ ★
 = λ F : ★ ➔ ★. λ fmap : Fmap · F. λ X : ★. 
  λ Q : X ➔ ★. λ alg : AlgC · F · X. 
  Π gr : F · (SigmaEr · X · (wsPred · X · Q)).  
    (wsPred · X · Q) 
      (alg (wsMap · F fmap · X · Q gr)).



isIndFixC ◂ Π F : ★ ➔ ★ . Functor · F ➔ FixC · F ➔ ★ 
  = λ F : ★ ➔ ★ . λ fmap : Functor · F . λ e : FixC · F . 
    ∀ Q : (FixC · F) ➔ ★ . 
     PrfAlgC · F fmap · (FixC · F) · Q (inC · F fmap) ➔ (wsPred · (FixC · F) · Q) e .


FixIndC ◂ Π F : ★ ➔ ★ . Functor · F ➔ ★ =   λ F : ★ ➔ ★ . λ fmap : Fmap · F .
    ι x : FixC · F. 
         isIndFixC · F fmap x .  

tm1' ◂ ∀ F : ★ ➔ ★ . Π fmap : Functor · F . F · (FixIndC · F fmap) ➔ FixC · F = 
  Λ F . λ fmap . λ v . inC · F fmap  (fmap · (FixIndC · F fmap) · (Unary · (FixC · F)) (λ x. unary · (FixC · F) x.1) v) .  



tm2lem'' ◂ ∀ X : ★ . ∀ Y : X ➔ ★ . Π x : X. Π ws : (wsPred · X · Y x).   (wsPrj1 (mksigmaer ws))  ≃ x = Λ X. Λ Y. λ x . λ ws . 
 θ<ws> (ind-sigma · X · (λ x' : X . (Product · (x' ≃ ((λ x'' . x'') x)) · (Y x'))) ws) (λ a . λ b . θ<b> (ind-Product · (a ≃ ((λ x'' . x'') x)) · (Y a) b)  (λ a' . λ b' . ρ ς a' - ε β  )   )  .
tm2lem' ◂ ∀ X : ★ . ∀ Y : X ➔ ★ . Π x : X. Π ws : (wsPred · X · Y x).  (unary (wsPrj1 (mksigmaer ws)))  ≃ (unary x) = Λ X. Λ Y. λ x . λ ws . 
  ρ (tm2lem'' · X · Y x ws) - β.

tm2lemm ◂ ∀ F : ★ ➔ ★. ∀ fmap : Fmap · F. FunctorLaw2 · F fmap ➔ FmapEq · F fmap ➔ ∀ Q : (FixC · F ➔ ★). ∀ v : F · (FixIndC · F fmap) . ∀ prfalg : PrfAlgC · F fmap · (FixC · F) · Q (inC · F fmap).
  (fmap (λ x . (unary (wsPrj1 x))) (fmap (λ fx . (mksigmaer (fx prfalg))) v)) ≃ (fmap (λ x . (unary x)) v) = 
 Λ F . Λ fmap. λ law2 . λ fmeq . Λ Q. Λ v . Λ prfalg . ρ (law2 · (FixIndC · F fmap) · (SigmaEr · (FixC · F) · (wsPred · (FixC · F) · Q)) · (Unary · (FixC · F)) -(λ z . unary · (FixC · F) (wsPrj1 · (FixC · F) · Q  z) ) -(λ fx . (mksigmaer · (FixC · F) · (wsPred · (FixC · F) · Q) -(fx.1) (fx.2 · Q prfalg)) ) v) - ρ (fmeq · (FixIndC · F fmap) -β{(λ x' . ((λ z . (unary (wsPrj1 z))) ((λ fx . (mksigmaer (fx prfalg))) x')))} -β{(λ x . (unary x))} (λ fx . tm2lem' · (FixC · F) · Q fx.1 ((fx.2 · Q prfalg))  )  v ) - β.




tm33' ◂ ∀ F : ★ ➔ ★. ∀ fmap : Fmap · F. FunctorLaw2 · F fmap ➔ FmapEq · F fmap ➔ ∀ Q : (FixC · F ➔ ★). ∀ v : F · (FixIndC · F fmap) . ∀ prfalg : PrfAlgC · F fmap · (FixC · F) · Q (inC · F fmap).
   (fmap (λ fx . (mksigmaer (fx          prfalg))) v) ≃ (fmap (λ fx . (mksigmaer ((uproj fx)  prfalg))) (fmap unary v)) =  Λ F . Λ fmap. λ law2 . λ fmeq . Λ Q. Λ v . Λ prfalg . ρ  (law2 · (FixIndC · F fmap) · (Unary · (FixIndC · F fmap)) · (SigmaEr · (FixC · F) · (wsPred · (FixC · F) · Q))  -(λ fx . (mksigmaer · (FixC · F) · (wsPred · (FixC · F) · Q) -((uproj · (FixIndC · F fmap) fx).1) ((uproj · (FixIndC · F fmap) fx).2 · Q prfalg)) ) -(unary · (FixIndC · F fmap)) v) - ρ (fmeq · (FixIndC · F fmap) -β{(λ fx . (mksigmaer (fx prfalg)))} -β{(λ x' . ((λ fx . (mksigmaer (uproj fx prfalg))) (unary x')))} (λ x . ε β )  v ) - β   .

tm2' ◂ ∀ F : ★ ➔ ★ . Π fmap : Functor · F . FunctorLaw2 · F fmap ➔ FmapEq · F fmap ➔ Π v : F · (FixIndC · F fmap) . 
  isIndFixC · F fmap (inC · F fmap  (fmap · (FixIndC · F fmap) · (Unary · (FixC · F)) (λ x. unary · (FixC · F) x.1) v))
 = Λ F . λ fmap. λ law2 . λ eq . λ v . Λ Q . λ prfalg.  
  ρ ς (tm2lemm · F -fmap law2 eq · Q -v -prfalg)  -
  ρ (tm33' · F -fmap law2 eq · Q -v -prfalg) -
    (prfalg (fmap · (Unary · (FixIndC · F fmap)) · (SigmaEr · (FixC · F) · (wsPred · (FixC · F) · Q)) (λ fx . (mksigmaer · (FixC · F) · (wsPred · (FixC · F) · Q) -((uproj · (FixIndC · F fmap) fx).1) ((uproj · (FixIndC · F fmap) fx).2 · Q prfalg)) ) 
       (fmap · (FixIndC · F fmap) · (Unary · (FixIndC · F fmap)) (unary · (FixIndC · F fmap)) v )))  .



inFixIndC ◂ ∀ F : ★ ➔ ★ . Π fmap : Functor · F .  FunctorLaw2 · F fmap ➔ FmapEq · F fmap ➔ F · (FixIndC · F fmap) ➔ (FixIndC · F fmap) =
 Λ F. λ fmap . λ law2 . λ eq . λ v . [ tm1' · F fmap  v , tm2' · F fmap law2 eq v  ]  .

inFixIndC' ◂ ∀ F : ★ ➔ ★ . Π fmap : Functor · F .  FunctorLaw2 · F fmap ➔ FmapEq · F fmap ➔ AlgC · F · (FixIndC · F fmap) =
 Λ F. λ fmap . λ law2 . λ eq . λ v . inFixIndC · F fmap law2 eq (fmap · (Unary · (FixIndC · F fmap)) · (FixIndC · F fmap) (uproj · (FixIndC · F fmap)) v)  .


% it is possible that the above could be redone nicer in terms of:

tm1'' ◂ ∀ F : ★ ➔ ★ . Π fmap : Functor · F . F · (Unary · (FixIndC · F fmap)) ➔ FixC · F = 
  Λ F . λ fmap . λ v . inC · F fmap  (ufmap · F fmap · (FixIndC · F fmap) · (FixC · F) (λ x. x.1) v) .  


