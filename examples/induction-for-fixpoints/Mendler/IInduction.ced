
import IFunctor.
import IFixpoint.
import Functor. 
import Sigma.
import Product.
import Helper.
					
trans2trans' ◂ Π I : ★ . ∀ G : 𝒌IFKind · I . Π ifmap : IFunctor · I · G .
	       ∀ Q : (Π i : I . IFixIndM · I · G ifmap i ➔ ★) .
	       ∀ R : I ➔ ★ .
	       Π i : I .
	       Π cast : Π i' : I . (R i') ➔ (IFixM · I · G i') .
	       Π castId : Π i' : I . Π r : (R i') . ((cast i' r) ≃ r) .
	       Π ih : Π i' : I . Π r : (R i') .
	         (Sigma · (IFixIndM · I · G ifmap i) · (λ x' : (IFixIndM · I · G ifmap i) . (Product · ((cast i' r) ≃ x') · (Q i x')))) .
	       Π r : R i .
	       trans2 (trans (ih i)) r ≃ (cast i r) =
	       λ I . Λ G . λ ifmap . Λ Q . Λ R .
	       λ i . λ cast . λ castId . λ ih . λ r .
	       	     	       ς (thm · (R i) · (IFixIndM · I · G ifmap i) · (IFixM · I · G i) (cast i)
			                      (trans · (R i)
					        · (IFixIndM · I · G ifmap i)
						· (λ x' : IFixIndM · I · G ifmap i . λ r : R i . ((cast i r) ≃ x'))
						· (λ x' : IFixIndM · I · G ifmap i . Q i x') (ih i)) r).


%InductionFixIndM ◂ Π I : ★ . ∀ Q : (Π i : I . IFixIndM i ➔ ★) .
%                   Π _ : (∀ j : I . PAlgIFixIndM j · (Q j)) .
%                   Π i : I . Π e : IFixIndM i . Q e =
%Figure out what form makes the most sense for the proof algebra PAlgIFixIndM.
%Should be indexed itself?. PAlgIFixIndM must be aligned with AlgM.


InductionFixIndM' ◂ Π I : ★ . ∀ G : 𝒌IFKind · I .  Π ifmap : IFunctor · I · G .
    Π Flaw1 : IFunctorLaw1 · I · G ifmap .
    ∀ Q : (Π i : I . IFixIndM · I · G ifmap i ➔ ★) . 
    PAlgIFixIndM' · I · G ifmap Flaw1 · Q 
     ➔ (Π i : I . Π e : IFixIndM · I · G ifmap i . Sigma · (IFixIndM · I · G ifmap i) · (λ x' : (IFixIndM · I · G ifmap i) . Product · (e ≃ x') · (Q i x'))) =
     λ I . Λ G . λ ifmap .
     λ flaw1 . Λ Q . λ q . λ i . λ e .
     e.2 · (λ z : IFixM · I · G i . Sigma · (IFixIndM · I · G ifmap i) · (λ x' : (IFixIndM · I · G ifmap i) . Product · (z ≃ x') · (Q i x')))
       (Λ R . Λ cast . Λ castId . λ ih . λ i . λ gr .
	   let zz ◂ Π i : I . R i ➔ (IFixIndM · I · G ifmap i) = (λ i . (trans2 · (R i) · (IFixIndM · I · G ifmap i) · (λ x' : IFixIndM · I · G ifmap i. λ r : R i . ((cast i r) ≃ x')))
                 (trans · (R i) · (IFixIndM · I · G ifmap i) · (λ x' : IFixIndM · I · G ifmap i. λ r : R i . ((cast i r) ≃ x')) · (λ x' : IFixIndM · I · G ifmap i. Q i x') (ih i))) in
		 mkdsigma · (IFixIndM · I · G ifmap i) · (λ x' : IFixIndM · I · G ifmap i . Product · ((inIM i (ifmap i cast gr)  ≃ x')) · (Q i x'))
		   (inIFixIndM · I · G ifmap -flaw1 i (ifmap · R · (IFixIndM · I · G ifmap) i zz gr))
		   (pair ·
		     ((inIM i (ifmap i cast gr)) ≃ (inIFixIndM ifmap i (ifmap i zz gr))) ·
		     (Q i (inIFixIndM · I · G ifmap -flaw1 i (ifmap · R · (IFixIndM · I · G ifmap) i zz gr)))
		     (ρ (flaw1 · R · (IFixIndM · I · G ifmap) -zz i gr
		           -(λ i . λ r . ρ (trans2trans' · I · G ifmap · Q · R i cast castId ih r) - (castId i r)))
			- (ε ( ρ (flaw1 · R · R -(λ i . λ x . x) i gr -(λ _ . λ _ . β)  ) - ρ (flaw1 · R · (IFixM · I · G) -cast i gr -castId  ) - β)))
		     (q
		       · R
		       -zz
		       -(λ i . λ r . ρ (trans2trans' · I · G ifmap · Q · R i cast castId ih r) - (castId i r))
		       (λ i . λ r .
		         (ih i r).1 · (Q i (zz i r))
			 
			 (λ a . λ pr .
			   pr.1 · (Q i (zz i r))
			   (λ eq . λ qa . (ρ (trans2trans' · I · G ifmap · Q · R i cast castId ih r) - ρ eq - qa ))
			   ))
		       i
		       gr
		       ))).

InductionFixIndM ◂ Π I : ★ . ∀ G : 𝒌IFKind · I . Π ifmap : IFunctor · I · G .
  Π Flaw1 : IFunctorLaw1 · I · G ifmap .
  ∀ Q : (Π i : I . IFixIndM · I · G ifmap i ➔ ★) .
  PAlgIFixIndM' · I · G ifmap Flaw1 · Q  ➔
  Π i : I . Π e : IFixIndM · I · G ifmap i . Q i e
  = λ I . Λ G . λ ifmap . λ Flaw1 . Λ Q . λ q .
    λ i . λ e . (InductionFixIndM' · I · G ifmap Flaw1 · Q q i e).1 · (Q i e) (λ a . λ pr . pr.1 · (Q i e) (λ eq . λ qia . ρ eq - qia)).
