


import Fixpoint.
import Functor. 
import Sigma.
import Product.
import Helper.
import Top.


thm1 ◂ ∀ fmap : Top . ∀ flaw1 : Top . ∀ cast : Top . ∀ gr : Top . inFixIndM fmap flaw1 gr ≃ inM fmap cast gr = Λ f . Λ fl . Λ cast . Λ gr .  ε ●   .

rew ◂ ∀ x : Top . ∀ y : Top . ∀ z : Top . (x ≃ y) ➔ (y ≃ z) ➔ (x ≃ z) = ● .

convIH ◂  ∀ F : ★ ➔ ★ . Π fmap : Functor · F . Π Flaw1 : FunctorLaw1 · F fmap .
    ∀ Q : FixIndM · F fmap ➔ ★ . 

    ∀ Y : FixM · F ➔ ★ .     
    Π Yprop1 : ∀ e : FixIndM · F fmap. Y e.1 ➔ Q e.
    Π Yprop2 : Π e : FixIndM · F fmap. Q e ➔ Y e.1.
    Π Yprop3 : ∀ e : FixM · F. Y e ➔ FixIndM · F fmap.
    Π Yprop4 : ∀ e : FixM · F. ∀ p : Y e. Yprop3 p ≃ e.

    PAlgFixIndM · F fmap Flaw1 · Q ➔ 
    PAlgFixM · F fmap · Y = Λ F . λ fmap . λ Flaw1 . Λ Q . Λ Y . λ qp3 . λ qp4 . λ qp1 . λ qp2 . λ q . 
     Λ R . Λ cst . Λ ce . λ ih . λ gr .  
         ρ ς (thm1 -β{fmap} -β{Flaw1} -β{cst} -β{gr}) - 

         ρ ς (Flaw1 · R · (FixIndM · F fmap) -(λ r . qp1 -(cst r) (ih r) ) gr 
                    -(λ z . (rew -β{qp1 (ih z)} -β{cst z} -β{z} (qp2 -(cst z) -(ih z)) (ce -z)))) - 
         (qp4 (inFixIndM · F fmap Flaw1 (fmap · R · (FixIndM · F fmap) (λ r . (qp1 -(cst r) (ih r))) gr))  
               (q · R -(λ r . qp1 -(cst r) (ih r))  
                      -(Λ z . (rew -β{qp1 (ih z)} -β{cst z} -β{z} (qp2 -(cst z) -(ih z)) (ce -z)))  
                       (λ r .  ((qp3 -(qp1 -(cst r) (ih r)) 
                                           (ρ (qp2 -(cst r) -(ih r)) - (ih r))))) 
                       gr)).


inductionM' ◂  ∀ F : ★ ➔ ★. Π fmap : Fmap · F. 
 Π Flaw1 : FLaw1 · F fmap.
 Π e : FixIndM · F fmap. 
 ∀ Q : FixIndM · F fmap ➔ ★. 

 ∀ Y : FixM · F ➔ ★. 
 Π Yprop1 : ∀ e : FixIndM · F fmap. Y e.1 ➔ Q e.
 Π Yprop2 : ∀ e : FixIndM · F fmap. Q e ➔ Y e.1.
 Π Yprop3 : ∀ e : FixM · F. Y e ➔ FixIndM · F fmap.
 Π Yprop4 : ∀ e : FixM · F. ∀ p : Y e. Yprop3 p ≃ e.

 PAlgFixIndM · F fmap Flaw1 · Q  
 ➔ Q e = Λ F. λ fmap. λ Flaw1. λ e. Λ Q. Λ Y. λ yp1. λ yp2. λ yp3. λ yp4. λ q. 
     yp1 -e
        (e.2 · Y (convIH · F fmap Flaw1 · Q · Y yp1 yp2 yp3 yp4 q)).




enr ◂ Π F : ★ ➔ ★. Π fmap : Functor · F.  
 (FixIndM · F fmap ➔ ★) 
 ➔ FixM · F ➔ ★ 
 = λ F : ★ ➔ ★. λ fmap : Functor · F. 
   λ Q : FixIndM · F fmap ➔ ★. 
   λ e : FixM · F.
  Sigma · (FixIndM · F fmap) · 
    (λ x' : (FixIndM · F fmap) . Product · (e ≃ x') · (Q x')).

% rework with let
enrProp1 ◂ ∀ F : ★ ➔ ★. Π fmap : Functor · F.  Π Q : FixIndM · F fmap ➔ ★.
   ∀ e : FixIndM · F fmap. (enr · F fmap · Q e.1) ➔ Q e 
  = Λ F . λ fmap . λ Q . Λ e . λ pr . 
     ρ (pproj1 · (e ≃ (proj1 · (FixIndM · F fmap) · (λ x' : (FixIndM · F fmap) . Product · (e ≃ x') · (Q x')) pr)) · (Q (proj1 · (FixIndM · F fmap) · (λ x' : (FixIndM · F fmap) . Product · (e ≃ x') · (Q x')) pr)) (proj2 · (FixIndM · F fmap) · (λ x' : (FixIndM · F fmap) . Product · (e ≃ x') · (Q x')) pr)) -   
   (pproj2 · (e ≃ (proj1 · (FixIndM · F fmap) · (λ x' : (FixIndM · F fmap) . Product · (e ≃ x') · (Q x')) pr)) · (Q (proj1 · (FixIndM · F fmap) · (λ x' : (FixIndM · F fmap) . Product · (e ≃ x') · (Q x')) pr)) (proj2 · (FixIndM · F fmap) · (λ x' : (FixIndM · F fmap) . Product · (e ≃ x') · (Q x')) pr)).

enrProp2 ◂ ∀ F : ★ ➔ ★. Π fmap : Functor · F.  ∀ Q : FixIndM · F fmap ➔ ★.
   Π e : FixIndM · F fmap. Q e ➔ (enr · F fmap · Q e.1) = Λ F. λ fmap. Λ Q. λ e. λ pr. 
     mkdsigma · (FixIndM · F fmap) · 
      (λ x' : (FixIndM · F fmap) . 
       Product · (e ≃ x') · (Q x')) e (pair · (e ≃ e) · (Q e) β pr).

enrProp3 ◂ ∀ F : ★ ➔ ★. Π fmap : Functor · F.  ∀ Q : FixIndM · F fmap ➔ ★.
   ∀ e : FixM · F. enr · F fmap · Q e ➔ (FixIndM · F fmap) = Λ F. λ fmap. Λ Q. Λ e. λ pr. 
    proj1 · (FixIndM · F fmap) · (λ x' : (FixIndM · F fmap) . Product · (e ≃ x') · (Q x')) pr. 

enrProp4 ◂ ∀ F : ★ ➔ ★. Π fmap : Functor · F.  ∀ Q : FixIndM · F fmap ➔ ★.
  ∀ e : FixM · F. ∀ p : enr · F fmap · Q e. enrProp3 · F fmap · Q p ≃ e = Λ F . λ fmap . Λ Q . Λ e . Λ pr. 
   ρ (pproj1 · (e ≃ (proj1 · (FixIndM · F fmap) · (λ x' : (FixIndM · F fmap) . Product · (e ≃ x') · (Q x')) pr)) · (Q (proj1 · (FixIndM · F fmap) · (λ x' : (FixIndM · F fmap) . Product · (e ≃ x') · (Q x')) pr)) (proj2 · (FixIndM · F fmap) · (λ x' : (FixIndM · F fmap) . Product · (e ≃ x') · (Q x')) pr)) - β.


inductionM ◂ ∀ F : ★ ➔ ★. Π fmap : Fmap · F. 
  Π Flaw1 : FunctorLaw1 · F fmap.
  Π e : FixIndM · F fmap. 
  ∀ Q : FixIndM · F fmap ➔ ★. 
  PAlgFixIndM · F fmap Flaw1 · Q ➔ Q e 
   = Λ F . λ fmap . λ Flaw1 . λ e . Λ Q . λ q . 
       inductionM' · F fmap Flaw1 e · Q · 
        (enr · F fmap · Q) 
        (enrProp1 · F fmap · Q) 
        (enrProp2 · F fmap · Q) 
        (enrProp3 · F fmap · Q) 
        (enrProp4 · F fmap · Q) 
        q.
