import Functor.
import Sum.
import Unit.
import Product.
import Cast.
import Sigma.

import InductionWithCast.

% cowedge, note existential quantiafiacation for R
Cow ◂ (★ ➔ ★) ➔ ★ ➔ ★ = λ G : ★ ➔ ★ . λ A : ★ . ∀ Y : ★ .
  (∀ R : ★ . (R ➔ A) ➔ G · R ➔ Y) ➔ Y.

% introduction of cowedge
intrCow ◂ ∀ G : ★ ➔ ★ . ∀ C : ★ . ∀ R : ★ . (R ➔ C) 
   ➔ G · R ➔ Cow · G · C
  = Λ G . Λ C . Λ R . λ ac . λ ga . (Λ Y . λ q . q · R  ac ga)  .

% elimination of cowedge
elimCow ◂ ∀ F : ★ ➔ ★ . ∀ A : ★ . ∀ D : ★ .   
   (∀ R : ★ . (R ➔ A) ➔ F · R ➔ D)
  ➔ Cow  · F · A ➔ D =  Λ F . Λ A . Λ D . λ phi . λ e . e · D phi.

% defining cowedge with induction principle as the intersection of Cow and CowInductive
CowInductive ◂ Π G : ★ ➔ ★ . Π C : ★ . Cow · G · C ➔ ★
  = λ G : ★ ➔ ★ . λ C : ★ . λ e : Cow · G · C .
    ∀ Q : Cow · G · C ➔ ★ . (∀ R : ★ . Π cast : Cast · R · C . 
      Π gr : G · R . Q (intrCow · G · C · R (myCast · R · C -cast) gr)) ➔ Q e  .

CowInd ◂  Π G : ★ ➔ ★ . Π C : ★ . ★ = λ G : ★ ➔ ★ . λ C : ★ . ι x : Cow · G · C. CowInductive  · G · C x  . 

intrCowInd ◂ ∀ G : ★ ➔ ★ . ∀ C : ★ . ∀ R : ★ . Π cast : Cast · R · C  .  G · R
  ➔ CowInd · G · C = Λ G . Λ C . Λ R . λ f .  λ gr .
   [ intrCow · G · C · R (myCast · R · C -f) gr ,
     Λ Q . λ q . q · R [ (myCast · R · C -f) , (λ a . β{a} )  ]  gr  ] .


elimCowInd ◂ ∀ F : ★ ➔ ★ . ∀ A : ★ . ∀ D : ★ .   (∀ R : ★ . (R ➔ A) ➔ F · R ➔ D)
  ➔ CowInd  · F · A ➔ D =  Λ F . Λ A . Λ D . λ phi . λ e . e.1 · D phi.

CowInduction' ◂ ∀ G : ★ ➔ ★ . ∀ C : ★ . Π e : CowInd · G · C .
  ∀ Q : CowInd · G · C ➔ ★ .
    (∀ R : ★ . Π cast : Cast · R · C . Π gr : G · R . Q (intrCowInd · G · C · R cast gr))
    
      ➔ ∀ X : ★ . (∀ x' : CowInd · G · C . (e ≃ x') ➔ Q x' ➔ X) ➔ X =
    Λ G . Λ C . λ e . Λ Q . λ q . θ<e> e.2
         (Λ R . λ ar . λ gr . Λ X . λ qq . qq -(intrCowInd · G · C · R ar gr) β  (q · R ar gr)) .

CowInduction ◂ ∀ G : ★ ➔ ★ . ∀ C : ★ . Π e : CowInd · G · C .
  ∀ Q : CowInd · G · C ➔ ★ .  (∀ R : ★ . Π cast : Cast · R · C .
       Π gr : G · R . Q (intrCowInd · G · C · R cast gr))
        ➔ Q e =
  Λ G . Λ C . λ e . Λ Q . λ i . CowInduction' · G · C e · Q i  · (Q e)
    (Λ x' . λ e . λ u . ρ e - u) . 

% note that only the conversion function gets updated!
fmapCow ◂ ∀ F : ★ ➔ ★  . ∀ A : ★ . ∀ B : ★ . Π cast : Cast · A · B .
  CowInd · F · A ➔ CowInd · F · B = Λ F . Λ A . Λ B .  λ f . λ e1 .
  e1.2 · (λ _ : (Cow · F · A) . (CowInd · F · B))
    (Λ R . λ ra . λ fr . intrCowInd · F · B · R
      [ (λ r . f.1 (ra.1 r)) ,
        (λ r . ρ+  (f.2 (ra.1 r)) - ρ (ra.2 r) - β{f (ra.2 r)}) ]  fr) .

% DOES NOT(!) require functional extensionality
Cow-FunLaw1 ◂ ∀ G : (★ ➔ ★) . FunctorIdLaw1 · (CowInd · G) (fmapCow · G) =
  Λ G . Λ X . Λ Y . Λ f .  λ u . θ<u> (CowInduction · G · X u)
    (Λ R . λ ar .  λ gr . ε β).
