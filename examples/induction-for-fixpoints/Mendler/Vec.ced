import Helper.
import Product.
import Sigma.
import Sum.
import Unit.
import Functor.
import Fixpoint.

import IFunctor.
import IFixpoint.
import IInduction.
import Nat.

VecF ◂ ★ ➔ (NatM ➔ ★) ➔ (NatM ➔ ★) =
  λ A : ★ . λ Vec : NatM ➔ ★ . λ n : NatM .
  Sum · (n ≃ zero)
      · (Sigma · NatM · (λ p : NatM . Product · (n ≃ suc p) · (Product · A · (Vec p)))) .

% "let" isn't working here. yikes

VecFF ◂ ∀ A : ★ . IFunctor · NatM · (VecF · A) = Λ A .
  Λ X . Λ Y . λ i . λ c . λ v .
   
    v.1 · (VecF · A · Y i)
       (λ e . in1 · (i ≃ zero) · (Sigma · NatM · (λ p : NatM . Product · (i ≃ suc p) · (Product · A · (Y p)))) e)
       (λ pr .
          let pred = (proj1 · NatM · (λ p : NatM . Product · (i ≃ suc p) · (Product · A · (X p))) pr) in
       in2 · (i ≃ zero) · (Sigma · NatM · (λ p : NatM . Product · (i ≃ suc p) · (Product · A · (Y p))))
         (mkdsigma · NatM · (λ p : NatM . Product · (i ≃ suc p) · (Product · A · (Y p)))
	   (proj1 · NatM · (λ p : NatM . Product · (i ≃ suc p) · (Product · A · (X p))) pr)
          (pair · (i ≃ suc (proj1 · NatM · (λ p : NatM . Product · (i ≃ suc p) · (Product · A · (X p))) pr)) · (Product · A · (Y (proj1 · NatM · (λ p : NatM . Product · (i ≃ suc p) · (Product · A · (X p))) pr)))
	    (fst ·
	      (i ≃ suc (proj1 · NatM · (λ p : NatM . Product · (i ≃ suc p) · (Product · A · (X p))) pr)) ·
	      (Product · A · (X (proj1 · NatM · (λ p : NatM . Product · (i ≃ suc p) · (Product · A · (X p))) pr)))
	        (proj2 · NatM · (λ p : NatM . Product · (i ≃ (suc p)) · (Product · A · (X p))) pr))
            (pair · A · (Y (proj1 · NatM · (λ p : NatM . Product · (i ≃ suc p) · (Product · A · (X p))) pr))
	      (fst · A · (X (proj1 · NatM · (λ p : NatM . Product · (i ≃ suc p) · (Product · A · (X p))) pr))
	        ((snd ·
	          (i ≃ suc (proj1 pr)) ·
	          (Product · A · (X (proj1 · NatM · (λ p : NatM . Product · (i ≃ suc p) · (Product · A · (X p))) pr)))
	          (proj2 · NatM · (λ p : NatM . Product · (i ≃ (suc p)) · (Product · A · (X p))) pr))))
	      (c (proj1 · NatM · (λ p : NatM . Product · (i ≃ suc p) · (Product · A · (X p))) pr)
%(proj1 · NatM · (λ p : NatM . Product · (i ≃ suc p) · (Product · A · (X p))) pr)
	        (snd · A · (X (proj1 · NatM · (λ p : NatM . Product · (i ≃ suc p) · (Product · A · (X p))) pr))
	        ((snd ·
	          (i ≃ suc (proj1 · NatM · (λ p : NatM . Product · (i ≃ suc p) · (Product · A · (X p))) pr)) ·
	          (Product · A · (X (proj1 · NatM · (λ p : NatM . Product · (i ≃ suc p) · (Product · A · (X p))) pr)))
	          ((proj2 · NatM · (λ p : NatM . Product · (i ≃ (suc p)) · (Product · A · (X p))) pr))))))
             )))) .

% I need to show that if we have f: Π i : NatM .  X i ➔ Y i, an i : NatM, a u

lemma0 ◂ ∀ A : ★ . ∀ B : ★ . Π pr : Product · A · B . pair (fst pr) (snd pr) ≃ pr =
           Λ A . Λ B . λ pr . ind-Product · A · B pr · (λ x : Product · A · B . pair (fst x) (snd x) ≃ x)
	                      (λ a . λ b . β).

lemma1 ◂ ∀ A : ★ . ∀ i : NatM . ∀ X : NatM ➔ ★ . Π s : (Sigma · NatM · (λ p : NatM . Product · (i ≃ suc p) · (Product · A · (X p)))) .
         (mkdsigma (proj1 s) (pair (fst (proj2 s)) (pair (fst (snd (proj2 s))) (snd (snd (proj2 s)))))) ≃ s =
	 Λ A : ★ . Λ i : NatM . Λ X : NatM ➔ ★ . λ s .
	   ind-sigma · NatM · (λ p : NatM . Product · (i ≃ suc p) · (Product · A · (X p))) s
	   · (λ s : Sigma · NatM · (λ p : NatM . (Product · (i ≃ (suc p)) · (Product · A · (X p)))) .
	       (mkdsigma (proj1 s) (pair (fst (proj2 s)) (pair (fst (snd (proj2 s))) (snd (snd (proj2 s)))))) ≃ s)
	       (λ a . λ b . εl (εr (ρ (proj1inv · NatM · (λ p : NatM . Product · (i ≃ suc p) · (Product · A · (X p))) a b)
	                              -
				      (ρ (proj2inv · NatM · (λ p : NatM . Product · (i ≃ suc p) · (Product · A · (X p))) a b) -
				        (ρ (lemma0 · A · (X a) (snd · (i ≃ suc a) · (Product · A · (X a)) b)) -
					  (ρ (lemma0 · (i ≃ suc a) · (Product · A · (X a)) b) - β)))))).

VecFlaw1 ◂ ∀ A : ★ . IFunctorLaw1 · NatM · (VecF · A) (VecFF · A) =
  Λ A . Λ X . Λ Y . Λ f . λ i . λ u . Λ e . θ<u> (ind-Sum · (i ≃ zero)
      · (Sigma · NatM · (λ p : NatM . Product · (i ≃ suc p) · (Product · A · (X p)))) u)
      (λ a . β)
      (λ b . εl (εr (ρ (e (proj1 · NatM · (λ p : NatM . Product · (i ≃ suc p) · (Product · A · (X p))) b)
                           (snd · A · (X (proj1 · NatM · (λ p : NatM . Product · (i ≃ suc p) · (Product · A · (X p))) b)) (snd · (i ≃ (suc (proj1 b))) · (Product · A · (X (proj1 · NatM · (λ p : NatM . Product · (i ≃ suc p) · (Product · A · (X p))) b))) (proj2 · NatM · (λ p : NatM . Product · (i ≃ suc p) · (Product · A · (X p))) b )))) -
			   (ρ (lemma1 · A -i · X b) - β)))) .   
     
	
VecM ◂ ★ ➔ NatM ➔ ★ = λ A : ★ . IFixIndM · NatM · (VecF · A) (VecFF · A) .


Nil ◂ ∀ A : ★ . Unit ➔ VecM · A zero = Λ A . λ u . inIFixIndM · NatM · (VecF · A) (VecFF · A) -(VecFlaw1 · A) zero (in1 · (zero ≃ zero) ·
         (Sigma · NatM · (λ p : NatM . Product · (zero ≃ suc p) · (Product · A · (VecM · A p)))) β) .

Cons ◂ ∀ A : ★ . Π n : NatM . A ➔ (VecM · A n) ➔ (VecM · A (suc n)) =
         Λ A . λ n . λ a . λ vs . inIFixIndM · NatM · (VecF · A) (VecFF · A) -(VecFlaw1 · A) (suc n)
	 (in2 · ((suc n) ≃ zero)
	      · (Sigma · NatM · (λ p : NatM . Product · ((suc n) ≃ (suc p)) · (Product · A · (VecM · A p))))
	     (mkdsigma · NatM · (λ p : NatM . Product · ((suc n) ≃ (suc p)) · (Product · A · (VecM · A p))) n
	       (pair · (suc n ≃ suc n) · (Product · A · (VecM · A n))
	         β
		 (pair · A · (VecM · A n) a vs)))
	      ).


% derive this your InductionFixIndMg
%flatInductionVecM ◂
%  Q Nil
%  Q (Q vs -> Q (cons v vs))
%  Π vs. Q vs


VecInd ◂ ∀ A : ★ . ∀ Q : (Π n : NatM . VecM · A n ➔ ★) .
         Q zero (Nil · A unit) ➔
	 (Π m : NatM . ∀ vs : VecM · A m . ∀ a : A . Q m vs ➔ Q (suc m) (Cons · A m a vs)) ➔
	 Π n : NatM . Π vs : VecM · A n . Q n vs =
	 Λ A . Λ Q . λ n . λ c .
	   InductionFixIndM · NatM · (VecF · A) (VecFF · A) (VecFlaw1 · A) · Q
	     (Λ R . Λ cast . Λ castId . λ ih . λ i . λ vf .
	      θ<vf> (ind-Sum · (i ≃ zero) · (Sigma · NatM · (λ p : NatM . (Product · (i ≃ (suc p)) · (Product · A · (R p))))) vf)
	      (λ u . ρ (VecFlaw1 · A · R · (VecM · A) -cast i (in1 · (i ≃ zero) · (Sigma · NatM · (λ p : NatM . Product · (i ≃ suc p) · (Product · A · (R p)))) u) -castId) -
	             (ρ u - n))
	      (λ b . ●) .
	  
