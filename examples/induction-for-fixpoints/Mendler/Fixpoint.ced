
import Functor.
import Sigma.
import Product.

import Church.
import Helper.

% Mendler-style algebra
AlgebraM ◂ (★ ➔ ★) ➔ ★ ➔ ★ = λ F : ★ ➔ ★ . λ A : ★ . ∀ R : ★ . (R ➔ A) ➔ F · R ➔ A .


WFAlgM ◂ Π F : ★ ➔ ★ . Functor · F ➔ Π A : ★ . AlgebraM · F · A ➔ ★ =
   λ F : ★ ➔ ★ . λ fmap : Functor · F . λ A : ★ . λ alg : AlgebraM · F · A .
   ∀ R : ★ . ∀ cast : R ➔  A . ∀ fr : F · R . alg cast fr ≃  alg (λ x . x) (fmap cast fr) .


% Fixpoint of F-malgebra
FixM ◂ (★ ➔ ★) ➔ ★ = λ F : ★ ➔ ★ . ∀ A : ★ . (∀ R : ★ . (R ➔ A) ➔ F · R ➔ A) ➔ A .


% FixM is (weakly) initial
foldM ◂ ∀ F : ★ ➔ ★ . ∀ A : ★ . AlgebraM · F · A ➔ FixM · F ➔ A
  = Λ F . Λ A . λ alg . λ fix . fix · A alg .


inM ◂ ∀ F : ★ ➔ ★ . F · (FixM · F) ➔ FixM · F
   = Λ F .  λ fexp . Λ A . λ alg . alg · (FixM · F) (foldM · F · A alg) fexp.


outM ◂ ∀ F : ★ ➔ ★ . Functor · F ➔ FixM · F ➔ F · (FixM · F)
 = Λ F . λ fmap . λ fix . foldM · F · (F · (FixM · F))
   (Λ R . λ ih . λ fr . fmap · R · (FixM · F) (λ r . inM · F (ih r))  fr)
   fix  .



% inductivity predicate     
isInductiveFixM ◂ Π G : (★ ➔ ★) . Functor · G ➔ FixM · G ➔ ★
   = λ G : ★ ➔ ★ . λ fmap : Functor · G . λ x : FixM · G . ∀ Q : (FixM · G) ➔ ★ .
        (∀ R : ★ . ∀ cast : R ➔ (FixM · G) . (∀ r : R . cast r ≃ r) ➾
           (Π r : R . Q (cast r)) ➔
           (Π gr : G · R .  Q (inM · G (fmap · R · (FixM · G) cast gr)))) ➔ Q x  .



DepFixM ◂ Π G : (★ ➔ ★) . Functor · G ➔ ★
  = λ G : ★ ➔ ★ . λ fmap : Functor · G .
    ι x : FixM · G . isInductiveFixM · G fmap x .


foldMDep ◂ ∀ F : ★ ➔ ★ . Π fmap : Functor · F . ∀ A : ★ . AlgebraM · F · A ➔ DepFixM · F fmap ➔ A
  = Λ F . λ fmap . Λ A . λ alg . λ fix . foldM · F · A  alg fix.1 .


inDepFixM ◂ ∀ G : (★ ➔ ★) . Π fmap : Functor · G . FunctorLaw1 · G fmap 
             ➔ G · (DepFixM · G fmap) ➔ DepFixM · G fmap
  = Λ G . λ fmap . λ Flaw1 . λ ei .
    [ inM · G (fmap · (DepFixM · G fmap) · (FixM · G) (λ e . e.1) ei) 
    , (Λ Q . λ q . q · (DepFixM · G fmap) -(λ z . z.1) -(Λ r . β) (λ r . r.2 · Q q ) ei) 
    { ε (ρ (Flaw1 · (DepFixM · G fmap) · (DepFixM · G fmap) -(λ x . x) ei -(λ _ . β)  ) - β) }
    ].



outAlgM ◂ ∀ G : ★ ➔ ★ . Π fmap : Functor · G . FunctorLaw1 · G fmap ➔ AlgebraM · G · (G · (DepFixM · G fmap))
  = Λ G . λ fmap . λ flaw1 . (Λ R . λ ih . λ fr . fmap · R · (DepFixM · G fmap)
     (λ r . inDepFixM · G fmap flaw1 (ih r))  fr) .


outAlgMWF ◂ ∀ G : ★ ➔ ★ .
             Π fmap : Functor · G .
	     Π flaw1 : FunctorLaw1 · G fmap .
	     Π flaw2 : FunctorLaw2 · G fmap .
	     WFAlgM · G fmap · (G · (DepFixM · G fmap)) (outAlgM · G fmap flaw1) = Λ G . λ fmap . λ flaw1 . λ flaw2 . Λ R . Λ cast . Λ fr .
    ρ (flaw2 · R · (G · (DepFixM · G fmap)) · (DepFixM · G fmap) -(λ r . (inDepFixM · G fmap flaw1 r)) -cast fr) - β  .


outDepFixM ◂ ∀ G : (★ ➔ ★) . Π fmap : Functor · G . FunctorLaw1 · G fmap
             ➔ DepFixM · G fmap ➔ G · (DepFixM · G fmap)
  = Λ G . λ fmap . λ flaw1 . λ ei .
     foldM · G · (G · (DepFixM · G fmap))
      (outAlgM · G fmap flaw1)
      ei.1   .
     
