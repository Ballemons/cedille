formatto ∷ λ X : ★ . X → X → (X → X → X) → X ⇐ ★ → ★ =
  ξ X . X ⇒ X ⇒ (X ⇒ X ⇒ X) ⇒ X ⇐ ✓ ⇒ ✓ . 

formatti ∷ ∀ X : ★ . formatto · X ⇐ ★ =
  ξ X : ✓ . formatto X ⇐ ✓ . 

iarg ∷ λ a . λ n . λ p . a ⇐ formatti =
  ξ X . χ (ξ a . β (ξ n . β (ξ p . β a))) ⇐ β ⇐ formatti.
inone ∷ λ a . λ n . λ p . n ⇐ formatti = 
  ξ X . χ (ξ a . β (ξ n . β (ξ p . β n))) ⇐ β ⇐ formatti.
iapp ∷ λ x . λ y .λ a . λ n . λ p . p (x a n p) (y a n p) ⇐ formatti → formatti → formatti = 
  ξ x . β (ξ y . β (ξ X . χ (ξ a . β (ξ n . β (ξ p . β 
      (p ((χ (x 〈 X X 〉) ⇒ β) a n p) ((χ y 〈 X X 〉 ⇒ β) a n p))))) ⇐ β)) ⇐ formatti ⇒ formatti ⇒ formatti.

bool ∷ ∀ X : ★ . X → X → X ⇐ ★ = ξ X : ✓ . X ⇒ X ⇒ X ⇐ ✓ .

tt ∷ λ x . λ y . x ⇐ bool = ξ X . ξ x . β (ξ y . β x) ⇐ bool.
ff ∷ λ x . λ y . y ⇐ bool = ξ X . ξ x . β (ξ y . β y) ⇐ bool.

list ∷ λ A : ★ . ∀ X : ★ . (A → X → X) → X → X ⇐ ★ → ★ =
  ξ A . ξ X : ✓ . (A ⇒ X ⇒ X) ⇒ X ⇒ X
  ⇐ ✓ ⇒ ✓ .

nil ∷ λ c . λ n . n ⇐ ∀ A : ★ . list · A =
  ξ A . χ (ξ X . ξ c . β (ξ n . β n)) ⇐ β 
  ⇐ ξ A : ✓ . list A . 
cons ∷ λ a . λ l . λ c . λ n . c a (l c n) ⇐ ∀ A : ★ . A → list · A → list · A 
  = ξ A . ξ a . β (ξ l . β (χ (ξ X . ξ c . β (ξ n. β (c a ((χ l ⇒ β) 〈 X X 〉 c n)))) ⇐ β)) ⇐ ξ A : ✓ . A ⇒ list A ⇒ list A .
append ∷ λ x . λ y . x cons y ⇐ ∀ A : ★ . list · A → list · A → list · A =
  ξ A . ξ x . β (ξ y . β ((χ x ⇒ β) 〈 (list A) (list · A) 〉 (cons 〈 A A 〉) y)) ⇐ ξ A : ✓ . list A ⇒ list A ⇒ list A .

bitstr ∷ list · bool ⇐ ★ = list bool ⇐ ✓ .

bsingleton ∷ λ b . cons b nil ⇐ bool → bitstr =
  ξ b . β (cons 〈 bool bool 〉 b (nil 〈 bool bool 〉)) ⇐ bool ⇒ bitstr .

formato ∷ λ X : formatti → ★ .λ i : formatti . 
            (X iarg) → 
            (∀ a : formatti . ∀ b : formatti. X a → X b → X (iapp a b)) → 
            (∀ a : formatti . ∀ b : formatti. X a → (X inone → X b) → X (iapp a b)) → 
            (bitstr → X inone) → X i
   ⇐ (formatti → ★) → formatti → ★ 
=
  ξ X . ξ i . 
      (X iarg) ⇒ 
      (ξ a : formatti . ξ b : formatti . X a ⇒ X b ⇒ X (iapp a b)) ⇒ 
      (ξ a : formatti . ξ b : formatti . X a ⇒ (X inone ⇒ X b) ⇒ X (iapp a b)) ⇒
      (bitstr ⇒ X inone) ⇒ X i
  ⇐ (formatti ⇒ ✓) ⇒ formatti ⇒ ✓ .

formati ∷ λ i : formatti . ∀ X : formatti → ★ . formato · X i 
             ⇐ formatti → ★ = 
 ξ i . ξ X : formatti ⇒ ✓ . formato X i
⇐ formatti ⇒ ✓ .
 
farg ∷ λ a . λ p . λ e . λ b . a ⇐ ∀ X : formatti → ★ . formato · X iarg = 
   ξ X . (χ (ξ a . β (ξ p . β (ξ e . β (ξ b . β a)))) ⇐ β ✓ · β) 
   ⇐ ξ X : formatti ⇒ ✓ . formato X iarg .
fapp ∷ λ x . λ y . λ a . λ p . λ e . λ b . p (x a p e b) (y a p e b) 
       ⇐ ∀ X : formatti → ★ . ∀ ai : formatti . ∀ bi : formatti . formato · X ai → formato · X bi → formato · X (iapp ai bi) 
       = 
   ξ X . ξ ai . ξ bi . ξ x . β (ξ y . β 
        (χ (ξ a . β (ξ p . β (ξ e . β (ξ b . β 
              (p {ai ai} {bi bi} ((χ x ⇒ β ✓ · β) a p e b) ((χ y ⇒ β ✓ · β) a p e b))))))
         ⇐ β ✓ · β)) 
   ⇐ ξ X : formatti ⇒ ✓ . ξ ai : formatti . ξ bi : formatti . formato X ai ⇒ formato X bi ⇒ formato X (iapp ai bi).
flet ∷ λ x . λ y . λ a . λ p . λ e . λ b . e (x a p e b) (λ q . y q a p e b) 
       ⇐ ∀ X : formatti → ★ . ∀ ai : formatti . ∀ bi : formatti . formato · X ai → (X inone → formato · X bi) → formato · X (iapp ai bi)
       = 
  ξ X . ξ ai . ξ bi . ξ x . β (ξ y . β 
      (χ (ξ a . β (ξ p . β (ξ e . β (ξ b . β 
          (e {ai ai} {bi bi} ((χ x ⇒ β ✓ · β) a p e b) (ξ q . β ((χ y q ⇒ β ✓ · β) a p e b)))
         )))) 
       ⇐ β ✓ · β)) 
  ⇐ ξ X : formatti ⇒ ✓ . ξ ai : formatti . ξ bi : formatti . formato X ai ⇒ (X inone ⇒ formato X bi) ⇒ formato X (iapp ai bi) .
fbitstr ∷ λ x . λ a . λ p . λ e . λ b . b x 
       ⇐ ∀ X : formatti → ★ . bitstr → formato · X inone
       = 
 ξ X . ξ x . β 
    (χ (ξ a . β (ξ p . β (ξ e . β (ξ b . β (b x))))) 
     ⇐ β ✓ · β)
 ⇐ ξ X : formatti ⇒ ✓ . bitstr ⇒ formato X inone .
var ∷ λ x . λ a . λ p . λ e . λ b . x ⇐ ∀ a : formatti . ∀ X : formatti → ★ . X a → formato · X a = 
  ξ a . ξ X . ξ x . β (χ (ξ a . β (ξ p . β (ξ e . β (ξ b . β x)))) ⇐ β ✓ · β)
  ⇐ 
  ξ a : formatti . ξ X : formatti ⇒ ✓ . X a ⇒ (formato X a) .

flit ∷ λ x . fbitstr (bsingleton x) ⇐ ∀ X : formatti → ★ . bool → formato · X inone = 
  ξ X . ξ x . β (fbitstr 〈 X X 〉 (bsingleton x)) 
  ⇐ ξ X : formatti ⇒ ✓ . bool ⇒ formato X inone .

Fa ∷ λ r : ★ . (bool → r) ⇐ ★ → ★ = ξ r . bool ⇒ r ⇐ ✓ ⇒ ✓ .
Fn ∷ λ r : ★ . r ⇐ ★ → ★ = ξ r . r ⇐ ✓ ⇒ ✓ .
Fp ∷ λ f : ★ → ★ . λ g : ★ → ★ . λ r : ★ . f · (g · r) ⇐ (★ → ★) → (★ → ★) → (★ → ★) = 
  ξ f . ξ g . ξ r . f (g r) ⇐ δ 𝒌 ∷ ★ → ★ ⇐ □ = ✓ ⇒ ✓ - 𝒌 ⇒ 𝒌 ⇒ 𝒌.

format-th ∷ 
  λ i : formatti . ↑ i : ((☆ → ☆) → (☆ → ☆) → ((☆ → ☆) → (☆ → ☆) → (☆ → ☆)) → (☆ → ☆)) · Fa · Fn · Fp
      ⇐ formatti → ★ → ★ = 
ξ i . (↑ X . (χ (i 〈 (X ⇒ X) (X → X) 〉) ⇒ β) : ((X ⇒ X) ⇒ (X ⇒ X) ⇒ ((X ⇒ X) ⇒ (X ⇒ X) ⇒ (X ⇒ X)) ⇒ (X ⇒ X))) Fa Fn Fp
⇐ formatti ⇒ ✓ ⇒ ✓ .

formathr ∷ λ i : formatti . ∀ A : ★ . (bitstr → A) → format-th i · A ⇐ formatti → ★ 
  = ξ i . ξ A : ✓ . (bitstr ⇒ A) ⇒ (format-th i A) ⇐ formatti ⇒ ✓  . 

formath ∷
  λ a . a (λ f . λ b . f (bsingleton b))
          (λ r . λ r' . λ f . r (λ s . r' (λ s' . f (append s s'))))
          (λ r . λ r' . λ f . r (λ s . r' (λ f . f s) f))
          (λ s . λ f . f s)
⇐ ∀ i : formatti . formati i → formathr i =
ξ i . ξ a . β 
 ((χ ((χ a ⇒ β) 〈 formathr formathr 〉) ⇒ β ✓ · β)
   (χ (ξ A . ξ f . β (χ (ξ b . β (f (bsingleton b))) ⇐ (β ✓ · β ✓ ✓ ✓ ✓ · β ✓ ✓ ✓ · β ✓ ✓ · β ✓ · β))) ⇐ β)
   (ξ a . ξ b . ξ r . β (ξ r' . β (χ (ξ A . ξ f . β 
      (χ (χ ((χ r ⇒ β) 〈 (format-th b A) (format-th b · A) 〉 (ξ s . β ((χ r' ⇒ β) 〈 A A 〉 (ξ s' . β (f (append 〈 bool bool 〉 s s'))))))
            ⇒ β ✓ · (✓ (β ✓)))
       ⇐ β ✓ · β ✓ ✓ ✓ ✓ · β ✓ ✓ ✓ · β ✓ ✓ · β ✓ · β ✓ ✓ · β ✓ · β · η↑ 3 ✓ ✓ ✓ ✓ · ✓ (η↑ 3 ✓ ✓ ✓ ✓)))
      ⇐ ((✓ (β ✓) · ✓ β) · β))))
   (ξ a . ξ b . ξ r . β (ξ r' . β (χ (ξ A . ξ f . β 
       (χ (χ ((χ r ⇒ β) 〈 (format-th b A) (format-th b · A) 〉 
               (ξ s . β 
                  ((χ r' ⇒ (β ⇒ β)) 
                   (ξ A . ξ f . β (χ (f s) ⇐ β ✓ · β ✓ ✓ ✓ ✓ · β ✓ ✓ ✓ · β ✓ ✓ · β ✓ · β))
                 〈 A A 〉 f)
                )) ⇒ β ✓ · (✓ (β ✓))) 
      ⇐ β ✓ · β ✓ ✓ ✓ ✓ · β ✓ ✓ ✓ · β ✓ ✓ · β ✓ · β ✓ ✓ · β ✓ · β · η↑ 3 ✓ ✓ ✓ ✓ · ✓ (η↑ 3 ✓ ✓ ✓ ✓)))
     ⇐ (✓ (β ✓) · ✓ β · β))))
   (ξ s . β (χ (ξ A . ξ f . β (χ (f s) ⇐ (β ✓ · β ✓ ✓ ✓ ✓ · β ✓ ✓ ✓ · β ✓ ✓ · β ✓ · β))) ⇐ β)))
⇐ ξ i : formatti . formati i ⇒ formathr i .

testic ∷ iapp iarg (iapp inone (iapp inone inone)) ⇐ formatti = iapp iarg (iapp inone (iapp inone inone)) ⇐ formatti.

testfc = flet farg (λ i . fapp (var i) (fapp (flit tt) (var i))).

normalize formath testfc (λ x . x).