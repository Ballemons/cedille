import stdlib.

module Ind(F : ★ ➔ ★){fm : CastMap · F} .

import public D · F -fm.

toD : C ➔ D =
  λ x . (rUnfold x).1 · (λ _ : ★ . D) -(constCastMap · D) inAlg' .

reflection : Π x : C . { toD x ≃ x } =
  λ x . (rUnfold x).2.

castD : Cast · C · D =
  intrCast · C · D -toD -reflection.

Ind : Π c : C . Inductive · C c =
  λ c . cast -(indFunctor -c · D · C -[λ d . (dUnfold d).1 , β]) (dUnfold (cast -castD c)).2.

lambek1 : Π x : F · C . { out (in x) ≃ x} = λ x . β .

lambek2 : Π x : C . { in (out x) ≃ x } =
  λ x .
    Ind x · (λ x : C . λ _ : ★ . { in (out x) ≃ x }) -(λ c . constCastMap · { in (out c) ≃ c })
      [β{λ _ . λ _ . λ x .x} , Λ R . Λ cc . Λ cd . Λ o. λ ih . λ p . β] .

{- revise in light of Uustala Vene "Coding..." paper
IsHomomorphism : CastMap · F ➔
                 Π X1 : ★ . (Alg · C · X1) ➔
                 Π X2 : ★ . (Alg · C · X2) ➔
                 Π h : X1 ➔ X2 . ★ =
  λ fm : CastMap · F .
  λ X1 : ★ . λ alg1 : Alg · C · X1 .
  λ X2 : ★ . λ alg2 : Alg · C · X2 .
  λ h : X1 ➔ X2 .
    ∀ R : ★ .
    ∀ fr : F · R .
    { h (alg1 (foldU alg1) fr) ≃ alg2 (foldU alg2) fr }.

WeakInitiality : ∀ X : ★ . ∀ alg : Alg · C · X .
                 ∀ fm : CastMap · F .
                 IsHomomorphism fm · C (inAlg -fm) · X alg (fold -fm · X alg) =
  Λ X . Λ alg . Λ fm .
  Λ R . Λ fr . β.

Initiality : ∀ X : ★ . ∀ alg : Alg · C · X .
             ∀ fm : CastMap · F .
             ∀ h : C ➔ X .
             IsHomomorphism fm · C (inAlg -fm) · X alg h ➔
             Π c : C . { h c ≃ fold alg c } =
  Λ X . Λ alg . Λ h . λ hh . λ c .
    θ<c> (Ind -fm c)
      [ β{λ rec . λ d . β} ,
        Λ R . Λ reveal . λ rec . λ d . ρ (hh · R -d) - β ].

-}
