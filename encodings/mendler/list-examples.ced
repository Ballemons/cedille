module list-examples.

import list.
import cnat. -- for some data for the lists

append : ∀ A : ★ . List · A ➔ List · A ➔ List · A =
  Λ A . λ l1 . λ l2 .
    listRec l1 · (List · A)
      [ β{λ e . λ d . d (λ u . l2) (λ p . p (λ h . λ t . cons h (e t)))} ,
        Λ R . Λ c . λ e . λ d .
          d.1 · (List · A)
            (λ u . l2)
            (λ p . p.1 · (List · A) (λ h . λ t . cons · A h (e.1 t)))].

appendAssoc : ∀ A : ★ . Π l1 : List · A . ∀ l2 : List · A . ∀ l3 : List · A .
              { append l1 (append l2 l3) ≃ append (append l1 l2) l3 } =
  Λ A . λ l1 . Λ l2 . Λ l3 .
    θ<l1> (listInd l1)
      [ β{λ ih . λ d . ind-Sum d (λ u . λ x . x) (λ p . ind-Product p (λ h . λ t . λ x . x))} ,
        Λ R . Λ _ . λ ih . λ d .
          θ<d> (ind-Sum d) (λ u . β) (λ p . θ<p> (ind-Product p)
                 (λ h . λ t . ρ+ (ih.1 t) - β)) ].
      
testList : List · cNat = cons (cS (cS cZ)) (cons (cS cZ) (cons cZ (nil · cNat))) .
