import stdlib.

module D(F : ★ ➔ ★){fm : CastMap · F} .

import libmods.
import public C · F -fm.

PrfAlg : (C ➔ ★ ➔ ★) ➔ ★ =
  λ P : C ➔ ★ ➔ ★ .
    ι alg : Top .
    ∀ R : ★ . 
    ∀ reveal : Cast · R · C.    
      View · (Π r : R . P (cast -reveal r) · R) (foldU alg) ➔
      Π p : F · R .
      P (in (cast · (F · R) · (F · C) -(fm -reveal) p)) · R .

Inductive : ★ ➔ C ➔ ★ =
  λ D : ★ . λ d : C.
    ∀ P : C ➔ ★ ➔ ★ .
    (Π c : C . CastMap · (P c)) ➾
      PrfAlg · P ➔
      P d · D .

DF : ★ ➔ ★ = λ D : ★ . ι x : C . Inductive · D x.

D : ★ = Rec · DF .

indFunctor : ∀ x : C . CastMap · (λ X : ★ . Inductive · X x) =
  Λ x . Λ A . Λ B . Λ c .
    [ λ d . Λ P . Λ fP . λ palg . cast -(fP x -c) (d · P -fP palg) , β ] .

dFunctor : CastMap · DF =
  Λ X . Λ Y . Λ c .
    [ λ d . [ d.1 , cast -(indFunctor -d.1 · X · Y -c) d.2] , β].

dFold ◂ DF · D ➔ D =
  recFold · DF -dFunctor .

dUnfold ◂ D ➔ DF · D =
  recUnfold · DF -dFunctor .

in' : F · D ➔ D =
  λ d .
    dFold
      [ in 
        (cast · (F · D) · (F · C)
            -(fm · D · C -[λ x . (dUnfold x).1 , β]) d) ,
     Λ P . Λ fP . λ palg . palg.2 · D
                      -[λ x . (dUnfold x).1 , β] 
                       [ λ r . (dUnfold r).2 · P -fP palg , β{λ r . r palg}] d].

inAlg' : Alg · C · (λ _ : ★ . D) =
  [ β{λ eval . λ p . (in p)} ,
    Λ R . Λ reveal . λ eval . λ p .
      in' (cast -(fm 
                   -(intrCast -eval.1
                      -(λ r . ρ eval.2 - ρ (rUnfold (cast -reveal r)).2 - β))) p) ] .


