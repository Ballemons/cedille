import stdcore.
import data/sigma.

module GenericInd (F: ★ ➔ ★) {pos: CastMap ·F}.

import Ind as Ind ·F -pos.

Id : ★ ➔ ★ ➔ ★ = Cast.
intrId = intrCast.
elimId = elimCast.

IdMapping : (★ ➔ ★) ➔ ★ = CastMap.
imap = castMap.

-- todo, definition is a lie due to module params
Fix : Π F: ★ ➔ ★. IdMapping ·F ➔ ★
= λ F: ★ ➔ ★. λ pos: IdMapping ·F. Rec ·Ind.rF.

D : ★ = Fix ·F pos.

in  : F ·D ➔ D = Ind.in.
out : D ➔ F ·D = Ind.out.

PrfAlg : (D ➔ ★ ➔ ★) ➔ ★ = λ P: D ➔ ★ ➔ ★.
  ∀ R: ★. ∀ c: Id ·R ·D. Π o: R ➔ F ·R. ∀ oeq: { o ≃ out }.
  (Π x: R. P (elimCast -c x) ·R) ➔
  Π xs: F ·R. P (in (castMap -pos -c xs)) ·R.

induction: ∀ P: D ➔ ★ ➔ ★. (Π x: D. IdMapping ·(P x)) ➾ PrfAlg ·P ➔ Π d: D. P d ·D
= Λ P. Λ posP. λ alg. λ d.
  Ind.Ind d ·P -posP
    [ β{λ v. λ xs. alg out v xs}
    ,  Λ R. Λ cc. Λ cd. Λ o. λ ih. λ xs. alg -cc (elimView β{out} -o) -β ih.1 xs ].

inductionComp : ∀ P: D ➔ ★ ➔ ★. Π alg: PrfAlg ·P. Π xs: F ·D. {induction alg (in xs) ≃ alg out (induction alg) xs}
= Λ P. λ alg. λ xs. β.

lambek1 : Π xs: F ·D. {xs ≃ out (in xs)} = λ xs. ς (Ind.lambek1 xs).
lambek2 : Π x: D. {x ≃ in (out x)} = λ x.
  induction ·(λ x: D. λ _: ★. {x ≃ in (out x)})
    -(λ x. Λ X. Λ Y. Λ c. castRefl ·{ x ≃ in (out x) }) (Λ R. Λ c. λ o. Λ oeq. λ ih. λ xs. β) x.

--                                         View ·(D ➔ F ·D) out ·(R ➔ F ·R)
IsD : ★ ➔ ★ = λ R: ★. Pair ·(Id ·R ·D) ·(View ·(R ➔ F ·R) β{out}).
-- isD : IsD ·D = (intrId (λ x. x) (λ x. β)) , (intrView -out out β).
isD : IsD ·D = pair (intrId -(λ x. x) -(λ x. β)) (intrView β{out} -out -β).
-- toD : ∀ R: ★. ∀ _: IsD ·R. R ➔ D = Λ R. Λ is. λ r. elimId -(π₁ is) r.
toD : ∀ R: ★. ∀ _: IsD ·R. R ➔ D = Λ R. Λ is. λ r. elimId -(fst is) r.
-- toFD : ∀ R: ★. ∀ _: IsD ·R. F ·R ➔ F ·D = Λ R. Λ is. λ xs. imap -pos -(π₁ is) xs.
toFD : ∀ R: ★. ∀ _: IsD ·R. F ·R ➔ F ·D = Λ R. Λ is. λ xs. imap -pos -(fst is) xs.

ByCases: (D ➔ ★) ➔ Π R: ★. IsD ·R ➔ ★
= λ P: D ➔ ★. λ R: ★. λ is: IsD ·R. Π xs: F ·R. P (in (toFD -is xs)).

mu': ∀ R: ★. ∀ is: IsD ·R. Π r: R. ∀ P: D ➔ ★. ByCases ·P ·R is ➔ P (toD -is r)
-- Λ R. Λ is. λ r. Λ P. λ case. ρ (lambek2 (toD -is r)) - case (elimView β{out} -(π₂ is) r).
= Λ R. Λ is. λ r. Λ P. λ case. ρ (lambek2 (toD -is r)) - case (elimView β{out} -(snd is) r).

ByInd: (D ➔ Π R: ★. IsD ·R ➔ ★) ➔ ★
= λ P: D ➔ Π R: ★. IsD ·R ➔ ★. ∀ R: ★. ∀ is: IsD ·R. (Π r: R. P (toD -is r) ·R is)
  ➔ ByCases ·(λ x: D. P x ·R is) ·R is.

IdMappingO : (Π R: ★. IsD ·R ➔ ★) ➔ ★
= λ P: Π R: ★. IsD ·R ➔ ★. ∀ X: ★. ∀ Y: ★.
  Cast ·X ·Y ➔ Cast ·(∀ isX: IsD ·X. P ·X isX) ·(∀ isY: IsD ·Y. P ·Y isY).

mu: Π d: D. ∀ P: D ➔ Π R: ★. IsD ·R ➔ ★. (Π x: D. IdMappingO ·(P x)) ➾ ByInd ·P ➔ P d ·D isD
= λ d. Λ P. Λ imP. λ ind.
  induction ·(λ x: D. λ R: ★. ∀ is: IsD ·R. P x ·R is)
    -(λ x. Λ X. Λ Y. Λ c. [ λ f. Λ is. (elimCast -(imP x c) f) -is , β ])
    (Λ R. Λ c. λ o. Λ oeq. λ ih. λ xs. Λ is.
       ind -is (λ x. ih x -is) xs)
    d -isD.
