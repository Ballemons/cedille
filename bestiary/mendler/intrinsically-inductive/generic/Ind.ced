module Ind .

import cast.
import recType.
import is.
import top.
import true.

import C.
import D.

reflection ◂ ∀ F : ★ ➔ ★ . ∀ fm : RecFunctor · F . Π x : D · F fm . { x inAlg ≃ x } =
  Λ F . Λ fm . λ x . (rUnfold · F -fm (dUnfold · F -fm x).1).2.

toD ◂ ∀ F : ★ ➔ ★ . ∀ fm : RecFunctor · F . (C · F) ➔ (D · F fm) =
  Λ F . Λ fm . λ x . (rUnfold · F -fm x).1 · (D · F fm) (inAlg · F -fm) .

Ind ◂ ∀ F : ★ ➔ ★ . ∀ fm : RecFunctor · F . Π d : D · F fm . Inductive · F fm · (D · F fm) · (D · F fm) (in · F -fm) d =
      Λ F . Λ fm . λ d .
        Λ P . λ p .
          ρ ς (reflection · F -fm d) -
           ((dUnfold · F -fm d).2 · (λ x : C · F . P (toD · F -fm x))
            [ β{p} , Λ R . Λ reveal . Λ revealh . λ eval . λ pd .
                       ρ (reflection · F -fm (in · F -fm (Freveal · F -fm · R -revealh pd))) -
                       (p.2 · R -revealh -revealh 
                         [λ r . ρ ς (reflection · F -fm (cast · R · (D · F fm) -revealh r)) - (eval.1 r) , eval.2]
                       pd) ]) .

lambek1 ◂ ∀ F : ★ ➔ ★ . ∀ fm : RecFunctor · F . Π x : D · F fm . { out (in x) ≃ x} = Λ F . Λ fm . λ x . β .

lambek2 ◂ ∀ F : ★ ➔ ★ . ∀ fm : RecFunctor · F . Π x : (D · F fm) . { in (out x) ≃ x } =
  Λ F . Λ fm . λ x .
    θ<x> (Ind · F -fm x)
      [β{λ _ . λ _ . λ x .x} , Λ R . Λ reveal . Λ revealh . λ ih . λ p . β] .

