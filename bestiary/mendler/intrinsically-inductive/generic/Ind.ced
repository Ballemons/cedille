module Ind .

import cast.
import recType.
import is.
import top.
import true.

import C.
import D.

toD ◂ ∀ F : ★ ➔ ★ . ∀ fm : RecFunctor · F . (C · F) ➔ (D · F fm) =
  Λ F . Λ fm . λ x . (rUnfold · F -fm x).1 · (D · F fm) (inAlg · F -fm) .

{-reflection ◂ ∀ F : ★ ➔ ★ . ∀ fm : RecFunctor · F . Π x : D · F fm . { toD x.1 ≃ x } =
  Λ F . Λ fm . λ x . (rUnfold · F -fm (dUnfold · F -fm x).1).2.
-}

reflection ◂ ∀ F : ★ ➔ ★ . ∀ fm : RecFunctor · F . Π x : C · F . { toD x ≃ x } =
  Λ F . Λ fm . λ x . (rUnfold · F -fm x).2.

castD ◂ ∀ F : ★ ➔ ★ . ∀ fm : RecFunctor · F . Cast · (C · F) · (D · F fm) =
  Λ F . Λ fm . caste · (C · F) · (D · F fm)
                 (toD · F -fm)
                 -(reflection · F -fm).

Ind ◂ ∀ F : ★ ➔ ★ . ∀ fm : RecFunctor · F . Π c : C · F . Inductive · F fm c =
  Λ F . Λ fm . λ c . (cast · (C · F) · (D · F fm) -(castD · F -fm) c).2.

lambek1 ◂ ∀ F : ★ ➔ ★ . ∀ fm : RecFunctor · F . Π x : C · F . { out (in x) ≃ x} = Λ F . Λ fm . λ x . β .

lambek2 ◂ ∀ F : ★ ➔ ★ . ∀ fm : RecFunctor · F . Π x : C · F . { in (out x) ≃ x } =
  Λ F . Λ fm . λ x .
    θ<x> (Ind · F -fm x)
      [β{λ _ . λ _ . λ x .x} , Λ R . Λ reveal . λ ih . λ p . β] .

