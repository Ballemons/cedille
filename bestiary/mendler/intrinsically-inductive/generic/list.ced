module list.

import cast.
import recType.
import C.
import D.
import Ind.
import product.
import sum.
import unit.

ListF ◂ ★ ➔ ★ ➔ ★ = λ A : ★ . λ X : ★ . Sum · Unit · (Product · A · X) .

ListFunctor ◂ ∀ A : ★ . RecFunctor · (ListF · A) =
  Λ A . Λ X . Λ Y . λ c .
    caste (λ d : ListF · A · X. d.1 · (ListF · A · Y)
              (λ _ . in1 · Unit · (Product · A · Y) unit)
              (λ p . p.1 · (ListF · A · Y)
                      (λ h . λ t . in2 · Unit · (Product · A · Y) (pair h (cast -c t)))))
      -(λ a . θ<a> (ind-Sum a) (λ x . ρ (eta-Unit x) - β)
                (λ p . θ<p> (ind-Product p) (λ a . λ b . β))) .

List ◂ ★ ➔ ★ = λ A : ★ . C · (ListF · A) .

nil ◂ ∀ A : ★ . List · A =
  Λ A . in · (ListF · A) -(ListFunctor · A) (in1 · Unit · (Product · A · (List · A)) unit) .

cons ◂ ∀ A : ★ . A ➔ List · A ➔ List · A =
  Λ A . λ h . λ t . in · (ListF · A) -(ListFunctor · A) (in2 · Unit · (Product · A · (List · A)) (pair h t)) .

append ◂ ∀ A : ★ . List · A ➔ List · A ➔ List · A =
  Λ A . λ l1 . λ l2 .
    cRec · (ListF · A) -(ListFunctor · A) l1 · (List · A)
      [ β{λ e . λ d . d (λ u . l2) (λ p . p (λ h . λ t . cons h (e t)))} ,
        Λ R . Λ c . λ e . λ d .
          d.1 · (List · A)
            (λ u . l2)
            (λ p . p.1 · (List · A) (λ h . λ t . cons · A h (e.1 t)))].

appendAssoc ◂ ∀ A : ★ . Π l1 : List · A . ∀ l2 : List · A . ∀ l3 : List · A .
              { append l1 (append l2 l3) ≃ append (append l1 l2) l3 } =
  Λ A . λ l1 . Λ l2 . Λ l3 .
    θ<l1> (Ind · (ListF · A) -(ListFunctor · A) l1)
      [ β{λ ih . λ d . ind-Sum d (λ u . λ x . x) (λ p . ind-Product p (λ h . λ t . λ x . x))} ,
        Λ R . Λ _ . λ ih . λ d .
          θ<d> (ind-Sum d) (λ u . β) (λ p . θ<p> (ind-Product p)
                 (λ h . λ t . ρ+ (ih.1 t) - β)) ].
      
