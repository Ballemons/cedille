import cast.
import recType.
import is.
import top.
import true.

import C.

module D .

PrfAlg ◂ Π F : ★ ➔ ★ . RecFunctor · F ➔ (C · F ➔ ★) ➔ ★ =
  λ F : ★ ➔ ★ . λ fm : RecFunctor · F . λ P : C · F ➔ ★ .
    ι alg : Top .
    ∀ R : ★ . 
    ∀ reveal : Cast · R · (C · F).    
      is · (Π r : R . P (cast · R · (C · F) -reveal r)) (foldU alg) ➔
      Π p : F · R .
      P (in · F -fm (cast · (F · R) · (F · (C · F)) -(fm · R · (C · F) reveal) p)) .

Inductive ◂ Π F : ★ ➔ ★ . RecFunctor · F ➔ C · F ➔ ★ =
  λ F : ★ ➔ ★ . λ fm : RecFunctor · F . λ d : C · F.
    ∀ P : C · F ➔ ★ .
      PrfAlg · F fm · P ➔
      P d .

D ◂ Π F : ★ ➔ ★ . RecFunctor · F ➔ ★ = 
  λ F : ★ ➔ ★ . λ fm : RecFunctor · F . ι x : C · F . Inductive · F fm x .

in' ◂ ∀ F : ★ ➔ ★ . ∀ fm : RecFunctor · F. F · (D · F fm) ➔ D · F fm =
  Λ F . Λ fm . λ d .
    [ in · F -fm
        (cast · (F · (D · F fm)) · (F · (C · F))
            -(fm · (D · F fm) · (C · F) [λ x . x.1 , β]) d) ,
     Λ P . λ palg . palg.2 · (D · F fm)
                      -[λ x . x.1 , β] 
                       [ λ r . r.2 · P palg , β{λ r . r palg}] d].

inAlg ◂ ∀ F : ★ ➔ ★ . ∀ fm : RecFunctor · F. Alg · F · (C · F) · (D · F fm) =
  Λ F . Λ fm . 
    [ β{λ eval . λ p . (in p)} ,
      Λ R . Λ reveal . λ eval . λ p .
        in' · F -fm (cast · (F · R) · (F · (D · F fm)) -(fm · R · (D · F fm)
                      (caste · R · (D · F fm) eval.1
                       -(λ r . ρ ς eval.2 - ρ (rUnfold · F -fm (cast · R · (C · F) -reveal r)).2 - β))) p) ] .


