module C .

import cast.
import recType.
import is.
import top.

foldU ◂ Top ➔ Top = λ alg . β{λ d . d alg} .
inU ◂ Top = β{λ d . λ alg . alg (foldU alg) d}.
inAlgU ◂ Top = β{λ _ . λ d . inU d}.

Alg ◂ (★ ➔ ★) ➔ ★ ➔ ★ ➔ ★ =
  λ F : ★ ➔ ★ . λ C : ★ . λ X : ★ . 
    ι alg : Top . ∀ R : ★ .
      Cast · R · C ➾
      is · (R ➔ X) (foldU alg) ➔
      F · R ➔
      X. 

rF' ◂ (★ ➔ ★) ➔ ★ ➔ ★ = λ F : ★ ➔ ★ . λ C : ★ . ∀ X : ★ . Alg · F · C · X ➔ X .

rF ◂ (★ ➔ ★) ➔ ★ ➔ ★ = λ F : ★ ➔ ★ . λ C : ★ . ι x : rF' · F · C . { x inAlgU ≃ x } .

C ◂ (★ ➔ ★) ➔ ★ = λ F : ★ ➔ ★ . Rec · (rF · F).

rFunctor ◂ ∀ F : ★ ➔ ★ . RecFunctor · F ➔ RecFunctor · (rF · F) =
 Λ F . λ fm . Λ X . Λ Y . λ c .
  [λ x . [Λ A . λ a .
           x.1 · A [β{a} ,
                    Λ R . Λ reveal . λ e . λ d .
                     a.2 · R -(castCompose · R · X · Y reveal c) e d ],
          x.2],
    β] .
        
rFold ◂ ∀ F : ★ ➔ ★ . RecFunctor · F ➾ rF · F · (C · F) ➔ C · F =
  Λ F . Λ fm . cast · (rF · F · (C · F)) · (C · F)
    -(recFold · (rF · F) -(rFunctor · F fm)) .

rUnfold ◂ ∀ F : ★ ➔ ★ . RecFunctor · F ➾ C · F ➔ rF · F · (C · F) =
  Λ F . Λ fm . cast · (C · F) · (rF · F · (C · F))
     -(recUnfold · (rF · F) -(rFunctor · F fm)) .

fold ◂ ∀ F : ★ ➔ ★ . RecFunctor · F ➾ ∀ X : ★ . Alg · F · (C · F) · X ➔ C · F ➔ X =
  Λ F . Λ fm . Λ X . λ alg . λ d . (rUnfold · F -fm d).1 · X alg .

cRec ◂ ∀ F : ★ ➔ ★ . ∀ fm : RecFunctor · F.
       C · F ➔
       rF' · F · (C · F) =
  Λ F . Λ fm . λ t . (rUnfold · F -fm t).1 .

in ◂ ∀ F : ★ ➔ ★ . RecFunctor · F ➾ F · (C · F) ➔ C · F =
  Λ F . Λ fm . λ d .
    rFold · F -fm
      [Λ X . λ alg . alg.2 · (C · F) -(castId · (C · F)) 
                       [fold · F -fm · X alg , β{fold alg} ] d,
       β{λ alg . (alg (fold alg) d)}].

out ◂ ∀ F : ★ ➔ ★ . ∀ fm : RecFunctor · F . C · F ➔ F · (C · F) =
  Λ F . Λ fm . λ x .
    (rUnfold · F -fm x).1 · (F · (C · F))
      [β{λ _ . λ d . d} , Λ R . Λ reveal . λ eval . λ d . cast · (F · R) · (F · (C · F)) -(fm · R · (C · F) reveal) d] .
