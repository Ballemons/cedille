import cast.
import recType.
import top.

nilU ◂ Top = β{λ a . λ f . a}.
consU ◂ Top = β{λ hd . λ tl . λ tl' . λ n . λ c . c hd tl (tl' n c)} .

ListF ◂ ★ ➔ ★ ➔ ★ =
  λ A : ★ .
  λ ListC : ★ .
    ι x : ∀ X : ★ .
      Π nil : X .
      (ι cons : Top . Π a : A . Π p : ListC . Π x : X . (p nil cons ≃ x) ➾ X) ➔
      X .
    x nilU consU ≃ x .

ListFmap ◂ ∀ A : ★ . RecFunctor · (ListF · A) =
  Λ A : ★ . Λ X . Λ Y . λ c .
    [ λ n . [ Λ Z . λ nil . λ cons .
                n.1 · Z nil (λ a . λ p . λ x . Λ e . cons a (cast · X · Y -c p) x -e),
                ρ+ n.2 - β{n} ] ,
              β{λ x . x}]. 
 
%%%%%%%%%%%%%%%%%%%%%%%%%

ListC ◂ ★ ➔ ★ = λ A : ★ . Rec · (ListF · A) . 

ListFold ◂ ∀ A : ★ . (ListF · A) · (ListC · A) ➔ (ListC · A) =
  Λ A : ★ . λ x . cast · (ListF · A · (ListC · A)) · (ListC · A) -(recFold · (ListF · A) -(ListFmap · A)) x .

ListUnfold ◂ ∀ A : ★ . (ListC · A) ➔ ListF · A · (ListC · A) =
  Λ A : ★ . λ x . cast · (ListC · A) · (ListF · A  · (ListC · A)) -(recUnfold · (ListF · A) -(ListFmap · A)) x .

nilC ◂ ∀ A : ★ . ListC · A = Λ A : ★ . ListFold · A [Λ X . λ a . λ f . a , β{nilU}].

consC ◂ ∀ A : ★ . Π a : A . Π tl : ListC · A . Π n : ListC · A . (tl ≃ n) ➾ ListC · A =
  Λ A : ★ . λ a . λ tl . λ n . Λ e .
    ListFold · A [ Λ X . λ nil . λ cons . cons a tl ((ListUnfold · A n).1 · X nil cons) -(ρ e - β) , ρ+ (ListUnfold · A n).2 - β{consU a tl n} ] .
%%%%%%%%%%%%%%%%%%%%%%%%%

ListP ◂ Π A : ★ . ListC · A ➔ ★ =
  λ A : ★ .
  λ lst : ListC · A . ∀ X : ★ . ∀ P : X ➔ ★ .
    ∀ nil : X . P nil ➔
    ∀ cons : ι cons' : Top . Π a : A . Π lst' : ListC · A . Π x : X . (lst' nil cons' ≃ x) ➾ X .
      (Π a : A . Π lst : ListC · A. ∀ x : X . ∀ e : lst nil cons ≃ x . P x ➔ P (cons a lst x -e)) ➔
    P ((ListUnfold · A lst).1 · X nil cons).

nilP ◂ ∀ A : ★ .  ListP · A (nilC · A) = Λ A . Λ X . Λ P . Λ n . λ pn . Λ c . λ pc . pn .

consP ◂ Π A : ★ . Π a : A . Π n : ListC · A . ∀ x : ListC · A . ∀ e : n ≃ x . (ListP · A x) ➔ (ListP · A (consC · A a n x -e))
  = λ A : ★ . λ a . λ n . Λ x . Λ e .
  λ px . Λ X . Λ P . Λ nil . λ pnil . Λ cons . λ pcons .
  pcons a n -((ListUnfold · A x).1 · X nil cons) -(ρ e - β) (px · X · P -nil pnil -cons pcons).

%%%%%%%%%%%%%%%%%%%%%%%%%

List ◂ ★ ➔ ★ = λ A : ★ . ι x : ListC · A . ListP · A x.

nil ◂ ∀ A : ★ . List · A = Λ A : ★ . [ nilC · A , nilP · A ].

consi ◂ ∀ A : ★ . Π a : A . Π p : List · A . Π n : List · A . (p ≃ n) ➾ List · A =
  Λ A : ★ . λ a . λ p . λ n . Λ e . [ consC · A a p n.1 -e , consP · A a p -n.1 -e n.2 ].

elimNati ◂
  Π n : Nat . 
  ∀ P : Nat ➔ ★ .
  P zero ➔
  (Π p : NatC . ∀ n : Nat . ∀ e : p ≃ n . P n ➔ P (suci p n -e)) ➔
  P n
=
  λ n . Λ P . λ pZ . λ pS . 
   ρ ς (NatUnfold n.1).2 - (n.2 · Nat · P -zero pZ -[β{sucC},(λ p . λ n . Λ e . suci p n -(ρ ς (NatUnfold p).2 - e))]
     (λ n . Λ x . Λ e . λ px . pS n -x -(ρ ς (NatUnfold n).2 - e) px)) .

suc ◂ Nat ➔ Nat = λ n . suci n.1 n -β .

elimNat ◂
  Π n : Nat . 
  ∀ P : Nat ➔ ★ .
  P zero ➔
  (Π p : Nat . P p ➔ P (suc p)) ➔
  P n
=
  λ n . Λ P . λ pz . λ ps .
    elimNati n · P pz
      (λ p . Λ n . Λ e . λ pn .
        ρ ς e - (ps (changeType · NatC · Nat p -n -e) (ρ e - pn))) .
