
import ../../../util/RecType.
import Top.

% Try to write some RecType machinery for NatParamF to enable this development
% to go through. Just an indexed functor Cast and RecType equivalent?

NatF ◂ ★ ➔ ★ = λ Nat' : ★ . ∀ X : ★ . X ➔ (Nat' ➔ X ➔ X) ➔ X .

NatFzero ◂ ∀ Nat' : ★ . NatF · Nat' =  Λ Nat' . Λ X . λ z . λ s . z .

NatFmap ◂ RecFunctor · NatF = Λ A . Λ B . λ c . [ λ x . Λ X . λ z . λ s . x · X z (λ a . s (cast · A · B -c a) )  ,
                                λ a . β{a} ].

Nat' ◂ ★ = Rec · NatF .

Nat'Out ◂ Nat' ➔ (NatF · Nat') = cast · Nat' · (NatF · Nat') -(recOut · NatF -NatFmap) .

𝒌 = Nat' ➔ ★ .
NatParamF ◂ 𝒌 ➔ 𝒌 = λ R' : 𝒌 . λ x : Nat' . ∀ A : ★ . ∀ R : A ➔ ★ . ∀ a : A .
  R a ➔ ∀ f : Nat' ➔ A ➔ A . (∀ n : Nat' . ∀ a : A . (R' n) ➔ (R a) ➔ R (f n a)) ➔ R (Nat'Out x · A a f) .

NatCast ◂ 𝒌 ➔ 𝒌 ➔ ★ = λ A : 𝒌 . λ B : 𝒌 .
       ι cast : ∀ n : Nat' . A n ➔ B n . cast ≃ λ x . x.

natcast ◂ ∀ A : 𝒌 . ∀ B : 𝒌 . NatCast · A · B ➾ ∀ n : Nat' . A n ➔ B n =
  Λ A . Λ B . Λ c . Λ n . λ a . (χ (ι _ : A n . B n) - [ a , c.1 -n a { ρ c.2 - β } ]).2 .

NatRecFunctor ◂ (𝒌 ➔ 𝒌) ➔ ★ =
  λ F : 𝒌 ➔ 𝒌 . ∀ X : 𝒌 . ∀ Y : 𝒌 . NatCast · X · Y ➔ NatCast · (F · X) · (F · Y) .

NatRec ◂ (𝒌 ➔ 𝒌) ➔ 𝒌 = λ F : 𝒌 ➔ 𝒌 . λ n : Nat' . ∀ X : 𝒌 . NatCast · (F · X) · X ➾ X n. 

NatrecCast ◂ ∀ F : 𝒌 ➔ 𝒌 . ∀ X : 𝒌 . NatCast · (F · X) · X ➾ NatCast · (NatRec · F) · X =
  Λ F . Λ X . Λ c . [ Λ A . λ d . d · X -c , β{λ a . a} ].

NatrecIn ◂ ∀ F : 𝒌 ➔ 𝒌 . NatRecFunctor · F ➾ NatCast · (F · (NatRec · F)) · (NatRec · F) =
  Λ F . Λ fmap . 
    [ Λ n . λ x . Λ X . Λ c .
      natcast · (F · X) · X -c -n
        (natcast · (F · (NatRec · F)) · (F · X)
          -(fmap · (NatRec · F) · X (NatrecCast · F · X -c)) -n x),
      β{λ a . a} ].

NatrecOut ◂ ∀ F : 𝒌 ➔ 𝒌 . NatRecFunctor · F ➾ NatCast · (NatRec · F) · (F · (NatRec · F)) =
  Λ F . Λ fmap . [Λ n . λ x . x · (F · (NatRec · F)) -(fmap · (F · (NatRec · F)) · (NatRec · F) (NatrecIn · F -fmap)) , β{λ x . x} ].

NatrecFold ◂ ∀ F : 𝒌 ➔ 𝒌 . NatRecFunctor · F ➾ NatCast · (F · (NatRec · F)) · (NatRec · F) = NatrecIn .
NatrecUnfold ◂ ∀ F : 𝒌 ➔ 𝒌 . NatRecFunctor · F ➾ NatCast · (NatRec · F) · (F · (NatRec · F)) = NatrecOut .

NatrecIso1 ◂ ∀ a : Top . NatrecFold (NatrecUnfold a) ≃ a = Λ a . β.
NatrecIso2 ◂ ∀ a : Top . NatrecUnfold (NatrecFold a) ≃ a = Λ a . β.

NatParam ◂ Nat' ➔ ★ = NatRec · NatParamF.

ParamFmap ◂ NatRecFunctor · NatParamF =
  Λ X : 𝒌 . Λ Y : 𝒌 . λ c . [
  (Λ n . λ p .
    Λ A . Λ R .
      Λ a . λ ra .
        Λ f . λ s .
          p · A · R -a ra -f
	    (Λ n' . Λ a' . λ xn' . λ ra' . s -n' -a' (natcast · X · Y -c -n' xn') ra')),
	 β{λ p . p} ].

NatPreSuc ◂ Nat' ➔ NatF · Nat' =
  λ p . Λ X . λ z . λ s . s p ( (cast · Nat' · (NatF · Nat') -(recOut · NatF -NatFmap) p) · X z s) .

Z' ◂ Nat' =  cast · (NatF · Nat') · Nat' -(recFold · NatF -NatFmap) (NatFzero · (Rec · NatF)).
S' ◂ Nat' ➔ Nat' = λ p . cast · (NatF · Nat') · Nat' -(recFold · NatF -NatFmap) (NatPreSuc p) .

Nat ◂ ★ = ι x : Nat' . ι u : (x Z' (λ p . λ r . S' p)) ≃ x . NatParam x .

% what is the "rebuilding equation" for Parigot nats?
% presumably it looks like (n (λ p . λ r . p) Z' = n)

NatrecParamFFold ◂ ∀ n : Nat' . (NatParamF · (NatRec · NatParamF) n) ➔ (NatRec · NatParamF n)
  = natcast · (NatParamF · (NatRec · NatParamF)) · (NatRec · NatParamF) -(NatrecFold · NatParamF -ParamFmap) .

NatrecParamFUnfold ◂ ∀ n : Nat' . (NatRec · NatParamF n) ➔ (NatParamF · (NatRec · NatParamF) n)
  = natcast · (NatRec · NatParamF) · (NatParamF · (NatRec · NatParamF)) -(NatrecUnfold · NatParamF -ParamFmap) .

Z ◂ Nat = [ Z' , [β{Z'} , NatrecParamFFold -Z' (Λ A . Λ R . Λ a . λ ra . Λ f . λ s . ra) ]]  .
S ◂ Nat ➔ Nat = 
  λ n : Nat . [ S' n.1 , [εl (εr β{S' n.1}), NatrecParamFFold -(S' n.1)
    (Λ A . Λ R . Λ a . λ ra . Λ f . λ s . s -n.1 -(Nat'Out n.1 · A a f) n.2.2 (NatrecParamFUnfold -n.1 n.2.2 · A · R -a ra -f s)) ]] .

Ind ◂ ∀ Q : Nat ➔ ★ . (Π x : Nat . Q x ➔ Q (S x)) ➔ Q Z ➔ Π x : Nat . Q x =
   Λ Q . λ s . λ z . λ x .
    ρ ς x.2.1 - (NatrecParamFUnfold -n.1 n.2.2 · Nat' · (λ x : Nat' . ∀ X : ★ . (Π x' : Nat . (x ≃ x') ➔ Q x' ➔ X) ➔ X)
                 -Z'
		   (Λ X . λ s . s Z β z)
		   -(λ p . λ r . S' p)
		   (Λ n' . Λ a' . λ ih . λ p . Λ X . λ s . p · X (λ x' . λ e . λ u . s (S a') (εl (εr (ρ e - (ρ x'.2.1 - β))))))
		   · (Q x)
		   ).
