module TrmC.

import product.
import sum.
import nat.
import cast.
import recType.
import RecTypeI.
import valuation.
import natExtras.
import is.
import top.

foldU1 ◂ Top ➔ Top ➔ Top = λ alg . λ val . β{λ d . d val alg} .
foldU2 ◂ Nat ➔ Top ➔ Top ➔ Top = λ n : Nat . λ alg . λ val . β{λ x . λ d . d (updateValuation' n val x) alg} .
inU ◂ Nat ➔ Top = λ n . β{λ d . λ val . λ alg . alg n (foldU1 alg val) (foldU2 n alg val) d}.
inAlgU ◂ Nat ➔ Top = λ n . β{ λ _ . λ _ . λ d . inU n d}.
varU ◂ Nat ➔ Top = λ n . β{λ val. λ alg . val n (lt-nSn n) }.
varValuationU ◂ Nat ➔ Top = λ n . β{λ m . λ _ . varU m}.

TrmAppF ◂ ★ ➔ ★ = λ R1 : ★ . Product · R1 · R1 .
TrmIF ◂ ★ ➔ ★ ➔ ★ =
  λ R1 : ★ . λ R2 : ★ . Sum · (TrmAppF · R1) · R2 .

TrmAlg ◂ (Nat ➔ ★) ➔ (Nat ➔ ★) ➔ ★ =
  λ Trm' : Nat ➔ ★ . λ X : Nat ➔ ★ .
  ι alg : Top .
    Π n : Nat . ∀ val : Top . ∀ R1 : ★ . ∀ R2 : ★ . 
    Cast · R1 · (Trm' n) ➾ 
    Cast · R2 · (Trm' (S n)) ➾ 
    Π e1 : is · (R1 ➔ X n) (foldU1 alg val).
    Π e2 : is · (X (S n) ➔ R2 ➔ X (S n)) (foldU2 n alg val).
    TrmIF · R1 · R2 ➔ 
    X n.

TrmF' ◂ (Nat ➔ ★) ➔ (Nat ➔ ★) =
  λ Trm' : Nat ➔ ★ . λ n : Nat .
    ι x : ∀ X : Nat ➔ ★ . Valuation' n · X ➔ TrmAlg · Trm' · X ➔ X n .
    { x (varValuationU n) inAlgU ≃ x } .

Trm' ◂ Nat ➔ ★ = Reci · Nat · TrmF' .

TrmFFun' ◂ RecFunctori · Nat · TrmF' =
  Λ X . Λ Y . λ c .
    [ Λ n . λ u .
      [ Λ Z . λ val . λ alg .
          u.1 · Z val
          [ β{alg} ,
            λ n . Λ val . Λ R1 . Λ R2 . Λ c1 . Λ c2 . λ e1 . λ e2 . λ d .
             alg.2 n -val · R1 · R2 -[λ r . casti · Nat · X · Y -c -n (cast · R1 · (X n) -c1 r), β]
                             -[λ r . casti · Nat · X · Y -c -(S n) (cast · R2 · (X (S n)) -c2 r) , β]
                              e1 e2 d],
         u.2],
       β] .

TrmIFFun ◂ ∀ R1 : ★ . ∀ R2 : ★ . ∀ R1' : ★ . ∀ R2' : ★ . Cast · R1 · R1' ➔ Cast · R2 · R2' ➔ Cast · (TrmIF · R1 · R2) · (TrmIF · R1' · R2') =
  Λ R1 . Λ R2 . Λ R1' . Λ R2' . λ c1 . λ c2 .
    caste · (TrmIF · R1 · R2) · (TrmIF · R1' · R2')
      (λ d . d.1 · (TrmIF · R1' · R2')
              (λ p . p.1 · (TrmIF · R1' · R2')
                      (λ a . λ b . in1 · (TrmAppF · R1') · R2'
                                    (pair · R1' · R1' (cast · R1 · R1' -c1 a) (cast · R1 · R1' -c1 b))))
              (λ e . in2 · (TrmAppF · R1') · R2' (cast · R2 · R2' -c2 e)))
      -(λ d .
          θ<d> (ind-Sum · (TrmAppF · R1) · R2 d)
            (λ a . θ<a> (ind-Product · R1 · R1 a) (λ e . λ f . β))
            (λ a . β))            
.
    
TrmFold' ◂ ∀ n : Nat . TrmF' · Trm' n ➔ Trm' n =
  casti · Nat · (TrmF' · Trm') · Trm' -(recFoldi · Nat · TrmF' -TrmFFun') . 

TrmUnfold' ◂ ∀ n : Nat . Trm' n ➔ TrmF' · Trm' n = 
  casti · Nat · Trm' · (TrmF' · Trm') -(recUnfoldi · Nat · TrmF' -TrmFFun') . 

fold' ◂ ∀ X : Nat ➔ ★ . TrmAlg · Trm' · X ➔ ∀ n : Nat . Valuation' n · X ➔ Trm' n ➔ X n =
  Λ X . λ alg . Λ n . λ val . λ t . (TrmUnfold' -n t).1 · X val alg .

in' ◂ Π n : Nat . TrmIF · (Trm' n) · (Trm' (S n)) ➔ Trm' n =
  λ n . λ d .
    TrmFold' -n
      [Λ X . λ val . λ alg .
         alg.2 n -β{val} · (Trm' n) · (Trm' (S n))
             -[ λ x . x , β] -[λ x . x , β]
{- compare:
             [foldU1 · X alg -n val , β{fold' alg val}] -}
             [fold' · X alg -n val , β{foldU1 alg val}]
             [λ x . fold' · X alg -(S n) (updateValuation' n · X val x) , β{foldU2 n alg val}]
             d,
        β{λ val . λ alg . alg n (fold' alg val) (λ x . fold' alg (updateValuation' n val x)) d}].

inAlg' ◂ TrmAlg · Trm' · Trm' =
  [ β{λ n . λ e1 . λ e2 . λ d . in' n (cast d)} ,
    λ n . Λ val . Λ R1 . Λ R2 . Λ reveal1 . Λ reveal2 . λ e1 . λ e2 . λ d .
    in' n (cast · (TrmIF · R1 · R2) · (TrmIF · (Trm' n) · (Trm' (S n)))
            -(TrmIFFun · R1 · R2 · (Trm' n) · (Trm' (S n)) reveal1 reveal2) d)] .


{-
embedTrm' ◂ Π n : Nat . Π m : Nat . Trm' n ➔ Trm' (add n m) =
  λ n . λ m . 
  λ t . TrmFold' -(add n m)
    [Λ X . λ val . λ alg . 
      (TrmUnfold' -n t).1 · (λ n : Nat . X (add n m))
        (λ k . λ p . val (add k m) (add-mono k n m p))
        [ ● ,
          λ n . Λ val . Λ R1 . Λ R2 . Λ reveal1 . Λ reveal2 . λ e1 . λ e2 . λ d .
            d.1 · (X (add n m))
              (λ a . a.1 · (X (add n m))
                (λ fr . λ ar . ●))
              (λ a . ●)],
     ●].
-}

var' ◂ Π n : Nat . Trm' (S n) =
  λ n . 
     TrmFold' -(S n)
        [Λ X . λ val . λ alg . val n (lt-nSn n), β{varU n}].

{-
embedTrm' ◂ Π n : Nat . Trm' n ➔ Π m : Nat . Lt n m ➔ Trm' m =
  λ n . λ t .
  (TrmUnfold' -n t).1 · (λ n : Nat . Π m : Nat . Lt n m ➔ Trm' m)
          (λ m . λ p . λ n' . λ p' .
            (lt-S (S m) n' p').1 · (Trm' n') (λ pm . λ e . ρ ς e - (var' pm)))
          ● .
-}

varValuation ◂ Π n : Nat . Valuation' n · Trm' =
 λ n . λ m . λ _ . var' m .

exampleTrm' ◂ Trm' Z = in' Z (in2 · (TrmAppF · (Trm' Z)) · (Trm' (S Z))
                                (var' Z)) .

