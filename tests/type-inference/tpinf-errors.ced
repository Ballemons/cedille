module tpinf-errors .

import list  .
import nat   .
import sigma .
import true  .
import bool  .

-- Reference
-- ==================================================

ok-length
  ◂ ∀ A : ★ . List · A ➔ Nat
  = Λ A . λ l . ListRec l · Nat (λ _ . S) Z .

-- Inapplicability errors
-- ==================================================

test-bot
  ◂ (∀ X : ★ . X) ➔ Nat ➔ Nat
  = λ bot . λ n . bot n .

-- Inapplicability errors will be shown with the proper head type, rather than
-- with generated meta-variables


-- Unmatchable
-- ==================================================

-- meta-vars-match could return a list of tagged-vals for finer control
-- over what gets displayed (for example, zooming in on the part of
-- the types that are not equal)

-- "bound var in solutions" - maybe show ?X = B a in separate tagged-val?
test-proj2 = Λ A : ★. Λ B : A ➔ ★. λ s : Sigma · A · B.
               s.1 (λ a : A. λ b : B a. b).

-- incompatible solutions
test-id ◂ (∀ A : ★ . (A ➔ A) ➔ A) ➔ Nat
        = λ fix . fix (λ x : Bool . Z) .
-- there's some funny unfolding going on that doesn't seem part of TAI
-- [[file:../../src/classify.agda::check-termi%20(Lam%20pi%20l%20pi'%20x%20(SomeClass%20atk)%20t)%20nothing%20=][check-term]]
-- The body type is synthesized and the definition of Nat unfolded

-- arrow type
test-arrq
  ◂ (∀ A : ★ . (A ➾ A) ➔ A) ➔ Nat
  = λ res . res S  .

-- "catch-all" - more obviously not equal
--
-- When displaying the mismatch between expected and computed types, I print
-- both in hnf. In contrast, well-typed applications show a "less" normalized
-- type
test-length1
  ◂ ∀ A : ★ . List · A ➔ Nat
  = Λ A . λ l . ListRec {- · A -} Z {- · Nat-} (λ _ . S) Z .

-- "catch-all"
test-length2
  ◂ ∀ A : ★ . List · A ➔ Nat
  = Λ A . λ l . ListRec {- · A -} Nil {- · Nat-} (λ _ . S) Z .

{- meta-vars-match might need to return L tagged-val to have more interesting / useful information
 - for match failures
 -}

-- Misc
-- ==================================================

-- kind-checking meta-vars
-- --------------------------------------------------

-- strange highlighting issue that comes from the spans generated by
-- kind-checkin solutions
test-check-sol
  ◂ ∀ A1 : ★ . ∀ A2 : ★ . ∀ B1 : A1 ➔ ★ . ∀ B2 : A2 ➔ ★ .
    ∀ C1 : (A1 ➔ ★) ➔ ★ . C1 · B1
    ➔ (∀ B2 : A2 ➔ ★ . ∀ C2 : (A2 ➔ ★) ➔ ★ . C2 · B2 ➔ C2 · B2)
    ➔ C1 · B1
  = Λ A1 . Λ A2 . Λ B1 . Λ B2 . Λ C1 . λ c1 . λ fc2 .
      fc2 {- · B2 -} c1 .


-- unsolved mvars
test-unsolved-mvars
  ◂ (∀ Y : ★ . ∀ X : ★ . X ➔ ∀ Z : ★ . X ➔ Nat) ➔ Nat ➔ Nat
  = λ f . λ x . f x x .
