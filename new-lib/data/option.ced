import ../stdcore.
import maybe.
import bool.

module option.

data Option (A: ★): ★ =
| none: Option
| some: A ➔ Option.

castMay2Opt: ∀ A: ★. Cast ·(Maybe ·A) ·(Option ·A)
= Λ A.
  [f : Maybe ·A ➔ Option ·A = λ m. μ' m {
    | nothing ➔ none ·A
    | just a ➔ some a}]
- intrCast -f -(λ x. μ' x {nothing ➔ β | just _ ➔ β}).

castOpt2May: ∀ A: ★. Cast ·(Option ·A) ·(Maybe ·A)
= Λ A.
  [f : Option ·A ➔ Maybe ·A = λ o. μ' o {
    | none ➔ nothing ·A
    | some a ➔ just a}]
- intrCast -f -(λ x. μ' x {none ➔ β | some _ ➔ β}).

isNone: ∀ A: ★. Option ·A ➔ Bool = Λ A. λ m. μ' m {none ➔ tt | some _ ➔ ff}.

option: ∀ A: ★. ∀ X: ★. Option ·A ➔ X ➔ (A ➔ X) ➔ X
= Λ A. Λ X. λ m. λ x. λ f. μ' m {none ➔ x | some a ➔ f a}.

someInj: ∀ A: ★. Π a1: A. Π a2: A. {some a1 ≃ some a2} ➔ {a1 ≃ a2}
= Λ A. λ a1. λ a2. λ eq.
  ρ eq @ x . { option x a1 (λ z. z) ≃ option (some a2) a2 (λ z. z) }
- β.

optionMap : ∀ A: ★. ∀ B: ★. (A ➔ B) ➔ Option ·A ➔ Option ·B
= Λ A. Λ B. λ f. λ m. μ' m {
  | none ➔ none ·B
  | some x ➔ some (f x)
  }.

optionBind : ∀ A: ★. ∀ B: ★. Option ·A ➔ (A ➔ Option ·B) ➔ Option ·B
= Λ A. Λ B. λ m. λ f. μ' m {
  | none ➔ none ·B
  | some x ➔ f x
  }.
