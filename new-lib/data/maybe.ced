module maybe.

import bool.

data Maybe (A: ★): ★ =
| nothing: Maybe
| just: A ➔ Maybe.

isNothing: ∀ A: ★. Maybe ·A ➔ Bool = Λ A. λ m. μ' m {nothing ➔ tt | just _ ➔ ff}.

maybe: ∀ A: ★. ∀ X: ★. Maybe ·A ➔ X ➔ (A ➔ X) ➔ X
= Λ A. Λ X. λ m. λ x. λ f. μ' m {nothing ➔ x | just a ➔ f a}.

justInj: ∀ A: ★. Π a1: A. Π a2: A. {just a1 ≃ just a2} ➔ {a1 ≃ a2}
= Λ A. λ a1. λ a2. λ eq.
  ρ eq @ x . { maybe x a1 (λ z. z) ≃ maybe (just a2) a2 (λ z. z) }
- β.

maybeMap : ∀ A: ★. ∀ B: ★. (A ➔ B) ➔ Maybe ·A ➔ Maybe ·B
= Λ A. Λ B. λ f. λ m. μ' m {
  | nothing ➔ nothing ·B
  | just x ➔ just (f x)
  }.

maybeBind : ∀ A: ★. ∀ B: ★. Maybe ·A ➔ (A ➔ Maybe ·B) ➔ Maybe ·B
= Λ A. Λ B. λ m. λ f. μ' m {
  | nothing ➔ nothing ·B
  | just x ➔ f x
  }.

justInj : ∀ A : ★ . ∀ a : A . ∀ a' : A . { just a ≃ just a' } ➾ { a ≃ a'} =
  Λ A . Λ a . Λ a' . Λ u .
    χ {μ' (just a) { just x ➔ x | nothing ➔ nothing }  ≃ a'} - ρ u - β.
