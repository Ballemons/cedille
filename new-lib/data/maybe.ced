module maybe.

data Maybe (A: ★): ★ =
  | nothing: Maybe
  | just: A ➔ Maybe.

maybeMap : ∀ A: ★. ∀ B: ★. (A ➔ B) ➔ Maybe ·A ➔ Maybe ·B
  = Λ A. Λ B. λ f. λ m. μ' m {
  | nothing ➔ nothing ·B
  | just x ➔ just (f x)
  }.

maybeBind : ∀ A: ★. ∀ B: ★. Maybe ·A ➔ (A ➔ Maybe ·B) ➔ Maybe ·B
= Λ A. Λ B. λ m. λ f. μ' m {
  | nothing ➔ nothing ·B
  | just x ➔ f x
  }.

justInj : ∀ A : ★ . ∀ a : A . ∀ a' : A . { just a ≃ just a' } ➾ { a ≃ a'} =
  Λ A . Λ a . Λ a' . Λ u .
    χ {μ' (just a) { just x ➔ x | nothing ➔ nothing }  ≃ a'} - ρ u - β.
