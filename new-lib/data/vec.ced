module vec.

import nat.

data Vec (A: ★): Nat ➔ ★ =
  | vnil: Vec zero
  | vcons: ∀ n: Nat. A ➔ Vec n ➔ Vec (succ n).

vtail : ∀ A: ★. ∀ m: Nat. Vec ·A (succ m) ➔ Vec ·A m
= Λ A. Λ m. λ xs. (μ' xs @(λ i: Nat. λ x: Vec ·A i. {i ≃ succ m} ➾ Vec ·A (pred i)) {
  | vnil ➔ Λ eq. δ - eq
  | vcons -m x xs ➔ Λ _. xs
  }) -β.

vappend : ∀ A: ★. ∀ m: Nat. ∀ n: Nat. Vec ·A m ➔ Vec ·A n ➔ Vec ·A (add m n)
= Λ A. Λ m. Λ n. λ xs. λ ys. μ vappendYs. xs @(λ i: Nat. λ x: Vec ·A i. Vec ·A (add i n)) {
| vnil ➔ ys
| vcons -m x xs ➔ vcons -(add m n) x (vappendYs -m xs)
}.

vmap : ∀ A: ★. ∀ B: ★. (A ➔ B) ➔ ∀ n: Nat. Vec ·A n ➔ Vec ·B n
= Λ A. Λ B. λ f. Λ n. λ xs. μ vmap. xs @(λ i: Nat. λ _: Vec ·A i. Vec ·B i) {
  | vnil ➔ vnil ·B
  | vcons -n x xs ➔ vcons -n (f x) (vmap -n xs)
  }.

vlookup : ∀ A: ★. ∀ n: Nat. Vec ·A n ➔ Π m: Nat. Lt m n ➾ A
= Λ A. Λ n. λ xs. μ look. xs @(λ i: Nat. λ _: Vec ·A i. Π m: Nat. Lt m i ➾ A) {
  | vnil ➔ λ m. Λ eq. δ - eq
  | vcons -n x xs ➔ λ m. μ' m @(λ x: Nat. Lt x (succ n) ➾ A) {
    | zero ➔ Λ _. x
    | succ m ➔ Λ eq. look -n xs m -eq
    }
  }.
