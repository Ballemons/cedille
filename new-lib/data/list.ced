module list.

import bool.
import nat.
import maybe.

import ../core/cast.

data List (A: ★): ★ =
  | nil: List
  | cons: A ➔ List ➔ List.

head : ∀ A: ★. List ·A ➔ Maybe ·A
= Λ A. λ xs. μ' xs { nil ➔ nothing ·A | cons x xs ➔ just x}.

isCons : ∀ A: ★. List ·A ➔ Bool
= Λ A. λ xs. μ' xs { nil ➔ ff | cons _ _ ➔ tt}.

isNil = Λ A: ★. λ xs: List ·A. not (isCons xs).

headSafe : ∀ A: ★. Π xs: List ·A. {isCons xs ≃ tt} ➔ A
= Λ A. λ xs. μ' xs {nil ➔ λ eq. δ - eq | cons x xs ➔ λ eq. x}.

tailCV : ∀ A: ★. ∀ L: ★. Is/List ·A ·L ➾ L ➔ L
= Λ A. Λ L. Λ is. λ xs. μ'<is> xs {nil ➔ xs | cons x xs ➔ xs}.

tail = Λ A: ★. tailCV ·A -(is/List ·A).

map : ∀ A: ★. ∀ B: ★. (A ➔ B) ➔ List ·A ➔ List ·B
  = Λ A. Λ B. λ f. λ xs. μ mapF. xs {
  | nil ➔ nil ·B
  | cons x xs ➔ cons (f x) (mapF xs)
  }.

length : ∀ A: ★. List ·A ➔ Nat
  = Λ A. λ xs. μ len. xs {
  | nil ➔ zero
  | cons x xs ➔ succ (len xs)
  }.

append : ∀ A: ★. List ·A ➔ List ·A ➔ List ·A
  = Λ A. λ xs. λ ys. μ appYs. xs {
  | nil ➔ ys
  | cons x xs ➔ cons x (appYs xs)
  }.

lookup : ∀ A: ★. List ·A ➔ Nat ➔ Maybe ·A
  = Λ A. λ xs. μ l. xs {
  | nil ➔ λ _. nothing ·A
  | cons x xs ➔ λ n. μ' n {zero ➔ just x | succ n ➔ l xs n}
  }.

foldl : ∀ A: ★. ∀ B: ★. (A ➔ B ➔ A) ➔ A ➔ List ·B ➔ A
  = Λ A. Λ B. λ f. λ e. λ xs. μ foldFE. xs {
  | nil ➔ e
  | cons x xs ➔ f (foldFE xs) x
  }.

filter : ∀ A : ★ . (A ➔ Bool) ➔ List ·A ➔ List ·A
  = Λ A . λ p . λ l .
    μ filter. l {
    | nil ➔ nil ·A
    | cons x xs ➔ [ r = filter xs ] - ite (p x) (cons x r) r }.

take : ∀ A: ★. Nat ➔ List ·A ➔ List ·A
= Λ A. λ n. μ take. n {
  | zero ➔ λ xs. nil ·A
  | succ n ➔ λ xs. μ' xs {
    | nil ➔ xs
    | cons x xs ➔ cons x (take n xs)
    }
  }.

dropCV : ∀ A: ★. ∀ L: ★. Is/List ·A ·L ➾ Nat ➔ L ➔ L
= Λ A. Λ L. Λ is. λ n. μ drop. n {
  | zero ➔ λ xs. xs
  | succ n ➔ λ xs. tailCV -is xs
  }.

drop = Λ A: ★. dropCV -(is/List ·A).

-- List and Cast
lCastMap : CastMap ·List
= Λ A. Λ B. Λ c.
  [f : List ·A ➔ List ·B
    = λ xs. μ rec. xs {
      | nil ➔ nil ·B
      | cons x xs ➔ cons (elimCast -c x) (rec xs)
    }]
- [pf : Π xs: List ·A. {f xs ≃ xs}
    = λ xs. μ ih. xs {
      | nil ➔ β
      | cons x xs ➔ ρ (ih xs) @ y. {cons x y ≃ cons x xs} - β
      }]
- intrCast -f -pf.

lcastMap : ∀ A: ★. ∀ B: ★. Cast ·A ·B ➾ List ·A ➔ List ·B
= Λ A. Λ B. Λ c. castMap -lCastMap -c.

singleton : ∀ A : ★ . A ➔ List · A
= Λ A . λ a . cons a (nil · A).
