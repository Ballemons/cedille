module list.

import bool.
import nat.
import option.

import ../core/cast.

data List (A: ★): ★ =
  | nil: List
  | cons: A ➔ List ➔ List.

head : ∀ A: ★. List ·A ➔ Option ·A
= Λ A. λ xs. σ xs { nil ➔ none ·A | cons x xs ➔ some x}.

isCons : ∀ A: ★. List ·A ➔ Bool
= Λ A. λ xs. σ xs { nil ➔ ff | cons _ _ ➔ tt}.

isNil = Λ A: ★. λ xs: List ·A. not (isCons xs).

headSafe : ∀ A: ★. Π xs: List ·A. {isCons xs ≃ tt} ➔ A
= Λ A. λ xs. σ xs {nil ➔ λ eq. δ - eq | cons x xs ➔ λ eq. x}.

tailCV : ∀ A: ★. ∀ L: ★. Is/List ·A ·L ➾ L ➔ L
= Λ A. Λ L. Λ is. λ xs. σ<is> xs {nil ➔ xs | cons x xs ➔ xs}.

tail = Λ A: ★. tailCV ·A -(is/List ·A).

singleton : ∀ A : ★ . A ➔ List · A
= Λ A . λ a . cons a (nil · A).

map : ∀ A: ★. ∀ B: ★. (A ➔ B) ➔ List ·A ➔ List ·B
  = Λ A. Λ B. λ f. λ xs. μ mapF. xs {
  | nil ➔ nil ·B
  | cons x xs ➔ cons (f x) (mapF xs)
  }.

length : ∀ A: ★. List ·A ➔ Nat
  = Λ A. λ xs. μ len. xs {
  | nil ➔ zero
  | cons x xs ➔ succ (len xs)
  }.

append : ∀ A: ★. List ·A ➔ List ·A ➔ List ·A
  = Λ A. λ xs. λ ys. μ appYs. xs {
  | nil ➔ ys
  | cons x xs ➔ cons x (appYs xs)
  }.

lookup : ∀ A: ★. List ·A ➔ Nat ➔ Option ·A
  = Λ A. λ xs. μ l. xs {
  | nil ➔ λ _. none ·A
  | cons x xs ➔ λ n. σ n {zero ➔ some x | succ n ➔ l xs n}
  }.

foldl : ∀ A: ★. ∀ B: ★. (A ➔ B ➔ A) ➔ A ➔ List ·B ➔ A
  = Λ A. Λ B. λ f. λ e. λ xs. μ foldFE. xs {
  | nil ➔ e
  | cons x xs ➔ f (foldFE xs) x
  }.

reverse : ∀ A: ★. List ·A ➔ List ·A
= Λ A. λ xs. μ rev. xs {
  | nil ➔ nil ·A
  | cons x xs ➔ append (rev xs) (cons x (nil ·A))
  }.

filter : ∀ A : ★ . (A ➔ Bool) ➔ List ·A ➔ List ·A
  = Λ A . λ p . λ l .
    μ filter. l {
    | nil ➔ nil ·A
    | cons x xs ➔ [ r = filter xs ] - ite (p x) (cons x r) r }.

take : ∀ A: ★. Nat ➔ List ·A ➔ List ·A
= Λ A. λ n. μ take. n {
  | zero ➔ λ xs. nil ·A
  | succ n ➔ λ xs. σ xs {
    | nil ➔ xs
    | cons x xs ➔ cons x (take n xs)
    }
  }.

dropCV : ∀ A: ★. ∀ L: ★. Is/List ·A ·L ➾ Nat ➔ L ➔ L
= Λ A. Λ L. Λ is. λ n. μ drop. n {
  | zero ➔ λ xs. xs
  | succ n ➔ λ xs. drop n (tailCV -is xs)
  }.

drop = Λ A: ★. dropCV -(is/List ·A).

repeat : ∀ A: ★. A ➔ Nat ➔ List ·A
= Λ A. λ x. λ n. μ repeat. n {
  | zero ➔ nil ·A
  | succ n ➔ cons x (repeat n)
  }.

concat : ∀ A: ★. List ·(List ·A) ➔ List ·A
= Λ A. λ xss. μ concat. xss {
  | nil ➔ nil ·A
  | cons xs xss ➔ append xs (concat xss)
  }.

eqList : ∀ A: ★. ∀ B : ★ . (A ➔ B ➔ Bool) ➔ List ·A ➔ List ·B ➔ Bool
= Λ A. Λ B . λ eq. λ xs. μ eqList. xs {
  | nil ➔ λ ys. isNil ys
  | cons x xs ➔ λ ys. σ ys {
    | nil ➔ ff
    | cons y ys ➔ and (eq x y) (eqList xs ys)
    }
  }.

-- List and Cast
lCastMap : CastMap ·List
= Λ A. Λ B. Λ c.
  [f : List ·A ➔ List ·B
    = λ xs. μ rec. xs {
      | nil ➔ nil ·B
      | cons x xs ➔ cons (elimCast -c x) (rec xs)
    }]
- [pf : Π xs: List ·A. {f xs ≃ xs}
    = λ xs. μ ih. xs {
      | nil ➔ β
      | cons x xs ➔ ρ (ih xs) @ y. {cons x y ≃ cons x xs} - β
      }]
- intrCast -f -pf.

lcastMap : ∀ A: ★. ∀ B: ★. Cast ·A ·B ➾ List ·A ➔ List ·B
= Λ A. Λ B. Λ c. castMap -lCastMap -c.

absNil : ∀ L : ★ . ∀ A : ★ . Is/List · A · L ➾ L ➔ L =
  Λ L . Λ A . Λ il . λ l .
    [projNil = λ l : L . μ projNil . (to/List -il l)
                 @ (λ l : List · A . Π l' : L . { l ≃ l' } ➾ L)
                 { nil ➔ λ l' . Λ u . φ ς u - l' { nil }
                 | cons x xs ➔ λ l' . Λ u . projNil xs (σ<il> l' @ (λ l' : List · A . { cons x xs ≃ l' } ➾ L)
                                                        { nil ➔ Λ v . δ - v
                                                        | cons y ys ➔ Λ v . ys} -u)
                                                        -(σ<il> l' @ (λ l' : List · A . { cons x xs ≃ l' } ➾
                                                              { xs ≃ σ l' { nil ➔ λ x . x
                                                                           | cons y ys ➔ ys}})
                                                          { nil ➔ Λ v . δ - v 
                                                          | cons y ys ➔ Λ v . ρ v @ x. {tail x ≃ ys} - β} -u)}
                 l -β] - 
    φ (μ projNilEq . (to/List -il l)
         { nil ➔ β
         | cons x xs ➔ ρ+ (projNilEq xs) - β}) - projNil l {nil}.

