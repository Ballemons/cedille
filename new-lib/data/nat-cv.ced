module nat-cov.

import nat.
import nat-thms.
import bool.

import ../core/view.

cvFromLte : ∀ N: ★. ∀ is: Is/Nat ·N. ∀ n: N. Π m: Nat.
  [n' = to/Nat -is n] - Lte m n' ➾ N
= Λ N. Λ is. Λ n. λ m. Λ pf.
  [n' = to/Nat -is n]
- [x = lteEAdd m n' pf]
- [eq : {minus n x ≃ m}
     = ρ (ς x.2)                @ z. {minus z x ≃ m}
     - ρ (minusAddCancel x.1 m) @ z. {z ≃ m}
     - β]
- φ eq - (minusCV -is n x.1) {m}.

_ : {cvFromLte ≃ λ x. x} = β.

zeroCV : ∀ N: ★. Is/Nat ·N ➾ N ➾ N
= Λ N. Λ is. Λ n.
  [n' = to/Nat -is n]
- cvFromLte -is -n zero -β.

_ : {zeroCV ≃ zero} = β.

halfGenCV : ∀ N: ★. Is/Nat ·N ➾ Bool ➔ N ➔ N
= Λ N. Λ is. λ b. λ n.
  [n' = to/Nat -is n]
- cvFromLte -is -n (halfGen b n') -(lteHalf b n').

_ : {halfGenCV ≃ halfGen} = β.

divCV : ∀ N: ★. Is/Nat ·N ➾ N ➔ Nat ➔ N
= Λ N. Λ is. λ m. λ n.
  [m' = to/Nat -is m]
- cvFromLte -is -m (div m' n) -(lteDiv m' n).

_ : {divCV ≃ div} = β.

remCVGen : ∀ N1: ★. ∀ N2: ★. Is/Nat ·N1 ➾ Is/Nat ·N2 ➾ N1 ➔ N2 ➔ ι _: N1. N2
= Λ N1. Λ N2. Λ is1. Λ is2. λ m. λ n.
  [m' = to/Nat -is1 m] - [n' = to/Nat -is2 n] -
    [ cvFromLte -is1 -m (rem m' n') -(lteRem1 m' n')
    , cvFromLte -is2 -n (rem m' n') -(lteRem2 m' n') ].

remCV1 : ∀ N: ★. Is/Nat ·N ➾ N ➔ Nat ➔ N
= Λ N. Λ is. λ m. λ n. (remCVGen -is -is/Nat m n).1.

remCV2 : ∀ N: ★. Is/Nat ·N ➾ Nat ➔ N ➔ N
= Λ N. Λ is. λ m. λ n. (remCVGen -is/Nat -is m n).2.

_ : {remCVGen ≃ rem} = β.

gcd : Nat ➔ Nat ➔ Nat
  = λ m. μ gcdM. m {
  | zero ➔ λ n. n
  | succ m ➔ [m' = to/Nat -isType/gcdM m] - λ n. μ gcdN. n {
    | zero ➔ succ m'
    | succ n ➔ [n' = to/Nat -isType/gcdN n]
    - ite (gte (succ m') (succ n'))
        (gcdM (minusCV -isType/gcdM m n') (succ n'))
        (gcdN (minusCV -isType/gcdN n m'))
    }
  }.
