module nat-thms.

import ../nat.
import ../bool.
import ../../lambda/bot.
import ../sum.

-- basic properties of constructors
neqZS : ∀ n: Nat. {zero ≃ succ n} ➔ Bot
  = Λ n. λ eq. δ - eq.

succInj : ∀ m: Nat. ∀ n: Nat. {succ m ≃ succ n} ➾ {m ≃ n}
  = Λ m. Λ n. Λ eq. ρ eq @ x. {pred x ≃ pred (succ n)} - β.

succAcyc : Π m: Nat. {succ m ≃ m} ➔ Bot
  = λ m. μ acyc. m @(λ x: Nat. {succ x ≃ x} ➔ Bot) {
  | zero ➔ λ eq. neqZS -zero (ς eq)
  | succ m ➔ λ eq. acyc m (ρ eq @ x. {pred x ≃ pred (succ m)} - β)
  }.

-- properties of add
addZRight : Π n: Nat. {add n zero ≃ n}
  = λ n. μ ih. n @(λ x: Nat. {add x zero ≃ x}) {
  | zero ➔ β
  | succ n ➔ ρ (ih n) @ x. {succ x ≃ succ n} - β
  }.

addSRight : Π m: Nat. Π n: Nat. {add m (succ n) ≃ succ (add m n)}
  = λ m. λ n. μ ih. m @(λ x: Nat. {add x (succ n) ≃ succ (add x n)}) {
  | zero ➔ β
  | succ m ➔ ρ (ih m) @ x. {succ x ≃ succ (add (succ m) n)} - β
  }.

addInj : Π l: Nat. ∀ m: Nat. ∀ n: Nat. {add l m ≃ add l n} ➾ {m ≃ n}
  = λ l. Λ m. Λ n. μ addInj. l @(λ x: Nat. { add x m ≃ add x n} ➾ {m ≃ n}) {
  | zero ➔ Λ eq. ρ eq - β
  | succ l ➔ Λ eq.
    [l' = to/Nat -isType/addInj l] - [eq' = succInj -(add l' m) -(add l' n) -eq]
  - addInj l -eq'
  }.

addComm : Π m: Nat. Π n: Nat. {add m n ≃ add n m}
  = λ m. λ n. μ ih. m @(λ x: Nat. {add x n ≃ add n x}) {
  | zero ➔ ς (addZRight n)
  | succ m ➔ [eq = ih m]
  - ρ (addSRight n (to/Nat -isType/ih m)) @ x. {succ (add m n) ≃ x}
  - ρ eq                                  @ x. {succ x         ≃ succ (add n m)}
  - β
  }.

addAssoc : Π l: Nat. Π m: Nat. Π n: Nat. {add l (add m n) ≃ add (add l m) n}
  = λ l. λ m. λ n. μ ih. l @(λ x: Nat. {add x (add m n) ≃ add (add x m) n}) {
  | zero ➔ β
  | succ l ➔ ρ (ih l) @ x . {succ x ≃ succ (add (add l m) n)} - β
  }.

addIsZero : Π m: Nat. Π n: Nat. {add m n ≃ zero} ➔ {m ≃ zero}
= λ m. λ n. μ' m @(λ x: Nat. {add x n ≃ zero} ➔ {x ≃ zero}) {
  | zero ➔ Λ _. β
  | succ m ➔ λ eq. δ - eq
  }.

-- properties about minus
minusPLeft : Π m: Nat. Π n: Nat. {minus (pred m) n ≃ pred (minus m n)}
  = λ m. λ n. μ ih. n @(λ x: Nat. {minus (pred m) x ≃ pred (minus m x)}) {
  | zero ➔ β
  | succ n ➔ ρ (ih n) @ x. {pred x ≃ pred (pred (minus m n))} - β
  }.

minusSS : Π m: Nat. Π n: Nat. {minus (succ m) (succ n) ≃ minus m n}
  = λ m. λ n. ρ ς (minusPLeft (succ m) n) @ x. {x ≃ minus m n} - β.

minusZLeft : Π n: Nat. {minus zero n ≃ zero}
  = λ n. μ ih. n @(λ x: Nat. {minus zero x ≃ zero}) {
  | zero ➔ β
  | succ n ➔ ρ (ih n) @ x. {pred x ≃ zero} - β
  }.

minusSLeft : Π l: Nat. Π m: Nat. Π n: Nat. {minus l m ≃ succ n} ➔ {minus (succ l) m ≃ (add num2 n)}
  = λ l. λ m. (μ ih. m @(λ x: Nat. Π l: Nat. Π n: Nat. {minus l x ≃ succ n} ➔ {minus (succ l) x ≃ (add num2 n)}) {
  | zero ➔ λ l. λ n. λ eq. ρ eq @ x . {succ x ≃ add num2 n} - β
  | succ m ➔ λ l. λ n.
    ρ (ς (minusPLeft (succ l) (to/Nat -isType/ih m))) @ x . {minus l (succ m) ≃ succ n} ➔ {x ≃ add num2 n}
  - ρ (ς (minusPLeft l (to/Nat -isType/ih m))) @ x . {x ≃ succ n} ➔ { (minus l m) ≃ add num2 n }
  - μ' l @(λ x: Nat. {minus (pred x) m ≃ succ n} ➔ {minus (pred (succ x)) m ≃ add num2 n}) {
    | zero ➔
      ρ (minusZLeft (to/Nat -isType/ih m)) @ x. {x ≃ succ n} ➔ {minus (pred (succ zero)) m ≃ add num2 n}
    - λ eq. δ - eq
    | succ l ➔ λ eq. ih m l n eq
    }
  }) l.

minusNotSucc : Π l: Nat. Π m: Nat. Π n: Nat. Not ·{minus m n ≃ succ (add l m)}
  = λ l. λ m. λ n. (μ ih. n @(λ x: Nat. Π l: Nat. Π m: Nat. Not ·{minus m x ≃ succ (add l m)}) {
  | zero ➔ λ l. λ m.
    ρ (addComm zero m)     @ x. {x ≃ add (succ l) m} ➔ False
  - ρ (addComm (succ l) m) @ x. {add m zero ≃ x} ➔ False
  - λ eq. δ - (addInj m -zero -(succ l) -eq)
  | succ n ➔ λ l. λ m. [n' = to/Nat -isType/ih n]
  - μ' m @(λ x: Nat. Not ·{minus x (succ n) ≃ succ (add l x)}) {
    | zero ➔
      ρ (minusZLeft (succ n')) @ x . { x ≃ succ (add l zero) } ➔ False
    - λ eq. δ - eq
    | succ m ➔
      ρ (minusSS m n')  @ x. {x ≃ succ (add l (succ m))} ➔ False
    - ρ (addSRight l m) @ x. {minus m n' ≃ succ x} ➔ False
    - λ eq. ih n (succ l) m eq
    }
  }) l m.

minusAddCancel : Π m: Nat. Π n: Nat. {minus (add m n) m ≃ n}
  = λ m. λ n. μ ih. m @(λ x: Nat. {minus (add x n) x ≃ n}) {
  | zero ➔ β
  | succ m ➔ [m' = to/Nat -isType/ih m] -
    ρ ς (minusPLeft (succ (add m' n)) m') @ x. {x ≃ n}
  - ρ (ih m)                              @ x. {x ≃ n}
  - β
  }.

minusZRightInv : Π m: Nat. Π n: Nat. {minus (succ m) n ≃ succ m} ➔ {n ≃ zero}
  = λ m. μ ih. m @(λ x: Nat. Π n: Nat. {minus (succ x) n ≃ succ x} ➔ {n ≃ zero}) {
  | zero ➔ λ n. μ' n @(λ x: Nat. {minus num1 x ≃ num1} ➔ {x ≃ zero}) {
    | zero ➔ λ _. β
    | succ n ➔
      ρ ς (minusPLeft num1 n) @ x. {x ≃ num1} ➔ {succ n ≃ zero}
    - ρ (minusZLeft n)        @ x. {x ≃ num1} ➔ {succ n ≃ zero}
    - λ eq. δ - eq
    }
  | succ m ➔ [m' = to/Nat -isType/ih m] - λ n.
    μ' n @(λ x: Nat. {minus (add num2 m) x ≃ add num2 m} ➔ {x ≃ zero}) {
    | zero ➔ λ _. β
    | succ n ➔ λ eq.
      [eq' : {minus (succ m') n ≃ succ (succ m')}
        = ρ (minusPLeft (succ (succ m')) n) @ x. {x ≃ succ (succ m')} - eq]
    - minusNotSucc zero (succ m') n eq' ·{succ n ≃ zero}
    }
  }.

minusEq : Π m: Nat. Π n: Nat. {minus m n ≃ zero} ➾ {minus n m ≃ zero} ➾ {m ≃ n}
  = λ m. μ ih. m @(λ x: Nat. Π n: Nat. {minus x n ≃ zero} ➾ {minus n x ≃ zero} ➾ {x ≃ n}) {
  | zero ➔ λ n. Λ _. Λ eq. ρ eq - β
  | succ m ➔ λ n. μ' n @(λ y: Nat. {minus (succ m) y ≃ zero} ➾ {minus y (succ m) ≃ zero} ➾ {succ m ≃ y}) {
    | zero ➔ Λ eq. Λ _. δ - eq
    | succ n ➔ Λ eq1. Λ eq2. [m' = to/Nat -isType/ih m] -
      [eq1' : {minus m n ≃ zero}
        = ρ ς (minusSS m' n) @ x. {x ≃ zero} - eq1]
    - [eq2' : {minus n m ≃ zero}
        = ρ ς (minusSS n m') @ x. {x ≃ zero} - eq2]
    - ρ (ih m n -eq1' -eq2') @ x . {succ x ≃ succ n} - β
    }
  }.

-- equivalent to Sum ·{lte m n ≃ tt} ·{lt n m ≃ tt}
lteDecide : Π m: Nat. Π n: Nat. Sum ·{minus m n ≃ zero} ·{minus (succ n) m ≃ zero}
  = λ m. μ lte1. m @(λ x: Nat. Π n: Nat. Sum ·{minus x n ≃ zero} ·{minus (succ n) x ≃ zero}) {
  | zero ➔ λ n. in1 (minusZLeft n)
  | succ m ➔ λ n. [m' = to/Nat -isType/lte1 m]
  - μ' n @(λ x: Nat. Sum ·{minus (succ m) x ≃ zero} ·{minus (succ x) (succ m) ≃ zero}) {
    | zero ➔ in2 (ρ ς (minusPLeft num1 m') @ x. {x ≃ zero} - ρ (minusZLeft m') @ x. {x ≃ zero} - β)
    | succ n ➔ [decide = lte1 m n]
    - case decide
        (λ eq. in1 (ρ (minusSS m' n) @ x . { x ≃ zero } - eq))
        (λ eq. in2 (ρ (minusSS (succ n) m') @ x . { x ≃ zero } - eq))
    }
  }.

minusGT : Π l: Nat. Π m: Nat. Π n: Nat. {minus (succ l) m ≃ succ n} ➔ {minus m l ≃ zero}
  = λ l. λ m. λ n. λ eq. μ' (lteDecide m l) {
  | in1 pf ➔ pf
  | in2 pf ➔
    [absurd : {succ n ≃ zero}
      = ρ ς eq @ x. {x ≃ zero}
      - ρ ς pf @ x. {minus (succ l) m ≃ x}
      - β]
  - δ - absurd
  }.
