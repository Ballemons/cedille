module nat-cov.

import nat.
import nat-thms.
import bool.

zeroCV : ∀ N: ★. Is/Nat ·N ➾ N ➾ N
= Λ N. Λ is. Λ n.
  [n' = to/Nat -is n]
- φ (minusNNZ n') - (minusCV -is n n') {zero}.

_ : {zeroCV ≃ zero} = β.

halfGenCV : ∀ N: ★. Is/Nat ·N ➾ Bool ➔ N ➔ N
= Λ N. Λ is. λ b. λ n.
  [n' = to/Nat -is n]
- [x = lteEAdd (halfGen b n') n' (lteHalf b n')]
- [eq : {minus n x ≃ halfGen b n}
    = ρ (ς x.2) @ z. {minus z x ≃ halfGen b n}
    - ρ (minusAddCancel x.1 (halfGen b n')) @ z. {z ≃ halfGen b n}
    - β]
- φ eq - (minusCV -is n x.1) {halfGen b n}.

_ : {halfGenCV ≃ halfGen} = β.

divCV : ∀ N: ★. Is/Nat ·N ➾ N ➔ Nat ➔ N
  = Λ N. Λ is. λ m. λ n.
    [m' = to/Nat -is m] - [x = lteEAdd (div m' n) m' (lteDiv m' n)]
  - [eq : {minus m x ≃ div m n}
      = ρ (ς x.2)                      @ z. {minus z x ≃ div m n}
      - ρ (minusAddCancel x.1 (div m' n)) @ z. {z ≃ div m n}
      - β]
  - φ eq - (minusCV -is m x.1) {div m n}.

_ : {divCV ≃ div} = β.

remCV : ∀ N: ★. Is/Nat ·N ➾ N ➔ Nat ➔ N
  = Λ N. Λ is. λ m. λ n.
    [m' = to/Nat -is m] - [x = lteEAdd (rem m' n) m' (lteRem m' n)]
  - [eq : {minus m x ≃ rem m n}
      = ρ (ς x.2)                      @ z. {minus z x ≃ rem m n}
      - ρ (minusAddCancel x.1 (rem m' n)) @ x. {x ≃ rem m n}
      - β]
  - φ eq - minusCV -is m x.1 {rem m n}.

_ : {remCV ≃ rem} = β.

gcd : Nat ➔ Nat ➔ Nat
  = λ m. μ gcdM. m {
  | zero ➔ λ n. n
  | succ m ➔ [m' = to/Nat -isType/gcdM m] - λ n. μ gcdN. n {
    | zero ➔ succ m'
    | succ n ➔ [n' = to/Nat -isType/gcdN n]
    - ite (gte (succ m') (succ n'))
        (gcdM (minusCV -isType/gcdM m n') (succ n'))
        (gcdN (minusCV -isType/gcdN n m'))
    }
  }.
