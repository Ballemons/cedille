module Hastp.

import ../iota-term/RecTypeI.
import ../iota-term/trmC.
import ../iota-term/trmD.
import ../iota-term/trmInduction.
import ../tpinf/tp.
import nat.
import ../iota-term/natExtras.
import bool.
import ../iota-term/valuation.
import product.
import sigma.
import true.
import wSigma2.
import ../iota-term/subst.
import cast.

ctxt-p ◂ Π n : Nat. Trm' n ➔ ★ = λ n : Nat . λ _ : Trm' n . Tp .

ctxt-i ◂ Π n : Nat . Π m : Nat . Π p : Lt m n .
          ctxt-p n (var' m -n -p) ➔ ★ =
 trivValuationInv · ctxt-p.
 
ctxt ◂ Nat ➔ ★ = 
  λ n : Nat .
   Valuation n · ctxt-p · ctxt-i .

PersistencePrf ◂ ∀ n : Nat . Persistent · (λ n' : Nat . λ _ : Trm' n' . Tp) = ● .

lookup-ctxt ◂ ∀ n : Nat . Π m : Nat . Lt m n ➾ ctxt n ➔ Tp =
  Λ n . λ m . Λ p . λ G .
    lookupValuation1 -n · ctxt-p -(PersistencePrf -n) · ctxt-i G m -p .

update-ctxt ◂ Π n : Nat . ctxt n ➔ Tp ➔ ctxt (S n) =
  λ n . λ G . λ T .
    updateValuation n · ctxt-p · ctxt-i G T -triv .

hastpIb ◂ Π n : Nat . ctxt n ➔ ★ =
  λ n : Nat . λ G : ctxt n . Sigma · (Trm n) · (λ _ : Trm n . Tp).

hastpIa ◂ Nat ➔ ★ = λ n : Nat . Sigma · (ctxt n) · (hastpIb n).

hastpI ◂ ★ = Sigma · Nat · hastpIa .

mkhastpI ◂ Π n : Nat . ctxt n ➔ Trm n ➔ Tp ➔ hastpI =
  λ n . λ G . λ t . λ T .
    mksigma · Nat · hastpIa
      n (mksigma · (ctxt n) · (hastpIb n)
          G (mksigma · (Trm n) · (λ _ : Trm n . Tp) t T)) .

𝒌hastp = hastpI ➔ ★ .
hastpF ◂ 𝒌hastp ➔ 𝒌hastp =
  λ hastp : 𝒌hastp . λ i : hastpI .
  ∀ X : 𝒌hastp .
  -- var case
  (Π m : Nat . Π n : Nat . ∀ p : Lt m n . Π G : ctxt n .
    X (mkhastpI n G (var m -n -p) (lookup-ctxt -n m -p G))) ➔

  -- lambda case
  (Π n : Nat . Π G : ctxt n. Π body : Trm (S n) . Π T1 : Tp . Π T2 : Tp .
   hastp (mkhastpI (S n) (update-ctxt n G T1) body T2) ➔
   X (mkhastpI (S n) (update-ctxt n G T1) body T2) ➔ 
   X (mkhastpI n G (abs n body) (arrow T1 T2))) ➔ 

  -- app case
  (Π n : Nat . Π G : ctxt n . Π t1 : Trm n . Π t2 : Trm n . Π T1 : Tp . Π T2 : Tp .
   hastp (mkhastpI n G t1 (arrow T1 T2)) ➔
   hastp (mkhastpI n G t2 T1) ➔
   X (mkhastpI n G t1 (arrow T1 T2)) ➔
   X (mkhastpI n G t2 T1) ➔
   X (mkhastpI n G (app n t1 t2) T2)) ➔
  X i.

hastp ◂ 𝒌hastp = Reci · hastpI · hastpF .

