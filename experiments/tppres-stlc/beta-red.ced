module Betared.

import ../iota-term/RecTypeI.
import ../iota-term/trmC.
import ../iota-term/trmD.
import ../iota-term/trmInduction.
import ../tpinf/tp.
import nat.
import ../iota-term/natExtras.
import bool.
import ../iota-term/valuation.
import product.
import sigma.
import true.
import wSigma2.
import ../iota-term/subst.
import cast.
import hastp.

beta-redIa ◂ Nat ➔ ★ = λ n : Nat . (Product · (Trm' n) · (Trm' (S n))) .

beta-redI ◂ ★ = Sigma · Nat · beta-redIa .

mkbeta-redI ◂ Π n : Nat . Trm' n ➔ Trm' (S n) ➔ beta-redI =
  λ n . λ t1 . λ t2 .
    mksigma · Nat · (beta-redIa)
      n (pair · (Trm' n) · (Trm' (S n)) t1 t2).
	  
𝒌beta-red = beta-redI ➔ ★ .
construct-subst-val ◂ Π n : Nat .
  Trm' (S n) ➔ (Valuation (S n) · (λ n : Nat . λ _ : Trm' n . Trm' n) ·
                (λ n : Nat . λ m : Nat . λ p : Lt m n . λ _ : Trm' n . True))
  = λ n : Nat . λ t : Trm' (S n) .
      valuationFromFun (S n) · (λ n : Nat . λ _ : Trm' n . Trm' n)
                     · (λ n : Nat . λ m : Nat . λ p : Lt m n . λ _ : Trm' n . True)
		       (λ m : Nat . Λ p .
		         BoolInd (lt m n) · (λ b : Bool . {lt m n ≃ b} ➔ wSigma2  · (Trm' (S m)) · (λ _ : Trm' (S m) . True))
                           (λ q . mkWSigma2 · (Trm' (S m)) · (λ _ : Trm' (S m) . True) (var' m -(S m) -(lt-nSn m)) -triv)
                           (λ q .[e = lt-S-eq m n -p q] -
			         ρ e - (mkWSigma2 · (Trm' (S n)) · (λ _ : Trm' (S n) . True) t -triv)) β).


-- (cast · (Trm' n) · (Trm' (S n)) -(embed' n (S n) -(lt-nSn n)) (subst' (S n) t1 (construct-subst-val n t2))

stepup ◂ ∀ n : Nat . Trm' n ➔ Trm' (S n) =
  Λ n : Nat . λ t . cast -(embed' n (S n) -(lte-nSn n)) t .

beta-redF ◂ 𝒌beta-red ➔ 𝒌beta-red =
  λ beta-red : 𝒌beta-red . λ i : beta-redI .
  ∀ X : 𝒌beta-red .
  -- beta case
  (Π n : Nat . Π t1 : Trm' (S n) . Π t2 : Trm' n .
    X (mkbeta-redI n (appe' n (abs' n t1) t2)
                     (subst' (S n) t1 (construct-subst-val n (stepup -n t2))))) ➔
  -- app1 case
  (Π n : Nat . Π t1 : Trm' n . Π t2 : Trm' n . Π t1' : Trm' n .
    (beta-red (mkbeta-redI n t1 (stepup -n t1')))
    ➔ X (mkbeta-redI n t1 (stepup -n t1'))
    ➔ X (mkbeta-redI n (appe' n t1 t2) (stepup -n (appe' n t1' t2)))) ➔
  -- lam case
  (Π n : Nat . Π t : Trm' (S n) . Π t' : Trm' (S n) .
    (beta-red (mkbeta-redI (S n) t (stepup -(S n) t')))
    ➔ X (mkbeta-redI (S n) t (stepup -(S n) t'))
    ➔ X (mkbeta-redI n (abs' n t) (stepup -n (abs' n t')))) ➔
  X i.
