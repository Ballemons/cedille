module PosVector.

import nat.
import nat-thms.
import natExtras.
import product.
import sum.
import sigma.
import top.

𝒌PVPred(n : Nat) = Π m : Nat. Lt m n ➔ ★ .
PosVector ◂ Π b : Nat . 𝒌PVPred b ➔ Π n : Nat . Lt n b ➔ ★ =
  λ b : Nat . λ T : 𝒌PVPred b. λ n : Nat . λ e : Lt n b . 
  ∀ X : Nat ➔ ★ .
  X Z ➔
  (Π m : Nat . ∀ p : Lt m n . T m (LtLt m n b p e) ➔ X m ➔ X (S m)) ➔
  X n.

PVNil ◂ ∀ b : Nat . ∀ T : 𝒌PVPred b . ∀ e : Lt Z b . PosVector b · T Z e =
  Λ b . Λ T . Λ e . Λ X . λ nil . λ cons . nil .

PVCons ◂ ∀ b : Nat . ∀ T : 𝒌PVPred b . Π n : Nat . ∀ e : Lt (S n) b .
         T n (Lt-Smn n b e) ➔ PosVector b · T n (Lt-Smn n b e) ➔ PosVector b · T (S n) e =
  Λ b . Λ T . λ n . Λ e . λ h . λ t . Λ X . λ nil . λ cons .
    cons n -(lt-nSn n) h (t · X nil (λ m . Λ p . λ h . λ t . cons m -(Lt-nSm m n p) ● t)).

{-
posPV◂∀ C:Nat➔★.Π f:(Π n:Nat .C n).Π n:Nat .PosVector·(λ n:Nat .C n) n=
  Λ C .λ f .λ n .NatInd n·(λ n:Nat .PosVector·(λ n :Nat .C n) n)
    (PVNil·(λ n:Nat .C n))
    (λ n .λ v .PVCons·(λ n:Nat .C n) n (f n) v).

constPV◂∀ C:★.Π n:Nat .C➔PosVector·(λ _:Nat .C) n=
  Λ C .λ n .λ c .posPV·(λ _:Nat .C) (λ _ .c) n.


PVfromFun ◂ ∀ T:Nat➔★.Π n:Nat .
            (Π m:Nat .Lt m n➾T m) ➔
            PosVector·T n =
  Λ T .λ n .λ f . (NatInd n ·(λ m:Nat .Lte m n➾PosVector·T m)
    (Λ _ .PVNil·T)
    (λ m .λ p .Λ l . PVCons·T m (f m -(Lt-Lte m n l)) (p -(Lte-Lt m n (Lt-Lte m n l)))))
    -(Lten n).

FunfromPV ◂ ∀ T:Nat➔★.Π n:Nat .
            PosVector·T n ➔
	    Π m:Nat .
	    Lt m n ➔
	    T m =
  Λ T .λ n .λ v .λ m .λ l .
    (v·(λ n:Nat .Lt m n➔T m)
       (λ l .(lt-Z m l)·(T m))
       (λ p .λ tp .λ ih .λ l .ind-Sum·(Lt m p)·{m≃p} (Lt-S m p l)·(λ s:Sum·(Lt m p)·{m≃p} .T m) (λ l .ih l) (λ e .ρ e -tp)))
       l.

{- Next is a simpler way to the following, that it is not working -}
-- lem-LtSn◂Π n:Nat .{Lt-S n n (lt-nSn n)≃in2 β}=
--  λ n:Nat . ind-Sum·(Lt n n)·{n≃n} (Lt-S n n (lt-nSn n))
--    ·(λ s:Sum·(Lt n n)·{n≃n} .{Lt-S n n (lt-nSn n)≃s}➔{Lt-S n n (lt-nSn n)≃in2 β})
--    (λ l .λ e .(lt-eq n l)·{Lt-S n n (lt-nSn n)≃in2 β})
--    (λ b .λ e .ρ e -β)
--    β.

-- lem-FunfromPV◂∀ T:Nat➔★.Π n:Nat .
--             Π f:(Π m:Nat .Lt m (S n)➾T m).
--             {FunfromPV·T (S n) (PVfromFun·T (S n) f) n (lt-nSn n)≃f n}=
--  Λ T .λ n .λ f .ρ+ (lem-LtSn n) -β.

lem-LtSn◂Π n:Nat .Sigma·{n≃n}·(λ t:{n≃n} .{Lt-S n n (lt-nSn n)≃in2 t})=
 λ n:Nat . ind-Sum·(Lt n n)·{n≃n} (Lt-S n n (lt-nSn n))
   ·(λ s:Sum·(Lt n n)·{n≃n} .{Lt-S n n (lt-nSn n)≃s}➔Sigma·{n≃n}·(λ t:{n≃n} .{Lt-S n n (lt-nSn n)≃in2 t}))
   (λ l .λ e .(lt-eq n l)·(Sigma·{n≃n}·(λ t:{n≃n} .{Lt-S n n (lt-nSn n)≃in2 t})))
   (λ b .λ e .mksigma·{n≃n}·(λ t:{n≃n} .{Lt-S n n (lt-nSn n)≃in2 t}) b (ρ e -β))
   β.

lem-FunfromPV◂∀ T:Nat➔★.Π n:Nat .
            Π f:(Π m:Nat .Lt m (S n)➾T m).
            {FunfromPV·T (S n) (PVfromFun·T (S n) f) n (lt-nSn n)≃f n}=
 Λ T .λ n .λ f .ind-sigma·{n≃n}·(λ t:{n≃n} .{Lt-S n n (lt-nSn n)≃in2 t})
   (lem-LtSn n)
   ·(λ s:Sigma·{n≃n}·(λ t:{n≃n} .{Lt-S n n (lt-nSn n)≃in2 t}) .{FunfromPV·T (S n) (PVfromFun·T (S n) f) n (lt-nSn n)≃f n})
   (λ _ .λ e .ρ+ e -β).

{-Tests-}
Nat'◂Nat➔★=λ _:Nat .Nat.

testa◂Nat=S Z.
testc◂Nat=Z.
testb◂Nat=S (S Z).

{-    PVfromFun
-}

example0◂PosVector·Nat' (S (S (S Z)))=PVfromFun·Nat' (S (S (S Z))) (λ _ .Λ _ .testa).

lookup-example0-head◂{FunfromPV·Nat' (S (S (S Z))) example0 (S (S Z)) (lt-nSn (S (S Z)))≃testa}=β.
lookup-example0-mid◂{FunfromPV·Nat'  (S (S (S Z))) example0 (S Z) (lt-nSSn (S Z))≃testa}=β.
lookup-example0-last◂{FunfromPV·Nat' (S (S (S Z))) example0 Z (lt-nSSSn Z)≃testa}=β.

{-    FunfromPV
      [ testa , testb,  testc ]
          T2     , T1    , T0
-}


example1◂PosVector·Nat' (S (S (S Z)))=
  PVCons·Nat' (S (S Z)) testa
   (PVCons·Nat' (S Z)   testb
     (PVCons·Nat' Z     testc
       (PVNil·Nat'))).

lookup-example1-head◂{FunfromPV·Nat' (S (S (S Z))) example1 (S (S Z)) (lt-nSn (S (S Z)))≃testa}=β.
lookup-example1-mid◂{FunfromPV·Nat' (S (S (S Z)))  example1 (S Z) (lt-nSSn (S Z))≃testb}=β.
lookup-example1-last◂{FunfromPV·Nat' (S (S (S Z))) example1 Z (lt-nSSSn Z)≃testc}=β.
-}
