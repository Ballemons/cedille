module Valuation.

import bool.
import nat.
import natExtras.
import wSigma2.
import true.
import valuationp.
import trmC.
import cast.

Persistent ◂ (Π n : Nat . Trm' n ➔ ★) ➔ ★ =
  λ P : Π n : Nat . Trm' n ➔ ★ . Π m : Nat . Π n : Nat . ∀ p : Lte m n . Π t : Trm' m . 
    Cast · (P m t) · (P n ((embed' m n -p).1 t)).

Valuation ◂ Π n : Nat . Π P : Π n : Nat . Trm' n ➔ ★. 
  Π I : Π n : Nat . Π m : Nat . Π p : Lt m n . P n (var' m -n -p) ➔ ★ . ★ =
  λ n : Nat . λ P : Π n : Nat . Trm' n ➔ ★ .
  λ I : Π n : Nat . Π m : Nat . Π p : Lt m n . P n (var' m -n -p) ➔ ★ .
    (Π m : Nat . ∀ p : Lt m n . wSigma2 · (P (S m) (var' m -(S m) -(lt-nSn m))) · (I (S m) m (lt-nSn m))).

valuationFromFun ◂ Π n : Nat . 
                  ∀ P : Π n : Nat . Trm' n ➔ ★.
                  ∀ I : Π n : Nat . Π m : Nat . Π p : Lt m n . P n (var' m -n -p) ➔ ★ .
                  (Π m : Nat .
                   ∀ p : Lt m n.
                   wSigma2 · (P (S m) (var' m -(S m) -(lt-nSn m))) · (I (S m) m (lt-nSn m))) ➔
                  Valuation n · P · I =
  λ n . Λ P . Λ I . λ f . f.

trivValuationInv ◂ Π P : Π n : Nat . Trm' n ➔ ★.
                   Π n : Nat . Π m : Nat . Π p : Lt m n . P n (var' m -n -p) ➔ ★ =
     λ P : Π n : Nat . Trm' n ➔ ★.
     λ n : Nat . λ m : Nat . λ p : Lt m n . λ q : P n (var' m -n -p) . True .

lookupValuation ◂ ∀ n : Nat . 
                  ∀ P : Π n : Nat . Trm' n ➔ ★. 
                  ∀ I : Π n : Nat . Π m : Nat . Π p : Lt m n . P n (var' m -n -p) ➔ ★. 
                  Valuation n · P · I ➔ 
                  Π m : Nat .
                  ∀ p : Lt m n .
                  wSigma2 · (P (S m) (var' m -(S m) -(lt-nSn m))) · (I (S m) m (lt-nSn m)) =
    Λ n . Λ P . Λ I . λ val . val .

lookupValuation1 ◂ ∀ n : Nat . 
                  ∀ P : Π n : Nat . Trm' n ➔ ★. Persistent · P ➾
                  ∀ I : Π n : Nat . Π m : Nat . Π p : Lt m n . P n (var' m -n -p) ➔ ★. 
                  Valuation n · P · I ➔ 
                  Π m : Nat .
                  ∀ p : Lt m n .
                  P n (var' m -n -p) =
    Λ n . Λ P . Λ perP . Λ I . λ val . λ m . Λ p . 
      (val m -p).1·(P n (var' m -n -p)) 
         (λ a .Λ _ . cast · (P (S m) (var' m -(S m) -(lt-nSn m))) · (P n (var' m -n -p))
                       -(perP (S m) n -(Lt-S2 m n p) (var' m -(S m) -(lt-nSn m))) a) .

updateValuation ◂ Π n : Nat . 
                  ∀ P : Π n : Nat . Trm' n ➔ ★.
                  ∀ I : Π n : Nat . Π m : Nat . Π p : Lt m n . P n (var' m -n -p) ➔ ★. 
                  Valuation n · P · I ➔ 
                  Π p : P (S n) (var' n -(S n) -(lt-nSn n)) .
                  I (S n) n (lt-nSn n) p ➾ 
                  Valuation (S n) · P · I =
  λ n . Λ P . Λ I . λ val . λ xn . Λ ixn .
        λ m . Λ p . BoolInd (lt m n) · (λ b : Bool . {lt m n ≃ b} ➔ wSigma2 · (P (S m) (var' m -(S m) -(lt-nSn m))) · (I (S m) m (lt-nSn m)))
                    (λ q .val m -q) 
                    (λ q .[e = lt-S-eq m n -p q] -
		          ρ e - (mkWSigma2 · (P (S n) (var' n -(S n) -(lt-nSn n))) · (I (S n) n (lt-nSn n)) xn -ixn)) β .

restrictValuation ◂ ∀ m : Nat . ∀ n : Nat . ∀ p : Lte m n .
                     ∀ P : Π n : Nat . Trm' n ➔ ★.
                     ∀ I : Π n : Nat . Π m : Nat . Π p : Lt m n . P n (var' m -n -p) ➔ ★. 
                     Valuation n · P · I ➔ Valuation m · P · I =
  Λ m . Λ n . Λ p . Λ P . Λ I . λ val . λ k . Λ pk . lookupValuation -n · P · I val k -(LtLte k m n pk p) .


-- lemma-val◂  Π n:Nat .
--         ∀ X:★. ∀ Y:X➔★.
-- 	∀ Trm':Nat ➔ ★ .
--         ∀ var' : var'Tp·Trm' .
-- 	Π f:(Π m:Nat .Lt m (S n)➾wSigma2·X·Y) .
--         {  lookupValuation' (S n)·(λ _:Nat .X)·(λ _:Nat .λ x:X. Y x)  
--              (valuationFromFun (S n) ·Trm' -var'·(λ n:Nat .λ _:Trm' n .X)	·(λ n:Nat .λ x:X. Y x) f)
--              n (lt-nSn n) ≃
-- 	   f n } =
--   λ n .Λ X. Λ Y. Λ Trm' .Λ _ .λ f .ρ (lem-FunfromPV·(λ _:Nat .wSigma2·X·Y) n f) -β.


