module NatExtras.

import nat.
import nat-thms.
import sum.
import false.
import sum.
import product.
import sigma.

Lt' ◂ Nat ➔ Nat ➔ ★ = λ n : Nat . λ m : Nat .
  ∀ X : Nat ➔ Nat ➔ ★ .
    (Π n : Nat . X Z (S n)) ➔
    (Π n : Nat . Π m : Nat . X n m ➔ X (S n) (S m)) ➔
    X n m .

LtZ' ◂ Π n : Nat . Lt' Z (S n)
    = λ n . Λ X . λ lt-Z . λ lt-S . lt-Z n .
    
LtS' ◂ Π n : Nat . Π m : Nat . Lt' n m ➔ Lt' (S n) (S m)
    = λ n . λ m . λ lt-nm . Λ X . λ lt-Z . λ lt-S . lt-S n m (lt-nm · X lt-Z lt-S) .

IndLt ◂ Π n : Nat . Π m : Nat . Lt' n m ➔ ★ =
  λ n : Nat . λ m : Nat . λ p : Lt' n m .
    ∀ Q : Π n : Nat . Π m : Nat . Lt' n m ➔ ★ .
    (Π n : Nat . Q Z (S n) (LtZ' n)) ➔
    (Π n : Nat . Π m : Nat . ∀ p : Lt' n m . Q n m p ➔ Q (S n) (S m) (LtS' n m p)) ➔
    Q n m p .

Lt ◂ Nat ➔ Nat ➔ ★ = λ n : Nat . λ m : Nat . ι x : Lt' n m . IndLt n m x .

LtZ ◂ Π n : Nat . Lt Z (S n) =
  λ n . [ LtZ' n , Λ X . λ lt-Z . λ lt-S . lt-Z n ].

LtS ◂ Π n : Nat . Π m : Nat . Lt n m ➔ Lt (S n) (S m)
    = λ n . λ m . λ lt-nm .
       [ LtS' n m lt-nm.1 ,
         Λ X . λ lt-Z . λ lt-S . lt-S n m -lt-nm.1 (lt-nm.2 · X lt-Z lt-S) ] .

toLt ◂ Π n : Nat . Π m : Nat . Lt' n m ➔ Lt n m =
  λ n . λ m . λ p .
    p · Lt LtZ LtS .
      
reflectionLt ◂ Π n : Nat . Π m : Nat . Π p : Lt n m . { toLt n m p ≃ p } =
  λ n . λ m . λ p .
    p.2 · (λ n : Nat . λ m : Nat . λ p : Lt' n m . { toLt n m p ≃ p })
      (λ n . β)
      (λ n . λ m . Λ p . λ ih . ρ+ ih - β).

InductionLt ◂ Π n : Nat . Π m : Nat . Π p : Lt n m .
    ∀ Q : Π n : Nat . Π m : Nat . Lt n m ➔ ★ .
    (Π n : Nat . Q Z (S n) (LtZ n)) ➔
    (Π n : Nat . Π m : Nat . ∀ p : Lt n m . Q n m p ➔ Q (S n) (S m) (LtS n m p)) ➔
    Q n m p =
  λ n . λ m . λ p . Λ Q . λ lt-Z . λ lt-S .
    ρ ς (reflectionLt n m p) -
      (p.2 · (λ n : Nat . λ m : Nat . λ p : Lt' n m . Q n m (toLt n m p))
        lt-Z (λ n . λ m . Λ p . λ ih . lt-S n m -(toLt n m p) ih) ).
 
LtBasep ◂ Nat ➔ Nat ➔ Nat ➔ ★ =
  λ n : Nat . λ m : Nat . λ m' : Nat . ι _ : {n ≃ Z} . {m ≃ S m'}.
LtBase ◂ Nat ➔ Nat ➔ ★ =
  λ n : Nat . λ m : Nat .
    Sigma · Nat · (LtBasep n m) .

LtStepp2 ◂ Nat ➔ Nat ➔ Nat ➔ Nat ➔ ★ =
  λ n : Nat . λ m : Nat . λ n' : Nat .
   λ m' : Nat . 
      ι _ : {n ≃ S n'} . ι _ : {m ≃ S m'} . Lt n' m' .
LtStepp ◂ Nat ➔ Nat ➔ Nat ➔ ★ =
  λ n : Nat . λ m : Nat .
    λ n' : Nat . Sigma · Nat · (LtStepp2 n m n').

LtStep ◂ Nat ➔ Nat ➔ ★ =
  λ n : Nat . λ m : Nat .
    Sigma · Nat · (LtStepp n m) .

LtSn ◂ Π n : Nat . Lt n (S n) = λ n . θ<n> (NatInd n) (LtZ Z) (λ n . λ ih . LtS n (S n) ih) .

Lt-in ◂ ∀ n : Nat . ∀ m : Nat . Sum · (LtBase n m) · (LtStep n m) ➔ Lt n m =
  Λ n . Λ m . λ d .
    d.1 · (Lt n m)
      (λ a . a.1 · (Lt n m) (λ m' . λ p . ρ p.1 - ρ p.2 - (LtZ m')))
      (λ a . a.1 · (Lt n m) (λ n' . λ p .
                               p.1 · (Lt n m) (λ m' . λ p . ρ p.1 - ρ p.2.1 - (LtS n' m' p.2.2)))) .

Lt-out ◂ ∀ n : Nat . ∀ m : Nat . Lt n m ➔ Sum · (LtBase n m) · (LtStep n m) =
  Λ n . Λ m . λ d . 
    d.1 · (λ n : Nat . λ m : Nat . Sum · (LtBase n m) · (LtStep n m))
      (λ m' . in1 · (LtBase Z (S m')) · (LtStep Z (S m'))
                (mksigma · Nat · (LtBasep Z (S m')) m' [ β , β ] ))
      (λ n' . λ m' . λ ih . in2 · (LtBase (S n') (S m')) · (LtStep (S n') (S m'))
                              (mksigma · Nat · (LtStepp (S n') (S m'))
                                n'
                                (mksigma · Nat · (LtStepp2 (S n') (S m') n')
                                   m' [ β{Lt-in ih} , [ β{Lt-in ih} , Lt-in -n' -m' ih]]))) .


lt-S ◂ Π n : Nat . Π m : Nat . Lt n m ➔ Sigma · Nat · (λ p : Nat . {S p ≃ m}) =
  λ n . λ m . λ lt-nm . (lt-nm.1 · (λ n : Nat . λ m : Nat . Lt n m ➔ Sigma · Nat · (λ p : Nat . {S p ≃ m}))
       	 (λ m . λ _ . mksigma · Nat · (λ p : Nat . {S p ≃ S m}) m β)
	 (λ n . λ m . λ _ . λ _ . mksigma · Nat · (λ p : Nat . {S p ≃ S m}) m β)) lt-nm . 

lt-Z ◂ Π n:Nat .Lt n Z➔False=
  λ n. λ l. ind-sigma·Nat·(λ p : Nat . {S p ≃ Z}) (lt-S n Z l) ·(λ s:Sigma·Nat·(λ p : Nat . {S p ≃ Z}) . False) (λ m . λ e .ZS-False -m -ς e). 

eq-S ◂ Π n : Nat . Π m : Nat . {S n ≃ S m} ➔ {n ≃ m} =
  λ n . λ m . λ eq-n-m . χ ({pred (S n) ≃ m}) - ρ eq-n-m - β .

lt-SS ◂ Π n : Nat . Π m : Nat . Lt (S n) (S m) ➔ Lt n m =
  λ n . λ m . λ Lt-Sn-Sm . ind-Sum · (LtBase (S n) (S m)) · (LtStep (S n) (S m)) (Lt-out -(S n) -(S m) Lt-Sn-Sm) ·
     	(λ s : Sum · (LtBase (S n) (S m)) · (LtStep (S n) (S m)) . Lt n m)
	(λ ltB-Sn-Sm . ZS-False -n -(θ<ltB-Sn-Sm> (ind-sigma · Nat · (LtBasep (S n) (S m)) ltB-Sn-Sm) (λ _ . λ ltBp-Sn-Sm . ς ltBp-Sn-Sm.1)) · (Lt n m))
	(λ ltS-Sn-Sm . θ<ltS-Sn-Sm> (ind-sigma · Nat · (LtStepp (S n) (S m)) ltS-Sn-Sm)
	   (λ n' . λ ltSp-Sn-Sm . θ<ltSp-Sn-Sm> (ind-sigma · Nat · (LtStepp2 (S n) (S m) n') ltSp-Sn-Sm) (λ m' . λ ltSpp-Sn-Sm . ρ (eq-S n n' ltSpp-Sn-Sm.1) -ρ (eq-S m m' ltSpp-Sn-Sm.2.1) - ltSpp-Sn-Sm.2.2 ))).



Lte ◂ Nat ➔ Nat ➔ ★ = λ n : Nat . λ m : Nat . Sum · (Lt n m) · {n ≃ m} .

LteZ ◂ Π n : Nat . Lte Z n = λ n . θ<n> (NatInd n) (in2 · (Lt Z Z) · {Z ≃ Z} β) (λ n . λ _ . in1 · (Lt Z (S n)) · {Z ≃ S n} (LtZ n)) .

LteS ◂ Π n : Nat . Π m : Nat . Lte n m ➔ Lte (S n) (S m)
    = λ n . λ m . λ lte-nm . θ<lte-nm> (ind-Sum · (Lt n m) · {n ≃ m} lte-nm)
      (λ lt-n-m . in1 · (Lt (S n) (S m)) · {S n ≃ S m} (LtS n m lt-n-m))
      (λ eq-n-m . in2 · (Lt (S n) (S m)) · {S n ≃ S m} (ρ eq-n-m - β)) .

Lten ◂ Π n : Nat . Lte n n 
     = λ n . in2 · (Lt n n) · {n ≃ n} β .

Lte-Lt ◂ Π n : Nat . Π m : Nat . Lt n m ➔ Lte n m = λ n .λ m .λ l .in1·(Lt n m)·{n≃m} l.

Lt-trans ◂ Π x : Nat . Π y : Nat . Π z : Nat . Lt x y ➔ Lt y z ➔ Lt x z =
  λ x . λ y . λ z . λ lt-xy . λ lt-yz . 
      lt-xy.1 · (λ x : Nat . λ y : Nat . Π z : Nat . Lt y z ➔ Lt x z)
      	      (λ y . λ z . λ lt-yz . ind-sigma · Nat · (λ p : Nat . {S p ≃ z}) (lt-S (S y) z lt-yz) ·
	      	 (λ s : Sigma · Nat · (λ p : Nat . {S p ≃ z}) . Lt Z z) (λ p . λ eq-Sp-z . ρ ς eq-Sp-z - (LtZ p)))
	      (λ x . λ y . λ ih . λ z . λ lt-Sy-z .
	      	 ind-sigma · Nat · (λ z' : Nat . {S z' ≃ z}) (lt-S (S y) z lt-Sy-z) · (λ _ : Sigma · Nat · (λ z' : Nat . {S z' ≃ z}) . Lt (S x) z)
	           (λ z' . λ eq-Sz'-z . ρ ς eq-Sz'-z - (LtS x z' (ih z' (lt-SS y z' (ρ eq-Sz'-z - lt-Sy-z))))))
	      z lt-yz .

Lt-S ◂ Π n : Nat . Π m : Nat . Lt n (S m) ➔ Lte n m =
   λ n . θ<n> (NatInd n)
     (λ m . λ _ . LteZ m)
     (λ n . λ ih . λ m . λ lt-Sn-Sm .
     	[ lt-n-m = lt-SS n m lt-Sn-Sm ] -
	  ind-sigma · Nat · (λ m' : Nat . {S m' ≃ m}) (lt-S n m lt-n-m) · (λ _ : Sigma · Nat · (λ m' : Nat . {S m' ≃ m}) . Lte (S n) m)
	    (λ m' . λ eq-Sm'-m . ρ ς eq-Sm'-m - (LteS n m' (ih m' (ρ eq-Sm'-m -lt-n-m))))) .

lt-nSn ◂ Π n : Nat . Lt n (S n) =
  λ n . θ<n> (NatInd n) (LtZ Z) (λ p . λ ih . LtS p (S p) ih).

lt-nSSn ◂ Π n : Nat . Lt n (S (S n))      = λ n . Lt-trans n (S n)     (S (S n))     (lt-nSn n)  (lt-nSn (S n)) .

lt-nSSSn ◂ Π n : Nat . Lt n (S (S (S n))) = λ n . Lt-trans n (S (S n)) (S (S (S n))) (lt-nSSn n) (lt-nSn (S (S n))) .

lte-nSn ◂ Π n : Nat . Lte n (S n) =
  λ n .in1·(Lt n (S n))·{n ≃ S n} (lt-nSn n).

LtS2 ◂ Π n : Nat . Π m : Nat . Lt n m ➔ Lt n (S m)
      = λ n . λ m . λ l . Lt-trans n (S n) (S m) (lt-nSn n) (LtS n m l) .

Lt-Lte ◂ Π n : Nat . Π m : Nat . Lte (S n) m ➔ Lt n m
 =λ n .λ m .λ l .l.1·(Lt n m)
    (λ l . ind-sigma·Nat·(λ p:Nat .{S p ≃ m}) (lt-S (S n) m l)·(λ s:Sigma·Nat·(λ p:Nat .{S p ≃ m}) .Lt n m)
       (λ a .λ b .ρ ς b -(LtS2 n a (lt-SS n a (ρ b -l)))))
    (λ e .ρ ς e -(LtSn n)).

lte-S◂Π n:Nat .Π m:Nat .Lte (S n) m➔Sigma·Nat·(λ p:Nat .{S p ≃ m})=
  λ n .λ m .λ l .lt-S n m (Lt-Lte n m l).

{- add-mono ◂ Π x : Nat . Π y : Nat . Π z : Nat . Lt x y ➔ Lt (add x z) (add y z) =
  λ x . λ y . λ z . λ p . ●. -}
    

