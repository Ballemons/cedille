module proof.

import cast.
import isfree.
import trmD.
import trmInduction.
import valuation.
import natExtras.
import sigma.
import nat.
import bool.
import wSigma2.
import true.
import sum.
import product.
import posvector.

{- Substitution -}
subst ◂ Π n : Nat 
      . Trm n
      ➔ Valuation n · Trm var · (λ n : Nat . λ t : Trm n . Trm n)
      		    · (λ n' : Nat . λ _ : Trm (S n') . True)
      ➔ Trm n
      = λ n . λ t .λ v .TrmRec n t·Trm·(λ n':Nat .λ _ : Trm (S n') .True) v
      	[β{λ n . λ eval1 . λ eval2 . λ d .
          d   (λ a . a (λ a1 . λ a2 . app n (eval1 a1) (eval1 a2)))
	      (λ a . abs n (eval2 (var n) a))},
	λ n . Λ val . Λ R1 . Λ R2 . Λ _ . Λ _ .
        λ eval1 . λ eval2 . λ d .
          d.1 · (Trm n)
	      (λ a . a.1 · (Trm n) (λ a1 . λ a2 . app n (eval1.1 a1) (eval1.1 a2)))
	      (λ a . abs n (eval2.1 (var n) -triv a))].


eq-lt◂Π n:Nat .Π m:Nat. Lt n m➔{nat-eq m n≃ff}=●.  

lem◂Π n:Nat .Π q:Nat .Lt q n➔{isFree (S n) q (var n)≃ff}=
 λ n .λ q .λ l .●.--ρ+ (eq-lt q n l) -β.

lem'◂Π n:Nat .Π q:Nat .Π l:Lt q n .
    {updateValuation' n (valuationFromFun n (λ n' . mkWSigma2 (λ _ . nat-eq n' q))) (λ _ . ff) ≃
     valuationFromFun (S n) (λ n' . mkWSigma2 (λ _ .nat-eq n' q))} =
  λ n .λ q .λ l .ρ+ (eq-lt q n l) -β.

P◂Π n:Nat .Trm n➔★=
 λ n:Nat .λ t:Trm n .
 Π m:Nat .
 Π lm:Lt m n . 
 Π v:Valuation n·Trm var
   ·(λ n:Nat .λ t:Trm n .Trm n)
   ·(λ n:Nat .λ t:Trm (S n).
   {isFree (S n) m t≃ff}) .
 {isFree n m -lm (subst n t v)≃ff}.

thm◂Π n:Nat . Π t:Trm n .P n t=
 λ n .λ t .TrmInd n t
  ·(λ n:Nat .λ t:Trm n .P n t) 
  ·(λ n:Nat .λ _:P (S n) (var n). True)
  (valuationFromFun n·Trm -var ·P·(λ n:Nat .λ _:P (S n) (var n). True)
    (λ p. Λ lpn .mkWSigma2·(P (S p) (var p))·(λ _:P (S p) (var p). True)
      (λ m .λ lmSp .λ v .
--        [a = lookupValuation (S p) ·Trm -var·(λ n:Nat .λ t:Trm n .Trm n)·(λ n:Nat .λ t:Trm (S n).{isFree (S n) m t≃ff}) v m lmSp]-
        wSigma2Induction·(Trm (S m))·(λ t:Trm (S m).{isFree (S m) m t≃ff})
	   (lookupValuation (S p) ·Trm -var·(λ n:Nat .λ t:Trm n .Trm n)·(λ n:Nat .λ t:Trm (S n).{isFree (S n) m t≃ff}) v m lmSp)
	   ·(λ s:wSigma2·(Trm (S m))·(λ t:Trm (S m).{isFree (S m) m t≃ff}).{isFree (S p) m (subst (S p) (var p) v)≃ff})
	   (λ t .Λ i .●))
      -triv))
  [
  ●,
  λ n .Λ val .Λ R1 .Λ R2 .Λ c1 .Λ c2 .Λ C1 .Λ C2 .λ e1 .λ e2 .λ d .
    θ<d> (ind-Sum d)
      (λ a . θ<a> (ind-Product a)
        (λ a1 .λ a2 .λ q .λ lq .λ v .
           χ {or (isFree n q (subst n a1 v)) (isFree n q (subst n a2 v)) ≃ ff}-
	   ρ (e1.1 a1 q lq v) - ρ (e1.1 a2 q lq v) - β))
      (λ a .λ q .λ lq .λ v .
      	 ρ+ (lem' n q lq)
	  -ρ (e2.1 (λ q .λ lq .λ v .●) -triv a
	         q (LtS2 q n lq) (updateValuation' n·Trm·(λ n:Nat .λ t':Trm (S n) .{isFree (S n) q t' ≃ ff}) v (var n) -(lem n q lq)))
                 -β)
  ].
