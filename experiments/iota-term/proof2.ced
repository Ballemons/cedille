{- Second version using valuation invariant to imposses the free variable hypothesis -}
module proof2.

import cast.
import isfree.
import trmC.
import trmD.
import trmInduction.
import valuation.
import natExtras.
import sigma.
import nat.
import bool.
import wSigma2.
import true.
import sum.
import product.
import posvector.

{- Substitution -}
subst ◂ Π n : Nat . 
  Trm n ➔
  Valuation n  · Trm var
  	       · (λ n : Nat . λ _ : Trm n . Trm n)
               · (λ n : Nat . λ _ : Trm (S n) . True) ➔
  Trm n
  = λ n . λ t .λ v .TrmRec n t·Trm·(λ n':Nat .λ _ : Trm (S n') .True) v
      [β{λ n .λ eval1 .λ eval2 .λ d .
        d  (λ a . a (λ a1 . λ a2 . app n (eval1 a1) (eval1 a2)))
           (λ a . abs n (eval2 (var n) a))},
      λ n . Λ _ . Λ _ . Λ _ . Λ _ . Λ _ . λ eval1 . λ eval2 . λ d .
        d.1 · (Trm n)
           (λ a . a.1 · (Trm n) (λ a1 . λ a2 . app n  (eval1.1 a1)
                                                      (eval1.1 a2)))
           (λ a . abs n (eval2.1 (var n) -triv a))].

eq-lt◂Π n:Nat .Π m:Nat. Lt n m➔{nat-eq m n≃ff}=
  λ n .λ m .λ l .BoolInd (nat-eq m n) ·(λ b:Bool . {nat-eq m n≃b}➔{nat-eq m n≃ff})
    (λ et .[e  = lem-nat-eq m n et]-
           [ln = ρ e -l]-
     	   (lt-eq n ln)·{nat-eq m n≃ff})  --Note: This should be equivalent to (lt-eq n (ρ (lem-nat-eq m n et) -l))·{nat-eq m n≃ff} ?
    (λ ef .ef) β.  

lem'◂Π n:Nat .Π q:Nat .Π l:Lt q n .
    {updateValuation' n (valuationFromFun n (λ n' . mkWSigma2 (nat-eq n' q))) ff ≃
     valuationFromFun (S n) (λ n' . mkWSigma2 (nat-eq n' q))} =
  λ n .λ q .λ l .ρ+ (eq-lt q n l) -β.

lem◂Π n:Nat .Π q:Nat .Lt q n➔{isFree2 (S n) q (var n)≃ff}=
 λ n .λ q .λ l .ρ+ (lemma-val n ·Bool·(λ _:Bool .True)·Trm -var (λ n' .Λ l .mkWSigma2·Bool·(λ _:Bool .True) (nat-eq n' q) -triv)) -(ρ+ (eq-lt q n l) -β).

P◂Π n:Nat .Trm n➔★=
 λ n:Nat .λ t:Trm n .
 Π m:Nat .
 Π lm:Lt m n . 
 Π v:Valuation n·Trm var
   ·(λ n:Nat .λ t:Trm n .Trm n)
   ·(λ n:Nat .λ t:Trm (S n).{isFree2 (S n) m t≃ff}) .
 {isFree2 n m -lm (subst n t v)≃ff}.

thm◂Π n:Nat . Π t:Trm n .P n t=
 λ n .λ t .TrmInd n t
  ·(λ n:Nat .λ t:Trm n .P n t) 
  ·(λ n:Nat .λ _:P (S n) (var n). True)
  (valuationFromFun n·Trm -var ·P·(λ n:Nat .λ _:P (S n) (var n). True)
    (λ p. Λ lpn .mkWSigma2·(P (S p) (var p))·(λ _:P (S p) (var p). True)
      (λ m .λ lmSp .λ v .
	[ e ◂ {lookupValuation' (S p) v p (lt-nSn p) (λ a . a) ≃ subst (S p) (var p) v} = β]-
        wSigma2Induction·(Trm (S p))·(λ t:Trm (S p). {isFree2 (S p) m t≃ff})
	    (lookupValuation' (S p)·Trm·(λ n:Nat .λ t:Trm (S n).{isFree2 (S n) m t≃ff}) v p (lt-nSn p))
	    ·(λ s:wSigma2·(Trm (S p))·(λ t:Trm (S p).{isFree2 (S p) m t≃ff}).
	       {s≃(lookupValuation' (S p)·Trm·(λ n:Nat .λ t:Trm (S n).{isFree2 (S n) m t≃ff}) v p (lt-nSn p))}➔
	       {isFree2 (S p) m (subst (S p) (var p) v)≃ff})
	    (λ t . Λ i . λ et . ρ ς (ρ ς et - e) - ρ i - β) β
	   )
      -triv))
  [
  β{λ n' . λ e1 . λ e2 . λ d . d (λ a . ind-Product a (λ a1 . λ a2 . λ q . λ lq . λ v . λ x . x)) (λ a . λ p . λ lpn . λ v . λ x . x)},
  λ n .Λ val .Λ R1 .Λ R2 .Λ c1 .Λ c2 .Λ C1 .Λ C2 .λ e1 .λ e2 .λ d .
    θ<d> (ind-Sum d)
      (λ a . θ<a> (ind-Product a)
        (λ a1 .λ a2 .λ q .λ lq .λ v .
           χ {or (isFree2 n q (subst n a1 v)) (isFree2 n q (subst n a2 v)) ≃ ff}-
	   ρ (e1.1 a1 q lq v) - ρ (e1.1 a2 q lq v) - β))
      (λ a .λ p .λ lpn .λ v .
        ρ+ (lem' n p lpn)
	  -ρ (e2.1 (λ m .λ lmSp .λ v .
	  	[ e ◂ {lookupValuation' (S n) v n (lt-nSn n) (λ a . a) ≃ subst (S n) (var n) v} = β]-
        	wSigma2Induction·(Trm (S n))·(λ t:Trm (S n). {isFree2 (S n) m t≃ff})
	    	  (lookupValuation' (S n)·Trm·(λ n:Nat .λ t:Trm (S n).{isFree2 (S n) m t≃ff}) v n (lt-nSn n))
	          ·(λ s:wSigma2·(Trm (S n))·(λ t:Trm (S n).{isFree2 (S n) m t≃ff}).
		        {s≃(lookupValuation' (S n)·Trm·(λ n:Nat .λ t:Trm (S n).{isFree2 (S n) m t≃ff}) v n (lt-nSn n)) }➔
			{isFree2 (S n) m (subst (S n) (var n) v)≃ff})
	           (λ t . Λ i . λ et . ρ ς (ρ ς et - e) - ρ i - β) β
		   )
	        -triv a
	        p (LtS2 p n lpn) (updateValuation' n·Trm·(λ n:Nat .λ t:Trm (S n) .{isFree2 (S n) p t ≃ ff}) v (var n) -(lem n p lpn)))
            -β)
  ].
