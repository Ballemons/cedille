module proof.

import cast.
import isfree.
import trmD.
import trmInduction.
import valuation.
import natExtras.
import sigma.
import nat.
import bool.
import wSigma2.
import true.
import sum.
import product.
import posvector.

{- Substitution -}
subst ◂ Π n : Nat 
      . Trm n
      ➔ Valuation n · Trm var · (λ n : Nat . λ t : Trm n . Trm n)
      		    · (λ n' : Nat . λ _ : Trm (S n') . True)
      ➔ Trm n
      = λ n . λ t .λ v .TrmRec n t·Trm·(λ n':Nat .λ _ : Trm (S n') .True) v
      	[β{λ n . λ eval1 . λ eval2 . λ d .
          d   (λ a . a (λ a1 . λ a2 . app n (eval1 a1) (eval1 a2)))
	      (λ a . abs n (eval2 (var n) a))},
	λ n . Λ val . Λ R1 . Λ R2 . Λ _ . Λ _ .
        λ eval1 . λ eval2 . λ d .
          d.1 · (Trm n)
	      (λ a . a.1 · (Trm n) (λ a1 . λ a2 . app n (eval1.1 a1) (eval1.1 a2)))
	      (λ a . abs n (eval2.1 (var n) -triv a))].

subst-app◂Π n:Nat .Π t1:Trm n . Π t2:Trm n .
      Π v:Valuation n·Trm var·(λ n : Nat . λ t : Trm n . Trm n)·(λ n' : Nat . λ _ : Trm (S n') . True) .
      {subst n (app n t1 t2) v ≃ app n (subst n t1 v) (subst n t2 v)} =
 λ n .λ t1 .λ t2 .λ v .β.

isFree-app◂Π n:Nat .Π t1:Trm n . Π t2:Trm n .Π m:Nat .
       {isFree n m (app n t1 t2) ≃ or (isFree n m t1) (isFree n m t2)} =
 λ n .λ t1 .λ t2 .λ m . β.

subst-var◂Π n:Nat .
          Π v:Valuation (S n)·Trm var ·(λ n:Nat .λ t:Trm n .Trm n)
      		    ·(λ n:Nat .λ _:Trm (S n) .True) .
	  {(lookupValuation' (S n)·Trm·(λ n' : Nat . λ _ : Trm (S n') . True) v n (lt-nSn n)).1 ·(Trm (S n)) (λ a .Λ _ .a) ≃
	   subst (S n) (var n) v} =
   λ n . λ v. β. 

lem◂Π n:Nat .Π q:Nat .Π l:Lt q n .
  Π v:Valuation n·Trm var·(λ n:Nat .λ t:Trm n .Trm n)·(λ n:Nat .λ _:Trm (S n) .True) .
  (Π p:Nat .∀ lq:Lt q (S p).{isFree (S p) q -lq (subst (S p) (var p) v)≃ff}) ➔
  Π p:Nat . ∀ lq:Lt q (S p).{isFree (S p) q -lq (subst (S p) (var p) (updateValuation' n v (var n)))≃ff}=
  λ n .λ q .λ lqn .λ v .λ f .λ p .Λ lqSp .●.

eq-lt◂Π n:Nat .Π m:Nat. Lt n m➔{nat-eq m n≃ff}=●.  

lem'◂Π n:Nat .Π q:Nat .Π l:Lt q n .
    {updateValuation' n (valuationFromFun n (λ n' . mkWSigma2 (λ _ . nat-eq n' q))) (λ _ . ff) ≃
     valuationFromFun (S n) (λ n' . mkWSigma2 (λ _ .nat-eq n' q))} =
  λ n .λ q .λ l . ρ+ (eq-lt q n l) -β.

-- [ eq ◂ {nat-eq n q ≃ ff}  = ●]
-- [ p1◂{updateValuation' n (valuationFromFun n (λ n' . mkWSigma2 (λ _ . nat-eq n' q))) (λ _ .ff)≃
--                         PVCons n (mkWSigma2 (λ _ .ff)) (valuationFromFun n (λ n' . mkWSigma2 (λ _ . nat-eq n' q)))} = β]-
-- 		 [ p2◂{valuationFromFun (S n) (λ n' . mkWSigma2 (λ _ . nat-eq n' q)) ≃
-- 		        PVCons n (mkWSigma2 (λ _ .nat-eq n q)) (valuationFromFun n (λ n' . mkWSigma2 (λ _ . nat-eq n' q)))} = β]-

P◂Π n:Nat .Trm n➔★=
 λ n:Nat .λ t:Trm n .
 Π v:Valuation n·Trm var·(λ n:Nat .λ t:Trm n .Trm n)·(λ n:Nat .λ _:Trm (S n) .True) .
 Π m:Nat .
 ∀ lm:Lt m n . 
-- (Π p:Nat .∀ lp:Lt p n .∀ lm:Lt m (S p).{isFree (S p) m lm (lookupValuation' n ·Trm·(λ n' : Nat . λ _ : Trm (S n') . True) v p lp)≃ff}) ➔
 (Π p:Nat .∀ lm:Lt m (S p).{isFree (S p) m -lm (subst (S p) (var p) v)≃ff}) ➔
 {isFree n m -lm (subst n t v)≃ff}.

thm◂Π n:Nat . Π t:Trm n .P n t=
 λ n .λ t .TrmInd n t
  ·(λ n:Nat .λ t:Trm n .P n t) 
  ·(λ n:Nat .λ _:P (S n) (var n). True)
  (valuationFromFun n·Trm -var ·P·(λ n:Nat .λ _:P (S n) (var n). True)
    (λ m. Λ lm .mkWSigma2·(P (S m) (var m))·(λ _:P (S m) (var m). True)
      (λ v .λ q .Λ lq .λ f .f m -lq)
      -triv)) 
  [
  β{λ n' . λ e1 . λ e2 . λ d . d (λ a . ind-Product a (λ a1 . λ a2 . λ v . λ q . λ f . λ x . x)) (λ a . λ v . λ q . λ f . λ x . x)},
  λ n .Λ val .Λ R1 .Λ R2 .Λ c1 .Λ c2 .Λ C1 .Λ C2 .λ e1 .λ e2 .λ d .
    θ<d> (ind-Sum d)
      (λ a . θ<a> (ind-Product a)
        (λ a1 .λ a2 .λ v .λ q .Λ lq .λ f .
           χ {or (isFree n q (subst n a1 v)) (isFree n q (subst n a2 v)) ≃ ff } -
	   ρ (e1.1 a1 v q -lq f) - ρ (e1.1 a2 v q -lq f) - β))
      (λ a .λ v .λ q .Λ lq .λ f .
         -- [ tmp  ◂ { isFree n q (subst n (in n (in2 a)) v) ≃ isFree n q (abs n (subst (S n) a (updateValuation' n v (var n)))) } = ε β ] -
	 -- [ eq   ◂ {updateValuation' n (valuationFromFun n (λ n' . mkWSigma2 (λ m' . nat-eq m' q))) (λ _ . ff) ≃
	 --           valuationFromFun (S n) (λ n' . mkWSigma2 (λ m' . nat-eq m' q))} = ● ] -
--         [ tmp2 ◂ { isFree n q (subst n (in n (in2 a)) v) ≃ isFree (S n) q (subst (S n) a (updateValuation' n v (var n))) } = ε β ] -	 
      	 ρ+ (lem' n q lq)
	  -ρ (e2.1 (λ v .λ q .Λ lq .λ f .f n -lq) -triv a
                 (updateValuation' n·Trm·(λ n:Nat .λ _:Trm (S n) .True) v (var n) -triv)
	         q -(LtS2 q n lq) (lem n q lq v f))
                 -β)
  ].
