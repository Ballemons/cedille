module Valuationp.

import cast.
import bool.
import nat.
import natExtras.
import wSigma2.
import true.

Persistent' ◂ (Nat ➔ ★) ➔ ★ =
  λ X : Nat ➔ ★ . Π m : Nat . Π n : Nat . Lte m n ➾ Cast · (X m) · (X n).

Valuation' ◂ Π n : Nat . Π X : Nat ➔ ★ . Π I : Π n : Nat . X (S n) ➔ ★ . ★ =
  λ n : Nat . λ X : Nat ➔ ★ . λ I : Π n : Nat . X (S n) ➔ ★ . Π m : Nat . Lt m n ➾ wSigma2 · (X (S m)) · (I m).

trivValuationInv' ◂ Π X : Nat ➔ ★.
                    Π n : Nat . X (S n) ➔ ★ =
   λ X : Nat ➔ ★ . λ n : Nat . λ x : X (S n) . True .

lookupValuation' ◂ ∀ n : Nat . ∀ X : Nat ➔ ★ . ∀ I : Π n : Nat . X (S n) ➔ ★ .
                   Valuation' n · X · I ➔
                   Π m : Nat .
                   Lt m n ➾
                   wSigma2 · (X (S m)) · (I m) =
    Λ n . Λ X . Λ I . λ val . val.

lookupValuation1' ◂ ∀ n : Nat . ∀ X : Nat ➔ ★ . Persistent' · X ➾ ∀ I : Π n : Nat . X (S n) ➔ ★ .
                   Valuation' n · X · I ➔
                   Π m : Nat .
                   Lt m n ➾
                   X n =
    Λ n . Λ X . Λ perX . Λ I . λ val . λ m . Λ p . (val m -p).1 · (X n) (λ a . Λ _ . cast -(perX (S m) n -(Lt-S2 m n p)) a).

updateValuation' ◂ Π n : Nat . ∀ X : Nat ➔ ★ . ∀ I : Π n : Nat . X (S n) ➔ ★ .
                   Valuation' n · X · I ➔ Π x : X (S n) . I n x ➾ Valuation' (S n) · X · I =
  λ n . Λ X . Λ I . λ val . λ xn . Λ ixn .
    λ m . Λ p . BoolInd (lt m n) · (λ b : Bool . {lt m n ≃ b} ➔ wSigma2 · (X (S m)) · (I m))
                    (λ q . val m -q)
                    (λ q . ρ (lt-S-eq m n -p q) - (mkWSigma2 · (X (S n)) · (I n) xn -ixn)) β.

valuationInv' ◂ ∀ n : Nat . ∀ X : Nat ➔ ★ . ∀ I : Π n : Nat . X (S n) ➔ ★ .
                  Π val : Valuation' n · X · I . Π m : Nat . ∀ p : Lt m n . ∀ P : ★ .
                  (I m ((lookupValuation' -n · X · I val m -p).1 · (X (S m)) (λ a . Λ _ . a)) ➾ P) ➔ P =
   Λ n . Λ X . Λ I . λ val . λ m . Λ p . 
     wSigma2Induction · (X (S m)) · (I m) (lookupValuation' -n  · X · I val m -p) · (λ u : wSigma2 · (X (S m)) · (I m). ∀ P : ★ .
                  (I m (u.1 · (X (S m)) (λ a . Λ _ . a)) ➾ P) ➔ P )
       (λ a . Λ p . Λ P . λ c . c -p) .
       

valuationFromFun' ◂ ∀ n : Nat . ∀ X : Nat ➔ ★ . ∀ I : Π n : Nat . X (S n) ➔ ★ .
                    (Π m : Nat .Lt m n➾wSigma2·(X (S m))·(I m)) ➔
                    Valuation' n · X · I =
  Λ n .Λ X .Λ I .λ f .  f.		    

restrictValuation' ◂ ∀ m : Nat . ∀ n : Nat . ∀ p : Lte m n . ∀ X : Nat ➔ ★ . ∀ I : Π n : Nat . X (S n) ➔ ★ .
                     Valuation' n · X · I ➔ Valuation' m · X · I =
  Λ m . Λ n . Λ p . Λ X . Λ I . λ val . λ k . Λ pk . lookupValuation' -n · X · I val k -(LtLte k m n pk p) .
  
