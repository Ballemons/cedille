module proof6.

import trmC.
import trmD.
import trmReflection.
import trmInduction.
import cast.
import nat.
import natExtras.
import valuationp.
import valuation.
import true.
import bool.
import wSigma2.
import sum.
import product.
import false.

subst ◂ Π n : Nat 
      . Trm' n
      ➔ Valuation' n · Trm' · (trivValuationInv' · Trm')
      ➔ Trm' n
      = λ n . λ t . λ val . (TrmUnfold' -n t).1 · Trm' -embed' · (trivValuationInv' · Trm')
          val
	  [ β{λ n' . λ eval1 . λ eval2 . λ d . d (λ a . a (λ fn . λ arg . appe' n' (eval1 fn) (eval1 arg))) (λ a . abs' n' (eval2 (vari' n') a))} ,
	    λ n . Λ val . Λ R1 . Λ R2 . Λ reveal1 . Λ reveal2 . λ eval1 . λ eval2 . λ d .
	       d.1 · (Trm' n)
               	   (λ a . a.1 · (Trm' n) (λ fn . λ arg . appe' n (eval1.1 fn) (eval1.1 arg)))
                   (λ a . abs'  n (eval2.1  (vari' n) -triv a)) ] .

subst-app◂Π n:Nat .Π t1:Trm' n . Π t2:Trm' n .
      Π v:Valuation' n · Trm' · (trivValuationInv' · Trm') .
      {subst n (appe' n t1 t2) v ≃ appe' n (subst n t1 v) (subst n t2 v)} =
 λ n .λ t1 .λ t2 .λ v .β.

subst-abs◂Π n:Nat .Π t:Trm' (S n) . 
      Π v:Valuation' n · Trm' · (trivValuationInv' · Trm') .
      {subst n (abs' n t) v ≃ abs' n (subst n t (updateValuation' n v (vari' n)))} =
 λ n .λ t .λ v .β.

nat-eq◂Π n:Nat .Π m:Nat .Bool
  =λ n. NatRec n·(Nat ➔ Bool)
     (λ m. NatRec m·Bool tt (λ _. λ _ .ff))
     (λ n .λ p .λ m .NatRec m·Bool ff (λ m' .λ _ .p m')).

{- tests -}
-- test1◂{nat-eq Z Z≃tt}=β.
-- test2◂{nat-eq Z (S Z)≃ff}=β.
-- test3◂{nat-eq (S Z) (S Z)≃tt}=β.

lem-nat-eq◂Π n:Nat .Π m:Nat .{nat-eq n m≃tt}➔{n≃m}=
 λ n .NatInd n·(λ n:Nat .Π m:Nat .{nat-eq n m≃tt}➔{n≃m})
   (λ m .NatInd m·(λ m:Nat .{nat-eq Z m≃tt}➔{Z≃m}) (λ _.β)
     (λ m' .λ ih .λ eSm' .BoolContra -(ς eSm')·{Z≃S m'}))
   (λ n .λ ih . λ m .NatInd m·(λ m:Nat .{nat-eq (S n) m≃tt}➔{S n≃m})
     (λ eSnZ .BoolContra -(ς eSnZ)·{S n≃Z})
     (λ m .λ _ .λ e .ρ (ih m e) -β)).

eq-lt◂Π n:Nat .Π m:Nat. Lt n m➔{nat-eq m n≃ff}=
  λ n .λ m .λ l .BoolInd (nat-eq m n) ·(λ b:Bool . {nat-eq m n≃b}➔{nat-eq m n≃ff})
    (λ et .[e  = lem-nat-eq m n et]-
           [ln = ρ e -l]-
     	   (lt-eq n -ln)·{nat-eq m n≃ff})  --Note: This should be equivalent to (lt-eq n (ρ (lem-nat-eq m n et) -l))·{nat-eq m n≃ff} ?
    (λ ef .ef) β.  

isFree-aux ◂ Π n:Nat .
       Valuation' n ·(λ _:Nat .Bool)·(trivValuationInv' · (λ _:Nat .Bool)) 
     ➔ Trm' n 
     ➔ Bool =
  λ n .λ v .λ t . (TrmUnfold' -n t).1 · (λ _:Nat .Bool) -(λ _ .λ _ .Λ _ .[λ x . x , β])·(trivValuationInv' · (λ _:Nat .Bool))
   v
   [β{λ n . λ eval1 . λ eval2 . λ d . 
     d  (λ a . a (λ a1 . λ a2 . or (eval1 a1) (eval1 a2)))
        (λ a . eval2 ff a)},
   λ _ .Λ _ .Λ _ .Λ _ .Λ _ .Λ _ .λ eval1 .λ eval2 .λ d . 
     d.1·Bool
        (λ a .a.1·Bool
        (λ a1 .λ a2 .or (eval1.1 a1) (eval1.1 a2)))
          (λ a .eval2.1 ff -triv a)].

mkFreeVal ◂ Π n:Nat .Π m:Nat . Valuation' n ·(λ _:Nat .Bool)·(trivValuationInv' · (λ _:Nat .Bool)) =
 λ n . λ m . valuationFromFun' -n ·(λ _:Nat .Bool)·(trivValuationInv' · (λ _:Nat .Bool))
                           (λ n .Λ _ .mkWSigma2·Bool·(λ _:Bool .True) (nat-eq n m)  -triv).

isFree◂Π n:Nat .Π m:Nat .
       Trm' n ➔
       Bool =
  λ n .λ m .λ t .isFree-aux n (mkFreeVal n m) t.

isFree-aux-app◂Π n:Nat . Π v:Valuation' n ·(λ _:Nat .Bool)·(trivValuationInv' · (λ _:Nat .Bool)) .Π t1:Trm' n . Π t2:Trm' n .
      {isFree-aux n v (appe' n t1 t2) ≃ or (isFree-aux n v t1) (isFree-aux n v t2)} =
 λ n .λ v .λ t1 .λ t2 .β.

isFree-aux-abs◂Π n:Nat .Π t:Trm' (S n) . 
      Π v : Valuation' n ·(λ _:Nat .Bool)·(trivValuationInv' · (λ _:Nat .Bool)) .
      {isFree-aux n v (abs' n t) ≃ isFree-aux (S n) (updateValuation' n v ff) t} =      
 λ n .λ t .λ v .β.

Pupdate ◂ Π m:Nat .Trm' m➔★=
  λ m:Nat .λ t:Trm' m.
    Π n : Nat . Lte m n ➾
    Π v:Valuation' n ·(λ _:Nat .Bool)·(trivValuationInv' · (λ _:Nat .Bool)) .
    {isFree-aux m (restrictValuation' (updateValuation' n v ff)) t≃isFree-aux m (restrictValuation' v) t}.

embedPupdate ◂ Π m:Nat .Π n:Nat .∀ l:Lte m n. Π t:Trm' m .Cast ·(Pupdate m t)·(Pupdate n ((embed' m n -l).1 t))=
  λ m .λ n .Λ l .λ t .
      [ λ x .ρ ((embed' m n -l).2) -
             (λ n' .Λ lmn' .λ v .x n' -(LteLte m n n' l lmn') (λ o . Λ l' . v o -l')) ,
      β ] .

lemma-isFree-update-less ◂ Π o : Nat . Π t:Trm' o . Pupdate o t =
 λ o .λ t . TrmInd o t ·Pupdate -embedPupdate ·(trivValuationInv · Pupdate)
   (λ p .Λ lpo . mkWSigma2·(Pupdate (S p) (vari' p))·(λ _:Pupdate (S p) (vari' p). True)
     (λ n' .Λ leSpn' .λ v .
       (BoolInd (lt p n')·(λ b:Bool .{lt p n'≃b}➔{isFree-aux (S p) (restrictValuation' (updateValuation' n' v ff)) (vari' p)≃isFree-aux (S p) (restrictValuation' v) (vari' p) })
          (λ lpn' .lemma-lookup-update-less·(λ _:Nat .Bool)·(trivValuationInv' · (λ _:Nat .Bool)) n' p  lpn' ff v)
	  (λ nlpn' .BoolContra -(ρ (ς (Lt-S2inv p n' leSpn')) -nlpn')·{isFree-aux (S p) (restrictValuation' (updateValuation' n' v ff)) (vari' p) ≃ isFree-aux (S p) (restrictValuation' v) (vari' p)})
	  β))
     -triv)
   [● ,
   λ n' .Λ val .Λ R1 .Λ R2 .Λ c1 .Λ c2 . λ e1 .λ e2 .λ d .
    θ<d> (ind-Sum d)
      (λ a . θ<a> (ind-Product a)
        (λ a1 .λ a2 .λ o .Λ l . λ v . ρ+ (e1.1 a1 o -l v) -(ρ+ (e1.1 a2 o -l v) -β))) 
      (λ a .λ o .Λ l .λ v . ●) --ρ+ (e2.1 ● -triv a o -l v) -●)
   ].

lemma-isFree-update-eq ◂ Π n : Nat . 
	          Π v:Valuation' n ·(λ _:Nat .Bool)·(trivValuationInv' · (λ _:Nat .Bool)) .
		  Π t:Trm' (S n) .
	          {isFree-aux (S n) (restrictValuation' (updateValuation' n v ff)) (var' n)≃ff} =
 λ n .λ v .λ t .ρ (lemma-lookup-update-eq·(λ _:Nat .Bool)·(trivValuationInv' · (λ _:Nat .Bool)) n ff v) -β.

lem◂Π n:Nat .Π q:Nat .Lt q n➔{isFree (S n) q (var n)≃ff}=
 λ n .λ q .λ l . ρ+ (eq-lt q n l) -β.

P◂Π n:Nat .Trm' n➔★=
 λ n:Nat .λ t:Trm' n .
 Π vf:Valuation' n ·(λ _:Nat .Bool)·(trivValuationInv' · (λ _:Nat .Bool)) .
 Π v:Valuation' n·Trm' ·(trivValuationInv'·Trm') .
 (Π m:Nat . Lt m n ➾ {isFree-aux (S m) (restrictValuation' vf) (lookupValuation' v m (λ a . a))≃ff}) ➔ 
 {isFree-aux n vf (subst n t v)≃ff}.

lemma-invariant ◂ Π n : Nat .
 Π vf:Valuation' n ·(λ _:Nat .Bool)·(trivValuationInv' · (λ _:Nat .Bool)) .
 Π v:Valuation' n·Trm'·(trivValuationInv'·Trm') .
 (Π m:Nat . Lt m n ➾ {isFree-aux (S m) (restrictValuation' vf) (lookupValuation' v m (λ a . a))≃ff}) ➔ 
 Π m:Nat .Lt m (S n)➾{isFree-aux (S m) (restrictValuation' (updateValuation' n vf ff)) (lookupValuation' (updateValuation' n v (vari' n)) m (λ a . a))≃ff} =
 λ n .λ vf .λ v .λ f .λ m .Λ lmSn .
      (BoolInd (lt m n)·(λ b:Bool .{lt m n≃b} ➔
      {isFree-aux (S m) (restrictValuation' (updateValuation' n vf ff)) (lookupValuation' (updateValuation' n v (vari' n)) m (λ a . a)) ≃ ff})
        (λ e . ρ+ e -(ρ+ (lemma-isFree-update-less  (S m) ((lookupValuation' -n ·Trm'·(trivValuationInv'·Trm') v m -e).1·(Trm' (S m)) (λ a : Trm' (S m) . Λ _ . a))
	                                            n -(Lt-S2 m n e) vf)-
		      (f m -e)))
        (λ e . ρ+ e -(lemma-isFree-update-eq n vf (var' n -(S n) -(lt-nSn n))))
      β).

embedP ◂ Π m : Nat . Π n : Nat . ∀ l : Lte m n . Π t : Trm' m . Cast · (P m t) · (P n ((embed' m n -l).1 t)) =
  λ m . λ n . Λ l . λ t .
    [ λ x .ρ ((embed' m n -l).2) -
             (λ vf . λ v . λ p . x  (λ o . Λ lom . vf o -(LtLte o m n lom l))
	                            (λ o . Λ lom . v o -(LtLte o m n lom l))
				    (λ o . Λ lom . p o -(LtLte o m n lom l))) ,
     β ] .

thm◂Π n:Nat . Π t:Trm' n .P n t=
 λ n .λ t .TrmInd n t
  ·P -embedP
  ·(trivValuationInv · P)
  (valuationFromFun n·P·(trivValuationInv · P)
    (λ p. Λ lpn . mkWSigma2·(P (S p) (vari' p))·(λ _:P (S p) (vari' p). True)
      (λ vf . λ v . λ f . f p -(lt-nSn p)) -triv))
  [
   β{λ n' . λ e1 . λ e2 . λ d . d (λ a . ind-Product a (λ a1 . λ a2 . λ vf . λ v . λ f . λ x . x)) (λ a . λ vf . λ v . λ f . λ x . x)} ,
   λ n .Λ val .Λ R1 .Λ R2 .Λ c1 .Λ c2 . λ e1 .λ e2 .λ d .
    θ<d> (ind-Sum d)
      (λ a . θ<a> (ind-Product a)
        (λ a1 .λ a2 .λ vf .λ v . λ f . 
           χ {or (isFree-aux n vf (subst n a1 v)) (isFree-aux n vf (subst n a2 v)) ≃ ff}-
	   ρ (e1.1 a1 vf v f) - ρ (e1.1 a2 vf v f) - β)) 
      (λ a .λ vf .λ v . λ f .
 	  ρ (e2.1 (λ vf . λ v . λ f . f n -(lt-nSn n))
	       -triv
	       a
	       (updateValuation' n ·(λ _:Nat .Bool)·(trivValuationInv'·(λ _:Nat .Bool)) vf ff -triv)
	       (updateValuation' n ·Trm'·(trivValuationInv'·Trm') v (vari' n) -triv)
	       (lemma-invariant n vf v f))
	  - β)
  ].




