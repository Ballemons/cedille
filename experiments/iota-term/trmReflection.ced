module TrmReflection.

import product.
import sum.
import nat.
import cast.
import RecTypeI.
import valuation.
import natExtras.
import trmC.
import trmD.
import wSigma2.

varValuationInv ◂ Π n : Nat . Trm (S n) ➔ ★ = λ n : Nat. λ t : Trm (S n) . { t ≃ varU n } .

varValuation ◂ Π n : Nat . Valuation' n · Trm · varValuationInv =
 λ n . valuationFromFun' n · Trm · varValuationInv
         (λ m . Λ _ . mkWSigma2 · (Trm (S m)) · (varValuationInv m) (var m) -β) . 

inAlg ◂ TrmAlg · Trm' · Trm · varValuationInv =
  [ β{λ n . λ _ . λ _ . λ d . in n d} ,
    λ n . Λ val . Λ R1 . Λ R2 . Λ reveal1 . Λ reveal2 .
      λ e1 . λ e2 . λ d .
        in n 
         (cast 
            -(TrmIFFun
               (caste e1.1
                 -(λ a .
                     ρ ς e1.2 -
                     ε ρ ((TrmUnfold' -n (cast -reveal1 a)).2 -β{val}
                            -(λ m : Nat . λ p : Lt m n.
                                 wSigma2Induction · (Trm (S m)) · (varValuationInv m) (lookupValuation' n · Trm · varValuationInv val m p)
                                   · (λ q : wSigma2 · (Trm (S m)) · (varValuationInv m) .
                                       { q (λ a . a) ≃ varU m })
                                   (λ v . Λ e . ρ e - β))) -
                       β))
               (caste (e2.1 (var n) -β) 
                 -(λ a . ρ ς e2.2 -
                         ε ρ ((TrmUnfold' -(S n) (cast -reveal2 a)).2 -β{updateValuation' n val (var n)}
                               -(λ m . λ p .
                                   
                                   valuationInv' (S n) · Trm · varValuationInv
                                     (updateValuation' n · Trm · varValuationInv val (var n) -β)
                                     m p · { lookupValuation' (S n)
                                              (updateValuation' n val (var n)) m p (λ a . a)
                                             ≃ varU m }
                                     (Λ c . ρ c - β))) -
                           β)))
             d)].
               
toTrm ◂ Π n : Nat . Trm' n ➔ Trm n =
  λ n . λ t. (TrmUnfold' -n t).1 · Trm · varValuationInv (varValuation n) inAlg .

trmReflection ◂ Π n : Nat . Π t : Trm n . { toTrm n t ≃ t } =
  λ n . λ t .
    (TrmUnfold' -n (TrmUnfold -n t).1).2 -β{varValuation n}
      -(λ m . λ p . valuationInv' n · Trm · varValuationInv (varValuation n) m p
                     · { lookupValuation' n (varValuation n) m p (λ a . a) ≃ varU m }
                       (Λ c . ρ c - β)) .
