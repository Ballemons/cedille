module Trm.

import product.
import sum.
import nat.
import cast.
import RecTypeI.
import valuation.
import natExtras.
import trmC.
import is.
import top.
import true.
import wSigma2.
import sigma.

inTp ◂ (Nat ➔ ★) ➔ ★ = λ Trm : Nat ➔ ★ . Π n : Nat . TrmIF · (Trm n) · (Trm (S n)) ➔ Trm n.

TrmPrfAlg ◂ Π P : Π x : Nat . Trm' x ➔ ★ .
            Π I : Π n : Nat . Π m : Nat . Π p : Lt m n . P n (var' m -n -p) ➔ ★ .
            ★ =
  λ P : (Π x : Nat . Trm' x ➔ ★) .
  λ I : Π n : Nat . Π m : Nat . Π p : Lt m n . P n (var' m -n -p) ➔ ★ .
    ι alg : Top .
    Π n : Nat .
    ∀ val : Top .
    ∀ R1 : ★ . ∀ R2 : ★ . 
    ∀ reveal1 : Cast · R1 · (Trm' n) .
    ∀ reveal2 : Cast · R2 · (Trm' (S n)) .
    Π e1 : is · (Π r : R1 . P n (cast · R1 · (Trm' n) -reveal1 r)) (foldU1 alg val).
    Π e2 : is · (Π p : P (S n) (var' n -(S n) -(lt-nSn n)) . I (S n) n (lt-nSn n) p ➾
           Π r : R2 . P (S n) (cast · R2 · (Trm' (S n)) -reveal2 r)) (foldU2 n alg val) .
    Π d : TrmIF · R1 · R2 .
    P n (in' n (cast · (TrmIF · R1 · R2) · (TrmIF · (Trm' n) · (Trm' (S n)))
                  -(TrmIFFun · R1 · R2 · (Trm' n) · (Trm' (S n)) reveal1 reveal2) d)).

InductiveTrm ◂ Π n : Nat . Trm' n ➔ ★ =
  λ n : Nat . λ t : Trm' n .
    ∀ P : Π x : Nat . Trm' x ➔ ★.
    Persistent · P ➾
    ∀ I : Π n : Nat . Π m : Nat . Π p : Lt m n . P n (var' m -n -p) ➔ ★ .
    Π val : Valuation n · P · I .
    TrmPrfAlg · P · I ➔
    P n t.
    
Trm ◂ Nat ➔ ★ =
  λ n : Nat . ι x : Trm' n . InductiveTrm n x .
    
TrmRec ◂ Π n : Nat . Trm n ➔ TrmFC' · Trm' n =
  λ n . λ t . (TrmUnfold' -n t.1).1 .

foldTrm ◂ ∀ P : Π x : Nat . Trm' x ➔ ★.
          Persistent · P ➾
          ∀ I : Π n : Nat . Π m : Nat . Π p : Lt m n . P n (var' m -n -p) ➔ ★ .
          TrmPrfAlg · P · I ➔
          ∀ n : Nat .
          Valuation n · P · I ➔
          Π d : Trm n .
          P n d.1 =
   Λ P . Λ perP . Λ I . λ alg . Λ n . λ val . λ d .
     d.2 · P -perP · I val alg.

in ◂ Π n : Nat . TrmIF · (Trm n) · (Trm (S n)) ➔ Trm n =
  λ n . λ d . [in' n (cast · (TrmIF · (Trm n) · (Trm (S n))) · (TrmIF · (Trm' n) · (Trm' (S n)))
                                   -(TrmIFFun · (Trm n) · (Trm (S n)) · (Trm' n) · (Trm' (S n))
                                      [ λ x . x.1 , β] [ λ x . x.1 , β])
                                   d) ,
               Λ P . Λ perP . Λ I . λ val . λ alg . 
                     alg.2 n -β{val} · (Trm n) · (Trm (S n))
                         -[λ a . a.1,β] -[λ a . a.1,β]
                         [foldTrm · P -perP · I alg -n val,β{foldTrm alg val}]
                         [λ x . Λ ix . foldTrm · P -perP · I alg -(S n) (updateValuation n · P · I val x -ix) ,
                         β{foldU2 n alg val}]
                         d] .




var ◂ Π m : Nat . ∀ n : Nat . Lt m n ➾ Trm n =
  λ m . Λ n . Λ p . 
        [var' m -n -p ,
         Λ P . Λ perP . Λ I . λ val . λ alg . (lookupValuation1 -n · P -perP · I val m -p)].

vari ◂ Π m : Nat . Trm (S m) =
  λ m . var m -(S m) -(lt-nSn m) .

app ◂ Π n : Nat . Trm n ➔ Trm n ➔ Trm n
    = λ n .λ t1 .λ t2 . in n (in1 · (TrmAppF · (Trm n)) · (Trm (S n))
                  (pair · (Trm n) · (Trm n) t1 t2)).

abs ◂ Π n : Nat . Trm (S n) ➔ Trm n
     = λ n . λ t .
        in n (in2 · (TrmAppF · (Trm n)) · (Trm (S n)) t) .

