module Trm.

import product.
import sum.
import nat.
import cast.
import RecTypeI.
import valuation.
import natExtras.
import trmC.
import is.
import top.
import true.
import wSigma2.
import sigma.

inTp ◂ (Nat ➔ ★) ➔ ★ = λ Trm : Nat ➔ ★ . Π n : Nat . TrmIF · (Trm n) · (Trm (S n)) ➔ Trm n.

TrmPrfAlg ◂ Π Trm : Nat ➔ ★ .
            Π Trm' : Nat ➔ ★ .
            Π in : inTp · Trm' .
            Π var : varTp · Trm'.
            Π P : Π x : Nat . Trm' x ➔ ★ .
            Π I : Π m : Nat . P (S m) (var m) ➔ ★ .
            ★ =
  λ Trm : Nat ➔ ★ . λ Trm' : Nat ➔ ★ . λ in : inTp · Trm' . λ var : varTp · Trm' . λ P : (Π x : Nat . Trm' x ➔ ★) .
  λ I : Π m : Nat . P (S m) (var m) ➔ ★ .
    ι alg : Top .
    Π n : Nat .
    ∀ val : Top .
    ∀ R1 : ★ . ∀ R2 : ★ . 
    ∀ Reveal1 : Cast · R1 · (Trm n) .
    ∀ Reveal2 : Cast · R2 · (Trm (S n)) .
    ∀ reveal1 : Cast · R1 · (Trm' n) .
    ∀ reveal2 : Cast · R2 · (Trm' (S n)) .
    Π e1 : is · (Π r : R1 . P n (cast · R1 · (Trm' n) -reveal1 r)) (foldU1 alg val).
    Π e2 : is · (Π p : P (S n) (var n) . I n p ➾ Π r : R2 . P (S n) (cast · R2 · (Trm' (S n)) -reveal2 r)) (foldU2 n alg val) .
    Π d : TrmIF · R1 · R2 .
    P n (in n (cast · (TrmIF · R1 · R2) · (TrmIF · (Trm' n) · (Trm' (S n)))
                  -(TrmIFFun · R1 · R2 · (Trm' n) · (Trm' (S n)) reveal1 reveal2) d)).

InductiveTrm ◂ Π Trm : Nat ➔ ★ .
               Π Trm' : Nat ➔ ★ .
               Π in : inTp · Trm' .
               Π var : varTp · Trm' .               
               Π n : Nat . Trm' n ➔ ★ =
  λ Trm : Nat ➔ ★ . λ Trm' : Nat ➔ ★ . λ in : inTp · Trm' . λ var : varTp · Trm' .
  λ n : Nat . λ t : Trm' n .
    ∀ P : Π x : Nat . Trm' x ➔ ★.
    ∀ I : Π m : Nat . P (S m) (var m) ➔ ★ .
    Π val : Valuation n · Trm' var · P · I .
    TrmPrfAlg · Trm · Trm' in var · P · I ➔
    P n t.
    
TrmF ◂ (Nat ➔ ★) ➔ Nat ➔ ★ =
  λ Trm : Nat ➔ ★ . λ n : Nat . ι x : Trm' n . InductiveTrm · Trm · Trm' in' var' n x .
    
Trm ◂ Nat ➔ ★ = Reci · Nat · TrmF .

TrmFFun ◂ RecFunctori · Nat · TrmF =
  Λ X . Λ Y . λ c .
    [ Λ i . λ d .
      [ d.1 ,
        Λ P . Λ I . λ val . λ alg .
          d.2 · P val
            [β{alg},
             λ n . Λ val . Λ R1 . Λ R2 . Λ Reveal1 . Λ Reveal2 .
             Λ reveal1 . Λ reveal2 . λ e1 . λ e2 . λ d .
               alg.2 n -val · R1 · R2
                 -[λ x . c.1 -n (Reveal1.1 x),ρ c.2 - ρ Reveal1.2 - β{λ x . c (Reveal1 x)}]
                 -[λ x . c.1 -(S n) (Reveal2.1 x),ρ c.2 - ρ Reveal2.2 - β{λ x . c (Reveal2 x)}]
                 -reveal1 -reveal2 e1 e2 d] ] ,  β].
        
TrmFold ◂ ∀ n : Nat . TrmF · Trm n ➔ Trm n =
  casti · Nat · (TrmF · Trm) · Trm -(recFoldi · Nat · TrmF -TrmFFun) .

TrmUnfold ◂ ∀ n : Nat . Trm n ➔ TrmF · Trm n =
  casti · Nat · Trm · (TrmF · Trm) -(recUnfoldi · Nat · TrmF -TrmFFun) .

TrmRec ◂ Π n : Nat . Trm n ➔ TrmFC' · Trm' n =
  λ n . λ t . (TrmUnfold' -n (TrmUnfold -n t).1).1 .

foldTrm ◂ ∀ P : Π x : Nat . Trm' x ➔ ★ .
          ∀ I : Π m : Nat . P (S m) (var' m) ➔ ★ .
          TrmPrfAlg · Trm · Trm' in' var' · P · I ➔
          ∀ n : Nat .
          Valuation n · Trm' var' · P · I ➔
          Π d : Trm n .
          P n (TrmUnfold -n d).1 =
   Λ P . Λ I . λ alg . Λ n . λ val . λ d .
     (TrmUnfold -n d).2 · P · I val alg.

in ◂ Π n : Nat . TrmIF · (Trm n) · (Trm (S n)) ➔ Trm n =
  λ n . λ d . TrmFold -n [in' n (cast · (TrmIF · (Trm n) · (Trm (S n))) · (TrmIF · (Trm' n) · (Trm' (S n)))
                                   -(TrmIFFun · (Trm n) · (Trm (S n)) · (Trm' n) · (Trm' (S n))
                                      [ λ x . (TrmUnfold -n x).1 , β] [ λ x . (TrmUnfold -(S n) x).1 , β])
                                   d) ,
                          Λ P . Λ I . λ val . λ alg . alg.2 n -β{val} · (Trm n) · (Trm (S n))
                                                  -(castId · (Trm n)) -(castId · (Trm (S n)))
                                                  -[λ a . (TrmUnfold -n a).1,β] -[λ a . (TrmUnfold -(S n) a).1,β]
                                                  [foldTrm · P alg -n val,β{foldTrm alg val}]
                                                  [λ x . Λ ix . foldTrm · P alg -(S n) (updateValuation n · Trm' -var' · P val x -ix) ,
                                                   β{foldU2 n alg val}]
                                                  d] .

out-t1 ◂ Nat ➔ ★ = λ n : Nat . Sigma · Nat · (λ m : Nat . Lt m n).
out-t2 ◂ Nat ➔ ★ = λ n : Nat . TrmIF · (Trm n) · (Trm (S n)) .
out-t ◂ Nat ➔ ★ = λ n : Nat . Sum · (out-t1 n) · (out-t2 n).
out ◂ Π n : Nat . Trm n ➔ out-t n =
  λ n . λ t .
    (TrmUnfold -n t).2 · (λ n : Nat . λ _ : Trm' n . out-t n) · (λ n : Nat . λ _ : out-t (S n) . True)
      (λ m . λ p . mkWSigma2 · (out-t (S m)) · (λ _ : out-t (S m) . True)
                     (in1 · (out-t1 (S m)) · (out-t2 (S m)) (mksigma · Nat · (λ k : Nat . Lt k (S m)) m (lt-nSn m))) -triv)
      [ β{λ n' . λ e1 . λ e2 . λ d . in2 d} ,
        λ n . Λ val . Λ R1 . Λ R2 . Λ Reveal1 . Λ Reveal2 . Λ reveal1 . Λ reveal2 . λ e1 . λ e2 . λ d .
          in2 · (out-t1 n) · (out-t2 n)
            (cast -(TrmIFFun Reveal1 Reveal2) d) ].

var ◂ Π n : Nat . Trm (S n) =
  λ n . 
     TrmFold -(S n)
        [var' n ,
         Λ P . Λ I . λ val . λ alg . (val n (lt-nSn n)).1 · (P (S n) (var' n)) (λ a . Λ _ . a)].

embed-var ◂ Π n : Nat . Π m : Nat . Lt n m ➔ Trm' m =
  λ n . λ m' . λ pm' . (lt-S n m' pm').1 · (Trm' m') (λ pm' . λ em' . ρ ς em' - (var' pm')) .

embedTrm' ◂ Π n : Nat . Trm' n ➔ Π m : Nat . Lt n m ➔ Trm' m =
  λ n . λ t .
    (TrmUnfold' -n t).1 · (λ m : Nat . Π m : Nat . Lt n m ➔ Trm' m)
      · (λ n' : Nat . λ _ : Π m : Nat . Lt n m ➔ Trm' m . True)
      (λ m . λ p .
        mkWSigma2 · (Π m' : Nat . Lt n m' ➔ Trm' m')
                  · (λ _ : Π m' : Nat . Lt n m' ➔ Trm' m' . True)
             (embed-var n) -triv)
      [ β{λ n' . λ e1 . λ e2 . λ d . λ m' . λ pm' . d (λ a . a (λ x . λ y . appe' m' (e1 x m' pm') (e1 y m' pm'))) (λ a . abs' m' (e2 (embed-var n) a (S m') (LtS2 n m' pm')))} ,
        λ n' . Λ val . Λ R1 . Λ R2 . Λ c1 . Λ c2 . λ e1 . λ e2 . λ d .
          λ m' . λ pm' .
            d.1 · (Trm' m')
              (λ a . a.1 · (Trm' m') (λ x . λ y . appe' m' (e1.1 x m' pm') (e1.1 y m' pm')))
              (λ a . abs' m' (e2.1 (embed-var n) -triv a (S m') (LtS2 n m' pm')))] .

