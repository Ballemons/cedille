module substitution.

import trmC.
import trmD.
import nat.
import valuation.
import true.
import sigma.
import natExtras.
import trmInduction.
import sum.
import product.
import posvector.
import wSigma2.

max◂Nat➔Nat➔Nat=
  λ m .NatRec m (λ n:Nat .n) (λ pm .λ ih .λ n .S (NatRec n pm (λ pn .λ _ .ih pn))).
  
lemma-max-add ◂ ∀ n1 : Nat . ∀ n2 : Nat . ∀ n3 : Nat . ∀ n4 : Nat .
	        Lte n1 n2 ➔ Lte n3 n4 ➔ Lte (S (max n1 n3)) (S (add n2 n4))
	      = ● .

max-lte-fst◂Π n:Nat .Π m:Nat .Lte n (max n m)=●.
max-lte-snd◂Π n:Nat .Π m:Nat .Lte m (max n m)=●.

embedTrm-var◂Π n:Nat .Π m:Nat .Lte (S n) m➔Trm m
  =λ n .λ m .λ l .ind-sigma·Nat·(λ p:Nat .{S p ≃ m}) (lte-S n m l)
	    	    ·(λ s:Sigma·Nat·(λ p:Nat .{S p ≃ m}) .Trm m) (λ n .λ e .ρ ς e -(var n)).

embedTrm◂Π n:Nat .Trm n➔Π m:Nat .Lte n m➔Trm m=
  λ n .λ t .TrmInd n t
    ·(λ n:Nat .λ t:Trm n .Π m:Nat .Lte n m➔Trm m)
    ·(λ n:Nat .λ _:Π m:Nat .Lte (S n) m➔Trm m. True)
     (posPV·(λ m:Nat. wSigma2·(Π m':Nat .Lte (S m) m'➔Trm m')·(λ _ :Π m':Nat .Lte (S m) m'➔Trm m' .True))
      (λ m .mkWSigma2·(Π m':Nat .Lte (S m) m'➔Trm m')·(λ _ :Π m':Nat .Lte (S m) m'➔Trm m' .True) (embedTrm-var m) -triv)
      n)
     [β{λ n' . λ e1 . λ e2 . λ d . λ m . λ l . d (λ a . ind-Product a (λ a1 . λ a2 . app m (e1 a1 m l) (e1 a2 m l))) (λ a . abs m (e2 (λ m . λ l . ind-sigma (lte-S n' m l) (λ n'' . λ e . var n'')) a (S m) (LteS n' m l)))},
     λ n .Λ val .Λ R1 .Λ R2 .Λ c1 .Λ c2 .Λ C1 .Λ C2 .λ e1 .λ e2 .λ d .λ m .λ l.
       θ<d> (ind-Sum d)
         (λ a .θ<a> (ind-Product a)
	   (λ a1 .λ a2 .app m (e1.1 a1 m l) (e1.1 a2 m l)))
	 (λ a .abs m
	    (e2.1 (embedTrm-var n) -triv a (S m) (LteS n m l)))
     ].


subst ◂ Π n : Nat . 
      Trm n ➔
      Valuation n·Trm var·(λ n:Nat .λ t:Trm n .Sigma·Nat·(λ m:Nat .Trm m))
      		   ·(λ _:Nat .λ _:Sigma·Nat·(λ m:Nat .Trm m) .True)       ➔
      Sigma·Nat·(λ m:Nat .Trm m)=
  λ n .λ t .λ v .TrmRec n t·
    (λ _:Nat .Sigma·Nat·(λ m:Nat .Trm m))·
    (λ m:Nat .λ _:Sigma·Nat·(λ m:Nat .Trm m) .True)
    v
    [β{λ n' . λ eval1 . λ eval2 . λ d . d (λ a . a (λ a1 . λ a2 . ind-sigma (eval1 a1) (λ n'' . λ ra1 . ind-sigma (eval1 a2) (λ m . λ ra2 . [ p = max n'' m ] - mksigma p (app p (embedTrm n'' ra1 p (max-lte-fst n'' m)) (embedTrm m ra2 p (max-lte-snd n'' m))))))) (λ a . ind-sigma (eval2 (mksigma (S n') (var n')) a) (λ n'' . λ ra . mksigma n'' (abs n'' (embedTrm n'' ra (S n'') (lte-nSn n'')))))},
    λ n .Λ _ .Λ _ .Λ _ .Λ _ .Λ _ .
      λ eval1 .λ eval2 .λ d .
        d.1·(Sigma·Nat·(λ m:Nat .Trm m))
	  (λ a .a.1·(Sigma·Nat·(λ m:Nat .Trm m)) (λ a1 .λ a2 .
	    ind-sigma·Nat·(λ m:Nat .Trm m) (eval1.1 a1)·(λ s:Sigma·Nat·(λ m:Nat .Trm m).(Sigma·Nat·(λ m:Nat .Trm m)))
		  (λ n .λ ra1 .ind-sigma·Nat·(λ m:Nat .Trm m) (eval1.1 a2)·(λ s:Sigma·Nat·(λ m:Nat .Trm m).(Sigma·Nat·(λ m:Nat .Trm m)))
		    (λ m .λ ra2 .[p=max n m]-
		       	    	 mksigma·Nat·(λ m:Nat .Trm m) p
				     	(app p
					   (embedTrm n ra1 p (max-lte-fst n m))
					   (embedTrm m ra2 p (max-lte-snd n m)))))))
          (λ a .ind-sigma·Nat·(λ m:Nat .Trm m)
	       	   (eval2.1 (mksigma·Nat·(λ m:Nat .Trm m) (S n) (var n)) -triv a)·(λ s:Sigma·Nat·(λ m:Nat .Trm m).(Sigma·Nat·(λ m:Nat .Trm m)))
	       	   (λ n . λ ra .mksigma·Nat·(λ m:Nat .Trm m) n
		                        (abs n (embedTrm n ra (S n) (lte-nSn n))))) 
     ].


