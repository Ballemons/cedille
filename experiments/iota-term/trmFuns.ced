module trmFuns .

import trmC.
import trmD.
import product.
import sum.
import nat.
import true.
import wSigma2.
import valuation.

sizeTrm ◂ Π n : Nat . Trm n ➔ Nat =
  λ n . λ t .
    TrmRec n t · (λ _ : Nat . Nat)
      · (λ n : Nat . λ _ : Nat . True)
      (λ _ . λ _ . mkWSigma2 · Nat · (λ _ : Nat . True)
                     (S Z) -triv)
      [β{λ n' . λ eval1 . λ eval2 . λ d . d (λ a . a (λ fun . λ arg . S (add (eval1 fun) (eval1 arg)))) (λ a . S (eval2 (S Z) a))},
      λ n . Λ val . Λ R1 . Λ R2 . Λ _ . Λ _ .
       λ eval1 . λ eval2 . λ d .
       d.1 · Nat
         (λ a . a.1 · Nat
           (λ fun . λ arg . S (add (eval1.1 fun) (eval1.1 arg))))
         (λ a . S (eval2.1 (S Z) -triv a))] .

exampleTrm ◂ Trm Z = in Z (in2 · (TrmAppF · (Trm Z)) · (Trm (S Z))
                            (var Z)) .

sizeExampleTrm ◂ Nat = sizeTrm Z exampleTrm.

{- Constructors -}
app ◂ Π n : Nat . Trm n ➔ Trm n ➔ Trm n
    = λ n .λ t1 .λ t2 . in n (in1 · (TrmAppF · (Trm n)) · (Trm (S n))
                  (pair · (Trm n) · (Trm n) t1 t2)).

abs ◂ Π n : Nat . Trm (S n) ➔ Trm n
     = λ n . λ t .
        in n (in2 · (TrmAppF · (Trm n)) · (Trm (S n)) t) .

{- Substitution -}
subst ◂ Π n : Nat 
      . Π var : varTp · Trm
      . Trm n
      ➔ Valuation n · Trm var · (λ n : Nat . λ t : Trm n . Trm n)
      		    · (λ n' : Nat . λ _ : Trm (S n') . True)
      ➔ Trm n
      = λ n .λ m .λ t .λ v .TrmRec n t·Trm·(λ n':Nat .λ _ : Trm (S n') .True) v
      	[β{λ n . λ eval1 . λ eval2 . λ d .
          d   (λ a . a (λ a1 . λ a2 . app n (eval1 a1) (eval1 a2)))
	      (λ a . abs n (eval2 (var n) a))},
	λ n . Λ val . Λ R1 . Λ R2 . Λ _ . Λ _ .
        λ eval1 . λ eval2 . λ d .
          d.1 · (Trm n)
	      (λ a . a.1 · (Trm n) (λ a1 . λ a2 . app n (eval1.1 a1) (eval1.1 a2)))
	      (λ a . abs n (eval2.1 (var n) -triv a))].


