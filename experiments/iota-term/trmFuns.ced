module trmFuns .

import trmC.
import trmD.
import product.
import sum.
import nat.
import natExtras.
import true.
import wSigma2.
import valuation.
import trmInduction.
import cast.

sizeTrm ◂ Π n : Nat . Trm n ➔ Nat =
  λ n . λ t .
    TrmRec n t · (λ _ : Nat . Nat)
      · (λ n : Nat . λ _ : Nat . True)
      (valuationFromFun n·Trm -var·(λ n:Nat .λ _:Trm n .Nat)·(λ n:Nat .λ _:Nat . True) (λ _ . λ _ . mkWSigma2 · Nat · (λ _ : Nat . True) (S Z) -triv))
      [β{λ n' . λ eval1 . λ eval2 . λ d . d (λ a . a (λ fun . λ arg . S (add (eval1 fun) (eval1 arg)))) (λ a . S (eval2 (S Z) a))},
      λ n . Λ val . Λ R1 . Λ R2 . Λ _ . Λ _ .
       λ eval1 . λ eval2 . λ d .
       d.1 · Nat
         (λ a . a.1 · Nat
           (λ fun . λ arg . S (add (eval1.1 fun) (eval1.1 arg))))
         (λ a . S (eval2.1 (S Z) -triv a))] .

max◂Nat➔Nat➔Nat=
  λ m . 
    NatRec m (λ n : Nat . n) (λ pm . λ ih . λ n . S (NatRec n pm (λ pn . λ _ . ih pn)))
  .

test = max (S Z) (S (S (S Z))).

lemma-max-add ◂ ∀ n1 : Nat . ∀ n2 : Nat . ∀ n3 : Nat . ∀ n4 : Nat .
	        Lte n1 n2 ➔ Lte n3 n4 ➔ Lte (S (max n1 n3)) (S (add n2 n4))
	      = ● .

depthTrm ◂ Π n : Nat . Trm n ➔ Nat =
  λ n . λ t .
    TrmRec n t · (λ _ : Nat . Nat)
      ·(λ n:Nat .λ _:Nat .True)
      (valuationFromFun n·Trm -var·(λ n:Nat .λ _:Trm n .Nat)·(λ n:Nat .λ _:Nat . True) (λ _ . λ _ . mkWSigma2 · Nat · (λ _ : Nat . True) (S Z) -triv))
      [β{λ n' . λ eval1 . λ eval2 . λ d . d (λ a . a (λ fun . λ arg . S (max (eval1 fun) (eval1 arg)))) (λ a . S (eval2 (S Z) a))},
      λ n . Λ val . Λ R1 . Λ R2 . Λ _ . Λ _ .
       λ eval1 . λ eval2 . λ d .
       d.1 · Nat
         (λ a . a.1 · Nat
           (λ fun . λ arg . S (max (eval1.1 fun) (eval1.1 arg))))
         (λ a . S (eval2.1 (S Z) -triv a))] .

exampleTrm ◂ Trm Z = in Z (in2 · (TrmAppF · (Trm Z)) · (Trm (S Z))
                            (var Z)) .

sizeExampleTrm ◂ Nat = sizeTrm Z exampleTrm.

depthSizeThm-var◂Π n:Nat .Lte (depthTrm (S n) (var n)) (sizeTrm (S n) (var n))=
  λ n . in2 · (Lt (depthTrm (S n) (var n)) (sizeTrm (S n) (var n)))
            · { (depthTrm (S n) (var n)) ≃ (sizeTrm (S n) (var n)) }
            β.

depthSizeThm◂Π n:Nat .Π t:Trm n .Lte (depthTrm n t) (sizeTrm n t) 
 =λ n .λ t .TrmInd n t
    ·(λ n:Nat .λ t:Trm n .Lte (depthTrm n t) (sizeTrm n t))
    ·(λ n:Nat .λ p:Lte (depthTrm (S n) (var n)) (sizeTrm (S n) (var n)) .True)
    (valuationFromFun n·Trm -var
      ·(λ n:Nat .λ t:Trm n .Lte (depthTrm n t) (sizeTrm n t))
      ·(λ n:Nat .λ p:Lte (depthTrm (S n) (var n)) (sizeTrm (S n) (var n)) .True)
      (λ m .λ p .mkWSigma2·(Lte (depthTrm (S m) (var m)) (sizeTrm (S m) (var m)))
                        ·(λ p : Lte (depthTrm (S m) (var m)) (sizeTrm (S m) (var m)) . True)
			(depthSizeThm-var m)
			-triv))
    [●,
    λ n .Λ val .Λ R1 .Λ R2 .Λ c1 .Λ c2 .Λ C1 .Λ C2 .λ e1 .λ e2 .λ d .
      θ<d> (ind-Sum d)
       (λ a . θ<a> (ind-Product a)
                (λ fun . λ arg .
                   lemma-max-add
                     -(depthTrm n (cast -C1 fun)) -(sizeTrm n (cast -C1 fun))
                     -(depthTrm n (cast -C1 arg)) -(sizeTrm n (cast -C1 arg))
                     (e1.1 fun) (e1.1 arg)))
       (λ a . [d ◂ { (depthTrm n (in n (cast (in2 a)))) ≃ (S (depthTrm (S n) (cast a))) } =
                       ε β] -
              [d' ◂ { updateValuation' n (valuationFromFun n (λ _ . λ _ . mkWSigma2 (S Z)))
                        (S Z) ≃
                      valuationFromFun (S n) (λ _ . λ _ . mkWSigma2 (S Z))} = β ] - 
              LteS (depthTrm (S n) (cast -C2 a)) (sizeTrm (S n) (cast -C2 a))
                (e2.1 (depthSizeThm-var n) -triv a))].

{- Constructors -}
app ◂ Π n : Nat . Trm n ➔ Trm n ➔ Trm n
    = λ n .λ t1 .λ t2 . in n (in1 · (TrmAppF · (Trm n)) · (Trm (S n))
                  (pair · (Trm n) · (Trm n) t1 t2)).

abs ◂ Π n : Nat . Trm (S n) ➔ Trm n
     = λ n . λ t .
        in n (in2 · (TrmAppF · (Trm n)) · (Trm (S n)) t) .

{- Substitution -}
subst ◂ Π n : Nat 
      . Trm n
      ➔ Valuation n · Trm var · (λ n : Nat . λ t : Trm n . Trm n)
      		    · (λ n' : Nat . λ _ : Trm (S n') . True)
      ➔ Trm n
      = λ n . λ t .λ v .TrmRec n t·Trm·(λ n':Nat .λ _ : Trm (S n') .True) v
      	[β{λ n . λ eval1 . λ eval2 . λ d .
          d   (λ a . a (λ a1 . λ a2 . app n (eval1 a1) (eval1 a2)))
	      (λ a . abs n (eval2 (var n) a))},
	λ n . Λ val . Λ R1 . Λ R2 . Λ _ . Λ _ .
        λ eval1 . λ eval2 . λ d .
          d.1 · (Trm n)
	      (λ a . a.1 · (Trm n) (λ a1 . λ a2 . app n (eval1.1 a1) (eval1.1 a2)))
	      (λ a . abs n (eval2.1 (var n) -triv a))].

{- Interpret function ? -}
