import list.
import nat.
import vector.


zero ⇐ ∀ X : ★ . X → X =
  Λ X . λ a . a .
  
succ ⇐ ∀ A : ★ . ∀ B : ★ . ∀ C : ★ . ((List · B) → C) → (List · (A → B)) → List · A → C =
  Λ A . Λ B . Λ C . λ n . λ fs . λ as . n (zap · A · B fs as) .

one-num ⇐ ∀ A : ★ . ∀ B : ★ . (List · (A → B)) → (List · A) → (List · B) =
  Λ A . Λ B . succ · A · B · (List · B) (zero · (List · B)) .

two-num ⇐ ∀ A : ★ . ∀ B : ★ . ∀ C : ★ . (List · (A → B → C)) → (List · A) → (List · B) → (List · C) =
  Λ A . Λ B . Λ C . succ · A · (B → C) · ((List · B) → (List · C)) (one-num · B · C) .

% where cn is a numeral built from the above terms
% and n is the size of the lists to zip over
zipWithN ⇐ ∀ A : ★ . ∀ B : ★ . ((List · A) → B) → A → Nat → B =
  Λ A . Λ B . λ cn . λ f . λ n . cn (repeat · A f n) .

% Vector implementation
zeroV = zero .

succV ⇐ ∀ A : ★ . ∀ B : ★ . ∀ C : ★ . Π n : Nat . ((Vector · B n) → C) → (Vector · (A → B) n) → Vector · A n → C =
  Λ A . Λ B . Λ C . λ vN . λ n . λ fs . λ as . n (Vzap · A · B vN fs as) .

one-numV ⇐ ∀ A : ★ . ∀ B : ★ . Π n : Nat . (Vector · (A → B) n) → (Vector · A n) → (Vector · B n) =
  Λ A . Λ B . λ n . succV · A · B · (Vector · B n) n (zeroV · (Vector · B n)) .

two-numV ⇐ ∀ A : ★ . ∀ B : ★ . ∀ C : ★ . Π n : Nat . (Vector · (A → B → C) n) → (Vector · A n) → (Vector · B n) → (Vector · C n) =
  Λ A . Λ B . Λ C . λ n . succV · A · (B → C) · ((Vector · B n) → (Vector · C n)) n (one-numV · B · C n) .

zipWithNV ⇐ ∀ A : ★ . ∀ B : ★ . Π n : Nat . ((Vector · A n) → B) → A → B =
  Λ A . Λ B . λ n . λ cn . λ f . cn (Vrepeat · A n f) .

% instances - map and zipWith
zipWith1 = zipWithN · (Nat → Nat) · ((List · Nat) → (List · Nat)) (one-num · Nat · Nat) .

zipWith2 = zipWithN · (Nat → Nat → Nat) · ((List · Nat) → (List · Nat) → (List · Nat)) (two-num · Nat · Nat · Nat) .

testList1 = (Cons · Nat (S Z) (Cons · Nat Z (Nil · Nat))) .

testList2 = (Cons · Nat (S Z) (Cons · Nat (S Z) (Nil · Nat))) .

map-test = zipWith1 (λ x . add x (S Z)) (S (S Z)) testList1 !

zipWith-test = zipWith2 add (S (S Z)) testList1 testList2 !
