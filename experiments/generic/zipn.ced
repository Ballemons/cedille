import list.
import nat.
import vector.
import bool.

import listt.


% type computation functions
arrTy ⇐ 𝒌listt → ★ → ★ =
  λ L : 𝒌listt . λ ret : ★ . L · (λ h : ★ . λ r : ★ . h → r) · ret .

arrTy-test ⇐ ★ = arrTy · test-listt · (List · Bool) !

arrTyList ⇐ 𝒌listt → ★ → ★ =
  λ L : 𝒌listt . λ ret : ★ . L · (λ h : ★ . λ r : ★ . (List · h) → r) · (List · ret) .

arrTyList-test ⇐ ★ = arrTyList · test-listt · (List · Bool) !


% nmap functions
nlist-helper ⇐ Π In : 𝒌listt . Π Ret : ★ . Nat → (List · (arrTy · In · Ret)) → (arrTyList · In · Ret) =
  λ In . λ Ret . λ m . λ fs . ● .

nlist-map ⇐ Π In : 𝒌listt . Π Ret : ★ . Nat → (arrTy · In · Ret) → (arrTyList · In · Ret) =
  λ In . λ Ret . λ m . λ f . nlist-helper · In · Ret m (repeat · (arrTy · In · Ret) f m) .
