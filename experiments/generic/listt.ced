import bool.
import nat.
import list.
import pair.

% Aaron's work
𝒌listt ⇐ □ = (★ → ★ → ★) → ★ → ★.

const ⇐ ★ → 𝒌listt → 𝒌listt =
  λ h : ★ . λ t : 𝒌listt.
    λ c : ★ → ★ → ★ . λ n : ★ .
      c · h · (t · c · n) .

nilt ⇐ 𝒌listt = λ c : ★ → ★ → ★ . λ n : ★ . n .
test-listt ⇐ 𝒌listt = const · Bool · (const · Nat · nilt) !

% list of "type-constructors"
𝒌listt2 ⇐ □ = ((★ → ★ ) → ★ → ★ ) → ★ → ★ .

const2 ⇐ (★ → ★ ) → 𝒌listt2 → 𝒌listt2 =
  λ h : (★ → ★ ) . λ t : 𝒌listt2 .
    λ c : (★ → ★ ) → ★ → ★ . λ n : ★ .
      c · h · (t · c · n) .

nilt2 ⇐ 𝒌listt2 = λ c : (★ → ★ ) → ★ → ★ . λ n : ★ . n .
test2-listt ⇐ 𝒌listt2 = const2 · List · (const2 · (Pair · Bool) · nilt2) !
