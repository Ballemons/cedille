open import bool
open import bool-thms2
open import eq
open import product
open import product-thms
open import bool-relations

module minmax {A : Set} (_‚â§A_ : A ‚Üí A ‚Üí ùîπ)
              (‚â§A-trans : transitive _‚â§A_)
              (‚â§A-total : total _‚â§A_) where

‚â§A-refl : reflexive _‚â§A_ 
‚â§A-refl = total-reflexive _‚â§A_ ‚â§A-total

min : A ‚Üí A ‚Üí A
min = Œª x y ‚Üí if x ‚â§A y then x else y

max : A ‚Üí A ‚Üí A
max = Œª x y ‚Üí if x ‚â§A y then y else x

min-‚â§1 : ‚àÄ{x y : A} ‚Üí min x y ‚â§A x ‚â° tt
min-‚â§1{x}{y} with keep (x ‚â§A y)
min-‚â§1{x}{y} | tt , p rewrite p = ‚â§A-refl
min-‚â§1{x}{y} | ff , p with ‚â§A-total p 
min-‚â§1{x}{y} | ff , p | q rewrite p = q

min-‚â§2 : ‚àÄ{x y : A} ‚Üí min x y ‚â§A y ‚â° tt
min-‚â§2{x}{y} with keep (x ‚â§A y)
min-‚â§2{x}{y} | tt , p = cont p
  where h : x ‚â§A y ‚â° tt ‚Üí min x y ‚â° x
        h p rewrite p = refl
        cont : x ‚â§A y ‚â° tt ‚Üí min x y ‚â§A y ‚â° tt
        cont p rewrite h p | p = refl

min-‚â§2{x}{y} | ff , p rewrite p = ‚â§A-refl

max-‚â§1 : ‚àÄ{x y : A} ‚Üí x ‚â§A max x y ‚â° tt
max-‚â§1{x}{y} with keep (x ‚â§A y)
max-‚â§1{x}{y} | tt , p = cont p
  where h : x ‚â§A y ‚â° tt ‚Üí max x y ‚â° y
        h p rewrite p = refl
        cont : x ‚â§A y ‚â° tt ‚Üí x ‚â§A max x y ‚â° tt
        cont p rewrite h p | p = refl
max-‚â§1{x}{y} | ff , p rewrite p = ‚â§A-refl

max-‚â§2 : ‚àÄ{x y : A} ‚Üí y ‚â§A max x y ‚â° tt
max-‚â§2{x}{y} with keep (x ‚â§A y)
max-‚â§2{x}{y} | tt , p rewrite p = ‚â§A-refl
max-‚â§2{x}{y} | ff , p with ‚â§A-total p
max-‚â§2{x}{y} | ff , p | q rewrite p = q

min1-mono : ‚àÄ{x x' y : A} ‚Üí x ‚â§A x' ‚â° tt ‚Üí min x y ‚â§A min x' y ‚â° tt
min1-mono{x}{x'}{y} p with keep (x ‚â§A y) | keep (x' ‚â§A y)
min1-mono p | tt , q | tt , q' rewrite q | q' = p
min1-mono p | tt , q | ff , q' rewrite q' = min-‚â§2
min1-mono p | ff , q | tt , q' rewrite ‚â§A-trans p q' with q 
min1-mono p | ff , q | tt , q' | ()
min1-mono p | ff , q | ff , q' rewrite q | q' = ‚â§A-refl

min2-mono : ‚àÄ{x y y' : A} ‚Üí y ‚â§A y' ‚â° tt ‚Üí min x y ‚â§A min x y' ‚â° tt
min2-mono{x}{y}{y'} p with keep (x ‚â§A y) | keep (x ‚â§A y') 
min2-mono p | tt , q | tt , q' rewrite q | q' = ‚â§A-refl
min2-mono p | tt , q | ff , q' rewrite ‚â§A-trans q p with q'
min2-mono p | tt , q | ff , q' | ()
min2-mono p | ff , q | tt , q' rewrite q' = min-‚â§1
min2-mono p | ff , q | ff , q' rewrite q | q' = p

max2-mono : ‚àÄ{x y y' : A} ‚Üí y ‚â§A y' ‚â° tt ‚Üí max x y ‚â§A max x y' ‚â° tt
max2-mono{x}{y}{y'} p with keep (x ‚â§A y) | keep (x ‚â§A y')
max2-mono p | tt , q | tt , q' rewrite q | q' = p
max2-mono p | tt , q | ff , q' with ‚â§A-trans p (‚â§A-total q') 
max2-mono p | tt , q | ff , q' | q'' rewrite q | q' = q''
max2-mono p | ff , q | tt , q' rewrite q = cont q' 
  where h : ‚àÄ{x y' : A} ‚Üí x ‚â§A y' ‚â° tt ‚Üí max x y' ‚â° y'
        h q' rewrite q' = refl
        cont : ‚àÄ{x y' : A} ‚Üí x ‚â§A y' ‚â° tt ‚Üí x ‚â§A max x y' ‚â° tt
        cont{x}{y'} q' rewrite h q' = q'

max2-mono p | ff , q | ff , q' rewrite q | q' = ‚â§A-refl
