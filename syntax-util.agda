module syntax-util where

open import lib
open import cedille-types

toplevel-drop-type-parens : type ‚Üí type
toplevel-drop-type-parens (Ltype (TpParens x)) = toplevel-drop-type-parens x
toplevel-drop-type-parens (Ltype x) = (Ltype x)
toplevel-drop-type-parens x = x

kind-to-string : kind ‚Üí string
tk-to-string : tk ‚Üí string
type-to-string : type ‚Üí string
ltype-to-string : ltype ‚Üí string
term-to-string : term ‚Üí string
lterm-to-string : lterm ‚Üí string
ip-to-string : ip ‚Üí string
al-to-string : al ‚Üí string
ctorset-to-string : ctorset ‚Üí string
liftingType-to-string : liftingType ‚Üí string

kind-to-string (KndArrow k k') = "(" ^ kind-to-string k ^ " ‚Üí " ^ kind-to-string k' ^ ")"
kind-to-string (KndParens k) = kind-to-string k
kind-to-string (KndPi x u k) = "(Œ† " ^ x ^ " : " ^ tk-to-string u ^ " . " ^ kind-to-string k ^ ")"
kind-to-string (KndTpArrow x k) = "(" ^ ltype-to-string x ^ " ‚Üí " ^ kind-to-string k ^ ")"
kind-to-string (KndVar x) = x
kind-to-string Star = "‚òÖ"

tk-to-string (Tkk k) = kind-to-string k
tk-to-string (Tkt t) = type-to-string t

type-to-string (AbsTp1 b x t1 t2) = "(" ^ (ip-to-string b) ^ " " ^ x ^ " : " ^ type-to-string t1 ^ " . " ^ type-to-string t2 ^ ")"
type-to-string (AbsTp2 b x t1 t2) = "(" ^ (al-to-string b) ^ " " ^ x ^ " : " ^ tk-to-string t1 ^ " . " ^ type-to-string t2 ^ ")"
type-to-string (Ltype x) = ltype-to-string x
type-to-string (Nu x k Œ∏ t) = "(ŒΩ" ^ " " ^ x ^ " : " ^ kind-to-string k ^ " | " ^ ctorset-to-string Œ∏ ^ " . " ^ type-to-string t ^ ")"
type-to-string (TpArrow x t) = "(" ^ ltype-to-string x ^ " ‚Üí " ^  type-to-string t ^ ")"

ip-to-string Iota = "Œπ"
ip-to-string Pi = "Œ†"

al-to-string All = "‚àÄ"
al-to-string Lambda = "Œª"

ltype-to-string (Lft x) = "‚Üë " ^ (liftingType-to-string x) ^ " -"
ltype-to-string (TpApp t t‚ÇÅ) = "(" ^ ltype-to-string t ^ " " ^ ltype-to-string t‚ÇÅ ^ ")"
ltype-to-string (TpAppt t x) = "(" ^ ltype-to-string t ^ " " ^ lterm-to-string x ^ ")"
ltype-to-string (TpParens x) = type-to-string x
ltype-to-string (TpVar x) = x
ltype-to-string U = "ùì§"

term-to-string (App t t‚ÇÅ) = "(" ^ term-to-string t ^ " " ^ term-to-string t‚ÇÅ ^ ")"
term-to-string (Lterm x) = lterm-to-string x
term-to-string (Var x) = x

ctorset-to-string (Add x x‚ÇÅ Œ∏) = term-to-string x ^ " ‚àà " ^ type-to-string x‚ÇÅ ^ " , " ^ ctorset-to-string Œ∏
ctorset-to-string Empty = "¬∑"

liftingType-to-string (LiftArrow t t‚ÇÅ) = "(" ^ liftingType-to-string t ^ " ‚Üí " ^ liftingType-to-string t‚ÇÅ ^ ")"
liftingType-to-string (LiftParens t) = liftingType-to-string t
liftingType-to-string (LiftPi x x‚ÇÅ t) = "(œÄ " ^ x ^ " : " ^ type-to-string x‚ÇÅ ^ " . " ^ liftingType-to-string t ^ ")"
liftingType-to-string LiftStar = "‚òÜ"

lterm-to-string (Lam x x‚ÇÅ) = "(Œª " ^ x ^ " . " ^ term-to-string x‚ÇÅ ^ ")"
lterm-to-string (Paren x) = term-to-string x