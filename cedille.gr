cedille

Start

start

Syntactic

Cmds : start -> ows cmds ows .
CmdsStart : cmds -> cmd .
CmdsNext : cmds -> cmd ws cmds .

DefCmd : cmd -> def ows '.' .
Echeck : cmd -> class ows 'by' ows evidence ows '⇐' ows evidence ows '.'.
Kcheck : cmd -> kind ows '⇐' ows '□' ows 'by' ows evidence ows '.'.
Print : cmd -> 'print' ws var ows '.'.
Normalize : cmd -> 'normalize' ws term ows '.'.
SynthTerm : cmd -> var ows '∷' ws term ows '=' ows evidence ows '.'.
SynthType : cmd -> var ows '∷type' ows type ows '=' ows evidence ows '.'.

Tdefine : def -> var ows '=' ows term.
Edefine : def -> var ows '∷' ows class ows '=' ows evidence ows '⇐' ows evidence .
Kdefine : def -> kvar ows '∷' ows kind ows '⇐' ows '□' ows '=' ows evidence.

Tp : class -> term ows '⇐' ows type.
Knd : class -> type ows '⇐' ows kind.

App : lterm -> lterm ws lterm .
Var : lterm -> var .
Lam : term -> 'λ' ows var ows '.' ows term .
embed : term -> lterm .
Parens : lterm -> '(' ows term ows ')' . 

AbsTp1 : type -> ip ows var ows ':' ows type ows '.' ows type .
AbsTp2 : type -> al ows var ows ':' ows tk ows '.' ows type .
TpArrow : type -> ltype ows '→' ows type.
embed : type -> ltype.
Nu : type -> 'ν' ows var ows ':' ows kind ows '|' ows ctorset ows '.' ows type.

Empty : ctorset -> '·'.
Add : ctorset -> term ows '∈' ows type ows ',' ows ctorset .

U : ltype -> '𝓤'.
Lft : ltype -> '↑' ows term ows ':' ows lliftingType .
TpParens : ltype -> '(' ows type ows ')'.
TpApp : ltype -> ltype ws '·' ws ltype.
TpAppt : ltype -> ltype ws lterm.
TpVar : ltype -> var.

KndPi : kind -> 'Π' ows var ows ':' ows tk ows '.' ows kind .
KndArrow : kind -> kind ows '→' ows kind .
KndTpArrow : kind -> ltype ows '→' ows kind .
Star : kind -> '★'.
KndParens : kind -> '(' ows kind ows ')'.
KndVar : kind -> kvar.

LiftStar : liftingType -> '☆'. 
LiftPi : liftingType -> 'Π' ows var ows ':' ows type ows '.' ows liftingType .
LiftArrow : liftingType -> liftingType ows '→' ows liftingType.
LiftTpArrow : liftingType -> type ows '→' ows liftingType.
LiftParens : lliftingType -> '(' ows liftingType ows ')'.
embed : liftingType -> lliftingType.

Iota : ip -> 'ι'.
Pi : ip -> 'Π'.
All : al -> '∀'.
Lambda : al -> 'λ'.
Tkt : tk -> type .
Tkk : tk -> kind .

checkCast : castDir -> '⇐'.
synthCast : castDir -> '⇒'.

Cast : evidence -> 'χ' ws evidence ows castDir ows evidence .
Xi : evidence -> 'ξ' ows var opt_eclass ows '.' ows evidence .
EtaAll : evidence -> 'η∀' ws evidence ws term .
Pair : evidence -> '[' ows evidence ows ',' ows evidence ows ']'.
Enu : evidence -> 'ν' ws var ows ',' ows var ows '.' ows 
                  '[' ows evidence ows ',' ows evidence ows ',' ows evidence ows ',' ows evidence ows ']'.
Ctor : evidence -> 'ζ' ws evidence ows ':' ows type .
Ctora : evidence -> 'ζ' ws var .
Eprint : evidence -> '?' showCtxt ows evidence.
Elift : evidence -> '↑' ws var ows '.' ows evidence ows ':' ows evidence .
EliftCong : evidence -> '↑c' ws evidence .
LamCong : evidence -> 'ξ' ows '.' ows evidence .
Rbeta : evidence -> 'rβ' ws evidence ws term ows '⇒' ows evidence .
embed : evidence -> levidence.
Elet : evidence -> 'δ' ws def ws '-' ws evidence.

One : index -> '1'.
Two : index -> '2'.

Sym : levidence -> '~' ows levidence.
Trans : levidence -> levidence ows '·' ows levidence .
Eapp : levidence -> levidence ws levidence .
Eappt : levidence -> '{' ows levidence ws term ows '}'.
Eappk : levidence -> '〈' ows levidence ws type ows '〉'.
Proj : levidence -> levidence ows '.' ows index.
Eparens : levidence -> '(' ows evidence ows ')'.
Earrow : levidence -> levidence ows '⇒' ows levidence.
EholeNamed : levidence -> '●' showCtxt var.
Ehole : levidence -> '●' showCtxt.
Beta : levidence -> 'β' .
RbetaLift : levidence -> 'rβ↑' ws num.
EtaLift : levidence -> 'η↑' ws num.
Evar : levidence -> evar.
Check : levidence -> '✓'.

showCtxtYes : showCtxt -> '!' .
showCtxtNo : showCtxt -> .

EclassSome : opt_eclass -> ows ':' ows evidence .
EclassNone : opt_eclass -> .

Lexical

varone -> ['a' - 'z'] | ['A' - 'Z'] | quote | '-'.

kvar -> '𝒌' var?.

var -> varone+ .

evar -> var | kvar.

numone -> ['0' - '9'].

num -> numone+.

anychar => varone | '\t' | space | '𝒌' | '%' | '1' | '2' | '∷' | '✓' | '□' | 'Π' | 'ι' | 'λ' | '∀' | 'π' | '★' | '☆' | '·' | 'ξ' | '⇐' | '∈' | 'ν' | '→' | '↑' | '𝓤' | '●' | '(' | ')' | ':' | '.' | 'χ' | 'β' | 'δ' | 'ζ' | '[' | ']' | ',' | '!' | '{' | '}' | '⇒' | '?' | '~' | 'η' | numone.

comment => '%' anychar* '\n'.

aws => ('\n' | '\t' | space | comment).
ws => aws+.
ows => aws* .

Vars
  b w x y z zz

Rules
  App(x,App(y,z)) -> App(App(x,y),z)
  LiftArrow(LiftArrow(x,y),z) -> LiftArrow(x,LiftArrow(y,z))
  LiftArrow(LiftTpArrow(x,y),z) -> LiftTpArrow(x,LiftArrow(y,z))
  LiftTpArrow(TpArrow(x,y),z) -> LiftTpArrow(x,LiftTpArrow(y,z))
  LiftArrow(LiftPi(w,x,y),z) -> LiftPi(w,x,LiftArrow(y,z))
  

  KndArrow(KndArrow(x,y),z) -> KndArrow(x,KndArrow(y,z))
  KndArrow(KndTpArrow(x,y),z) -> KndTpArrow(x,KndArrow(y,z))
  KndArrow(KndPi(w,x,y),z) -> KndPi(w,x,KndArrow(y,z))

  TpApp(x,TpApp(y,z)) -> TpApp(TpApp(x,y),z)
  TpApp(x,TpAppt(y,z)) -> TpAppt(TpApp(x,y),z)
  TpAppt(x,App(y,z)) -> TpAppt(TpAppt(x,y),z)
  Eapp(x,Eapp(y,z)) -> Eapp(Eapp(x,y),z)

  Earrow(Earrow(x,y),z) -> Earrow(x,Earrow(y,z))
  Eapp(Earrow(x,y),z) -> Earrow(x,Eapp(y,z))
  Eapp(x,Earrow(y,z)) -> Earrow(Eapp(x,y),z)

  Proj(Earrow(x,y),z) -> Earrow(x,Proj(y,z))
  Proj(Eapp(x,y),z) -> Eapp(x,Proj(y,z))

  Trans(Trans(x,y),z) -> Trans(x,Trans(y,z))
  Sym(Trans(x,y)) -> Trans(Sym(x),y)
  Sym(Eapp(x,y)) -> Eapp(Sym(x),y)
  Eapp(Trans(x,y),z) -> Trans(x,Eapp(y,z))
  Eapp(x,Trans(y,z)) -> Trans(Eapp(x,y),z)

  Trans(Earrow(x,y),z) -> Earrow(x,Trans(y,z))
  Trans(x,Earrow(y,z)) -> Earrow(Trans(x,y),z)
  Sym(Earrow(x,y)) -> Earrow(Sym(x),y)

  Proj(Sym(x),y) -> Sym(Proj(x,y))
  Proj(Trans(x,y),z) -> Trans(x,Proj(y,z))