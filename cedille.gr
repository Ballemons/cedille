cedille

Start

start

Syntactic

Cmds : start -> ows cmds ows .
CmdsStart : cmds -> cmd .
CmdsNext : cmds -> cmd ws cmds .

DefCmd : cmd -> def ows '.' .
Echeck : cmd -> class ows '.'.
Rec : cmd -> 'rec' ws var decls indices ows '|' ctordecls ows '=' ows type ws 'with' udefs ows '.'.

Decl : decl -> '(' ows var ows ':' ows tk ows ')' .

DeclsNil : decls -> .
DeclsCons : decls -> ows decl decls.

Indicese : indices -> .
Indicesne : indices -> ows ':' decls.

Ctordeclse : ctordecls -> .
Ctordeclsene : ctordecls -> ctordeclsne.
CtordeclseneStart : ctordeclsne -> ows ctordecl.
CtordeclseneNext : ctordeclsne -> ows ctordecl ows ',' ctordeclsne.

Ctordecl : ctordecl -> var ows ':' ows type.

Udefse : udefs -> .
Udefsne : udefs -> udefsne.
UdefsneNext : udefsne -> ows udef ows ',' udefsne.
UdefsneStart : udefsne -> ows udef.

Udef : udef -> var ows '=' ows term.

Normalize : cmd -> 'normalize' ws term ows '.'.
Import : cmd -> 'import' ws var ows '.'.

Edefine : def -> var ows '=' ows class .
ClassTerm : class -> term ows '⇐' ows type.
ClassType : class -> type ows '⇐' ows kind.
ClassKind : cmd -> kind ows '⇐' ows '□'.

Var : lterm -> var .
Parens : lterm -> '(' ows term ows ')' . 
Hole : lterm -> '●' .
App : term -> term ws maybeErased term .
Lam : term -> lam ows var optClass ows '.' ows term .
embed : term -> lterm .

NotErased : maybeErased -> .
Erased : maybeErased -> '-' ows .

NoClass : optClass -> .
SomeClass : optClass -> ':' ows tk .

ErasedLambda : lam -> 'Λ' .
KeptLambda : lam -> 'λ' .

Abs : type -> binder ows var ows ':' ows tk ows '.' ows type .
TpArrow : type -> ltype ows '→' ows type.
embed : type -> ltype.

Lft : ltype -> '↑' ows term ows ':' ows lliftingType .
TpParens : ltype -> '(' ows type ows ')'.
TpApp : ltype -> ltype ws '·' ws ltype.
TpAppt : ltype -> ltype ws lterm.
TpVar : ltype -> var.
TpEq : ltype -> lterm ows '≃' ows lterm .

KndPi : kind -> 'Π' ows var ows ':' ows tk ows '.' ows kind .
KndArrow : kind -> kind ows '→' ows kind .
KndTpArrow : kind -> ltype ows '→' ows kind .
Star : kind -> '★'.
KndParens : kind -> '(' ows kind ows ')'.
KndVar : kind -> var.

LiftStar : liftingType -> '☆'. 
LiftPi : liftingType -> 'Π' ows var ows ':' ows type ows '.' ows liftingType .
LiftArrow : liftingType -> liftingType ows '→' ows liftingType.
LiftTpArrow : liftingType -> type ows '→' ows liftingType.
LiftParens : lliftingType -> '(' ows liftingType ows ')'.
embed : liftingType -> lliftingType.

Pi : binder -> 'Π'.
All : binder -> '∀'.
TpLambda : binder -> 'λ'.

Tkt : tk -> type .
Tkk : tk -> kind .

Lexical

alpha -> ['a' - 'z'] | ['A' - 'Z'] .

numpunct -> ['0' - '9'] | quote | '-'.

var -> alpha (alpha | numpunct)* .

%numone -> ['0' - '9'].
%num -> numone+.

anychar => alpha | numpunct | '\t' | space | '%' | '□' | 'Π' | 'ι' | 'λ' | '∀' | 'π' | '★' | '☆' | '·' | '⇐' | '→' | '↑' | '𝓤' | '●' | '(' | ')' | ':' | '.' | '[' | ']' | ',' | '!' | '{' | '}' | '⇒' | '?' .

comment => '%' anychar* '\n'.

aws => ('\n' | '\t' | space | comment).
ws => aws+.
ows => aws* .

Vars
  c b w x y z zz e1 e2

Rules
  App(x,e1,App(y,e2,z)) -> App(App(x,e1,y),e2,z)
  App(Lam(b,x,w,y),e1,z) -> Lam(b,x,w,App(y,e1,z))
  App(App(w, e1,Lam(b,x,c,y)), e2, z) -> App(w, e1,Lam(b,x,c,App(y, e2, z)))

  LiftArrow(LiftArrow(x,y),z) -> LiftArrow(x,LiftArrow(y,z))
  LiftArrow(LiftTpArrow(x,y),z) -> LiftTpArrow(x,LiftArrow(y,z))
  LiftTpArrow(TpArrow(x,y),z) -> LiftTpArrow(x,LiftTpArrow(y,z))
  LiftArrow(LiftPi(w,x,y),z) -> LiftPi(w,x,LiftArrow(y,z))
  

  KndArrow(KndArrow(x,y),z) -> KndArrow(x,KndArrow(y,z))
  KndArrow(KndTpArrow(x,y),z) -> KndTpArrow(x,KndArrow(y,z))
  KndArrow(KndPi(w,x,y),z) -> KndPi(w,x,KndArrow(y,z))

  TpApp(x,TpApp(y,z)) -> TpApp(TpApp(x,y),z)
  TpApp(x,TpAppt(y,z)) -> TpAppt(TpApp(x,y),z)
