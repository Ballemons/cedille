import RecType.
module Mendler (F : ★ ➔ ★) {fmap : RecFunctor · F}.
import Pair.

AlgM ◂ ★ ➔ ★ = λ A : ★. ∀ R : ★. (R ➔ A) ➔ F · R ➔ A.

FixM ◂ ★ = ∀ A : ★. AlgM · A ➔ A.

foldM ◂ ∀ A : ★. AlgM · A ➔ FixM ➔ A =  Λ A. λ alg. λ fix. fix alg.

inFixM ◂ F · FixM ➔ FixM =  λ fexp. Λ A. λ alg. alg (foldM alg) fexp.

PrfAlgM ◂ Π X : ★. (X ➔ ★) ➔ (F · X ➔ X) ➔ ★ =
  λ X : ★. λ Q : X ➔ ★. λ alg : (F · X ➔ X). 
    ∀ R : ★. ∀ c : Cast · R · X. 
    (Π r : R. Q (cast -c r)) ➔
    Π gr : F · R.  Q (alg (cast -(fmap -c) gr)).

IsIndFixM ◂ FixM ➔ ★ = λ x : FixM. ∀ Q : FixM ➔ ★. PrfAlgM · FixM · Q inFixM ➔ Q x.

FixIndM ◂ ★ = ι x : FixM. IsIndFixM x.

unInd ◂ Cast · FixIndM · FixM = [λ x. x.1, β].

tc1 ◂ F · FixIndM ➔ FixM = λ v. inFixM (cast -(fmap -unInd) v).

tc2 ◂ Π v : F · FixIndM. IsIndFixM (tc1 v) =
  λ v. Λ Q. λ q. q -unInd (λ r. r.2 q) v.

inFixIndM ◂ F · FixIndM ➔ FixIndM = λ v. [ tc1 v, tc2 v ].

WithWitness ◂ Π X : ★. Π Y : ★. (X ➔ ★) ➔ (X ➔ Y) ➔ Y ➔ ★ =
  λ X : ★. λ Y : ★. λ Q : X ➔ ★. λ cast : X ➔ Y. λ y : Y.
    Sigma · X · (λ x : X. ι _ : {y ≃ cast x}. Q x).

Lift ◂ (FixIndM ➔ ★) ➔ FixM ➔ ★ = λ Q : FixIndM ➔ ★. λ e : FixM.
  WithWitness · FixIndM · FixM · Q (λ x. x.1) e.

LiftProp1 ◂ ∀ Q : FixIndM ➔ ★. ∀ e : FixIndM. (Lift · Q e.1) ➔ Q e =
  Λ Q. Λ e. λ pr. ρ (sndS pr).1 - (sndS pr).2.

LiftProp2 ◂ ∀ Q : FixIndM  ➔ ★. Π e : FixIndM . Q e ➔ Lift · Q e.1 =
  Λ Q. λ e. λ pr. sigma e · (λ x' : FixIndM. ι _ : {e ≃ x'}. Q x') [β{pr}, pr].

LiftProp3 ◂ ∀ Q : FixIndM ➔ ★. ∀ e : FixM. Lift · Q e ➔ FixIndM =
  Λ Q. Λ e. λ pr. fstS pr.

LiftProp4 ◂ ∀ Q : FixIndM ➔ ★. ∀ e : FixM. ∀ p : Lift · Q e. {LiftProp3 p ≃ e} =
  Λ Q. Λ e. Λ pr. ρ (sndS pr).1 - β.

convIH ◂ 
 ∀ Q : FixIndM ➔ ★. 
 ∀ Y : FixM ➔ ★.   
 Π Yprop1 : ∀ e : FixIndM. Y e.1 ➔ Q e.
 Π Yprop2 : Π e : FixIndM. Q e ➔ Y e.1.
 Π Yprop3 : ∀ e : FixM. Y e ➔ FixIndM.
 Π Yprop4 : ∀ e : FixM. ∀ p : Y e. {Yprop3 p ≃ e}.
 PrfAlgM · FixIndM · Q inFixIndM ➔
 PrfAlgM · FixM · Y inFixM =
  Λ Q. Λ Y. λ qp3. λ qp4. λ qp1. λ qp2. λ q. Λ R. Λ cst. λ ih. λ gr.
    [cst2 ◂ Cast · R · FixIndM =
      [λ r. φ (qp2 -(cast -cst r) -(ih r)) - (qp1 -(cast -cst r) (ih r)) {r}, β]] -
    qp4 (inFixIndM (cast -(fmap -cst2) gr)) (q -cst2 (λ r. qp3 -(cast -cst2 r) (ih r)) gr).

MendlerInd ◂ Π e : FixIndM. ∀ Q : FixIndM ➔ ★. PrfAlgM · FixIndM · Q inFixIndM ➔ Q e = 
  λ e. Λ Q. λ q. LiftProp1 -e
    (e.2 (convIH (LiftProp1 · Q) (LiftProp2 · Q) (LiftProp3 · Q) (LiftProp4 · Q) q)).

inductionIteration ◂ ∀ Q : FixIndM ➔ ★. Π p : PrfAlgM · FixIndM · Q inFixIndM.
    Π fr : F · FixIndM. {MendlerInd (inFixIndM fr) p ≃ p (λ x. MendlerInd x p) fr} =
  Λ Q. λ p. λ fr. β.

outAlgM ◂ PrfAlgM · FixIndM · (λ _ : FixIndM. F · FixIndM) inFixIndM =
  Λ R. Λ c. λ x. cast -(fmap -c).

outFunLemma ◂ {outAlgM ≃ λ x. λ y. y} = β.

outFixIndM ◂ FixIndM ➔ F · FixIndM =
  λ e. MendlerInd e · (λ _ : FixIndM. F · FixIndM) outAlgM.

lambek1 ◂ Π v:  F · FixIndM. {outFixIndM (inFixIndM v) ≃ v} = λ v. β.

lambek2 ◂ Π v: FixIndM. {inFixIndM (outFixIndM v) ≃ v} = 
  λ v. θ<v> (MendlerInd v) (Λ R. Λ c. λ ih. λ fr. β).

