import RecType.
module MendlerI (I : ★) (F : (I ➔ ★) ➔ I ➔ ★) {fmap : RecFunctorI · I · F}.
import Pair.

AlgM ◂ ★ ➔ I ➔ ★ = λ A : ★. λ i : I. ∀ R : I ➔ ★. (R i ➔ A) ➔ F · R i ➔ A.

FixM ◂ I ➔ ★ = λ i : I. ∀ A : ★. AlgM · A i ➔ A.

foldM ◂ ∀ A : ★. ∀ i : I. AlgM · A i ➔ FixM i ➔ A =  Λ A. Λ i. λ alg. λ fix. fix alg.

inFixM ◂ ∀ i : I. F · FixM i ➔ FixM i = Λ i. λ fexp. Λ A. λ alg. alg (foldM -i alg) fexp.

PrfAlgM ◂ Π X : I ➔ ★. (Π i : I. X i ➔ ★) ➔ (∀ i : I. F · X i ➔ X i) ➔ ★ =
  λ X : I ➔ ★. λ Q : Π i : I. X i ➔ ★. λ alg : (∀ i : I. F · X i ➔ X i). 
    ∀ R : I ➔ ★. ∀ c : CastI · I · R · X. 
    (∀ i : I. Π r : R i. Q i (castI -c -i r)) ➔
    ∀ i : I. Π gr : F · R i.  Q i (alg -i (castI -(fmap -c) -i gr)).

IsIndFixM ◂ Π i : I. FixM i ➔ ★ = λ i : I. λ x : FixM i.
  ∀ Q : Π i : I. FixM i ➔ ★. PrfAlgM · FixM · Q inFixM ➔ Q i x.

FixIndM ◂ I ➔ ★ = λ i : I. ι x : FixM i. IsIndFixM i x.

inFixIndM ◂ ∀ i : I. F · FixIndM i ➔ FixIndM i = Λ i. λ v.
  [outInd ◂ CastI · I · FixIndM · FixM = [Λ i. λ x. x.1, β]] -
  [inFixM -i (castI -(fmap -outInd) -i v),
   Λ Q. λ q. q -outInd (Λ i. λ r. r.2 q) -i v ].

WithWitness ◂ Π X : ★. Π Y : ★. (X ➔ ★) ➔ (X ➔ Y) ➔ Y ➔ ★ =
  λ X : ★. λ Y : ★. λ Q : X ➔ ★. λ cast : X ➔ Y. λ y : Y.
    Sigma · X · (λ x : X. ι _ : {y ≃ cast x}. Q x).

Lift ◂ (Π i : I. FixIndM i ➔ ★) ➔ Π i : I. FixM i ➔ ★ =
  λ Q : Π i : I. FixIndM i ➔ ★. λ i : I. λ e : FixM i.
    WithWitness · (FixIndM i) · (FixM i) · (Q i) (λ x. x.1) e.

LiftProp1 ◂ ∀ Q : Π i : I. FixIndM i ➔ ★.
            ∀ i : I. ∀ e : FixIndM i. (Lift · Q i e.1) ➔ Q i e =
  Λ Q. Λ i. Λ e. λ pr. ρ (sndS pr).1 - (sndS pr).2.

LiftProp2 ◂ ∀ Q : Π i : I. FixIndM i ➔ ★. ∀ i : I. Π e : FixIndM i. Q i e ➔ Lift · Q i e.1 =
  Λ Q. Λ i. λ e. λ pr. sigma e · (λ x' : FixIndM i. ι _ : {e ≃ x'}. Q i x') [β{pr}, pr].

LiftProp3 ◂ ∀ Q : Π i : I. FixIndM i ➔ ★. ∀ i : I. ∀ e : FixM i. Lift · Q i e ➔ FixIndM i =
  Λ Q. Λ i. Λ e. λ pr. fstS pr.

LiftProp4 ◂ ∀ Q : Π i : I. FixIndM i ➔ ★.
            ∀ i : I. ∀ e : FixM i. ∀ p : Lift · Q i e. {LiftProp3 p ≃ e} =
  Λ Q. Λ i. Λ e. Λ pr. ρ (sndS pr).1 - β.

convIH ◂ 
 ∀ Q : Π i : I. FixIndM i ➔ ★.
 ∀ Y : Π i : I. FixM i ➔ ★.
 Π Yprop1 : ∀ i : I. ∀ e : FixIndM i. Y i e.1 ➔ Q i e.
 Π Yprop2 : ∀ i : I. Π e : FixIndM i. Q i e ➔ Y i e.1.
 Π Yprop3 : ∀ i : I. ∀ e : FixM i. Y i e ➔ FixIndM i.
 Π Yprop4 : ∀ i : I. ∀ e : FixM i. ∀ p : Y i e. {Yprop3 p ≃ e}.
 PrfAlgM · FixIndM · Q inFixIndM ➔
 PrfAlgM · FixM · Y inFixM =
  Λ Q. Λ Y. λ qp3. λ qp4. λ qp1. λ qp2. λ q. Λ R. Λ cst. λ ih. Λ i. λ gr.
    [cst2 ◂ CastI · I · R · FixIndM =
      [Λ i. λ r. φ (qp2 -i -(castI -cst -i r) -(ih -i r)) -
        (qp1 -i -(castI -cst -i r) (ih -i r)) {r}, β]] -
    qp4 -i (inFixIndM -i (castI -(fmap -cst2) -i gr))
      (q -cst2 (Λ i. λ r. qp3 -i -(castI -cst2 -i r) (ih -i r)) -i gr).

MendlerInd ◂ ∀ i : I. Π e : FixIndM i. ∀ Q : Π i : I. FixIndM i ➔ ★.
             PrfAlgM · FixIndM · Q inFixIndM ➔ Q i e = 
  Λ i. λ e. Λ Q. λ q. LiftProp1 -i -e
    (e.2 (convIH (LiftProp1 · Q) (LiftProp2 · Q) (LiftProp3 · Q) (LiftProp4 · Q) q)).

inductionIteration ◂ ∀ Q : Π i : I. FixIndM i ➔ ★. Π p : PrfAlgM · FixIndM · Q inFixIndM.
                     ∀ i : I. Π fr : F · FixIndM i.
                     {MendlerInd (inFixIndM fr) p ≃ p (λ x. MendlerInd x p) fr} =
  Λ Q. λ p. Λ i. λ fr. β.

outAlgM ◂ PrfAlgM · FixIndM · (λ i : I. λ _ : FixIndM i. F · FixIndM i) inFixIndM =
  Λ R. Λ c. λ x. castI -(fmap -c).

outFunLemma ◂ {outAlgM ≃ λ x. λ y. y} = β.

outFixIndM ◂ ∀ i : I. FixIndM i ➔ F · FixIndM i =
  Λ i. λ e. MendlerInd -i e · (λ i : I. λ _ : FixIndM i. F · FixIndM i) outAlgM.

lambek1 ◂ ∀ i : I. Π v : F · FixIndM i. {outFixIndM (inFixIndM v) ≃ v} = Λ i. λ v. β.

lambek2 ◂ ∀ i : I. Π v : FixIndM i. {inFixIndM (outFixIndM v) ≃ v} = 
  Λ i. λ v. θ<i v> (MendlerInd -i v) (Λ R. Λ c. λ ih. Λ i. λ fr. β).

