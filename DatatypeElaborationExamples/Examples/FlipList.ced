module FlipList.
import Top.
import Cast.
import Pair.

-- It is indeed possible to use large indices, but unfortunately requires that
-- we generate a new Mendler file with the specific number (and kinds) of
-- parameters.

{-
data List : ★ ➔ ★ ➔ ★ where
  Nil : ∀ A : ★. ∀ B : ★. List · A · B
  Cons : A ➔ List · A · B ➔ List · B · A
-}


CastP2 ◂ (★ ➔ ★ ➔ ★) ➔ (★ ➔ ★ ➔ ★) ➔ ★ = λ A : ★ ➔ ★ ➔ ★. λ B : ★ ➔ ★ ➔ ★.
  ∀ P1 : ★. ∀ P2 : ★. Cast · (A · P1 · P2) · (B · P1 · P2).

FunctorP2 ◂ ((★ ➔ ★ ➔ ★) ➔ ★ ➔ ★ ➔ ★) ➔ ★ = λ F : (★ ➔ ★ ➔ ★) ➔ ★ ➔ ★ ➔ ★.
  ∀ X : ★ ➔ ★ ➔ ★. ∀ Y : ★ ➔ ★ ➔ ★. CastP2 · X · Y ➾ CastP2 · (F · X) · (F · Y).

AlgM ◂ ((★ ➔ ★ ➔ ★) ➔ ★ ➔ ★ ➔ ★) ➔ ★ ➔ ★ ➔ ★ ➔ ★ =
  λ F : (★ ➔ ★ ➔ ★) ➔ ★ ➔ ★ ➔ ★. λ A : ★. λ P1 : ★. λ P2 : ★.
    ∀ R : ★ ➔ ★ ➔ ★. (R · P1 · P2 ➔ A) ➔ F · R · P1 · P2 ➔ A.

FixM ◂ ((★ ➔ ★ ➔ ★) ➔ ★ ➔ ★ ➔ ★) ➔ ★ ➔ ★ ➔ ★ =
  λ F : (★ ➔ ★ ➔ ★) ➔ ★ ➔ ★ ➔ ★. λ P1 : ★. λ P2 : ★. ∀ A : ★. AlgM · F · A · P1 · P2 ➔ A.

foldM ◂ ∀ F : (★ ➔ ★ ➔ ★) ➔ ★ ➔ ★ ➔ ★. ∀ A : ★. ∀ P1 : ★. ∀ P2 : ★. AlgM · F · A · P1 · P2 ➔ FixM · F · P1 · P2 ➔ A =  Λ F. Λ A. Λ P1. Λ P2. λ alg. λ fix. fix alg.

inFixM ◂ ∀ F : (★ ➔ ★ ➔ ★) ➔ ★ ➔ ★ ➔ ★. ∀ P1 : ★. ∀ P2 : ★. F · (FixM · F) · P1 · P2 ➔ FixM · F · P1 · P2 = Λ F. Λ P1. Λ P2. λ fexp. Λ A. λ alg. alg (foldM alg) fexp.

PrfAlgM ◂ Π F : (★ ➔ ★ ➔ ★) ➔ ★ ➔ ★ ➔ ★. FunctorP2 · F ➔ Π X : ★ ➔ ★ ➔ ★. (Π P1 : ★. Π P2 : ★. X · P1 · P2 ➔ ★) ➔ (∀ P1 : ★. ∀ P2 : ★. F · X · P1 · P2 ➔ X · P1 · P2) ➔ ★ =
  λ F : (★ ➔ ★ ➔ ★) ➔ ★ ➔ ★ ➔ ★. λ fmap : FunctorP2 · F. λ X : ★ ➔ ★ ➔ ★. λ Q : Π P1 : ★. Π P2 : ★. X · P1 · P2 ➔ ★. λ alg : (∀ P1 : ★. ∀ P2 : ★. F · X · P1 · P2 ➔ X · P1 · P2). 
    ∀ R : ★ ➔ ★ ➔ ★. ∀ c : CastP2 · R · X. 
    (∀ P1 : ★. ∀ P2 : ★. Π r : R · P1 · P2. Q · P1 · P2 (cast -(c · P1 · P2) r)) ➔
    ∀ P1 : ★. ∀ P2 : ★. Π gr : F · R · P1 · P2.  Q · P1 · P2 (alg (cast -(fmap -c · P1 · P2) gr)).

IsIndFixM ◂ Π F : (★ ➔ ★ ➔ ★) ➔ ★ ➔ ★ ➔ ★. FunctorP2 · F ➔ Π P1 : ★. Π P2 : ★. FixM · F · P1 · P2 ➔ ★ =
  λ F : (★ ➔ ★ ➔ ★) ➔ ★ ➔ ★ ➔ ★. λ fmap : FunctorP2 · F. λ P1 : ★. λ P2 : ★. λ x : FixM · F · P1 · P2.
    ∀ Q : Π P1 : ★. Π P2 : ★. FixM · F · P1 · P2 ➔ ★. PrfAlgM · F fmap · (FixM · F) · Q (inFixM · F) ➔ Q · P1 · P2 x.

FixIndM ◂ Π F : (★ ➔ ★ ➔ ★) ➔ ★ ➔ ★ ➔ ★. FunctorP2 · F ➔ ★ ➔ ★ ➔ ★ =
  λ F : (★ ➔ ★ ➔ ★) ➔ ★ ➔ ★ ➔ ★. λ fmap : FunctorP2 · F. λ P1 : ★. λ P2 : ★.
    ι x : FixM · F · P1 · P2. IsIndFixM · F fmap · P1 · P2 x.

inFixIndM ◂ ∀ F : (★ ➔ ★ ➔ ★) ➔ ★ ➔ ★ ➔ ★. ∀ fmap : FunctorP2 · F. ∀ P1 : ★. ∀ P2 : ★. F · (FixIndM · F fmap) · P1 · P2 ➔ FixIndM · F fmap · P1 · P2 =
  Λ F. Λ fmap. Λ P1. Λ P2. λ v.
  [outInd ◂ CastP2 · (FixIndM · F fmap) · (FixM · F) =
    Λ P1. Λ P2. [λ x. x.1, β]] -
  [inFixM (cast -(fmap -outInd · P1 · P2) v),
   Λ Q. λ q. q -outInd (Λ P1. Λ P2. λ r. r.2 q) v ].

WithWitness ◂ Π X : ★. Π Y : ★. (X ➔ ★) ➔ (X ➔ Y) ➔ Y ➔ ★ =
  λ X : ★. λ Y : ★. λ Q : X ➔ ★. λ cast : X ➔ Y. λ y : Y.
    Sigma · X · (λ x : X. ι _ : {y ≃ cast x}. Q x).

Lift ◂ Π F : (★ ➔ ★ ➔ ★) ➔ ★ ➔ ★ ➔ ★. Π fmap : FunctorP2 · F. (Π P1 : ★. Π P2 : ★. FixIndM · F fmap · P1 · P2 ➔ ★) ➔ Π P1 : ★. Π P2 : ★. FixM · F · P1 · P2 ➔ ★ =
  λ F : (★ ➔ ★ ➔ ★) ➔ ★ ➔ ★ ➔ ★. λ fmap : FunctorP2 · F. λ Q : Π P1 : ★. Π P2 : ★. FixIndM · F fmap · P1 · P2 ➔ ★. λ P1 : ★. λ P2 : ★. λ e : FixM · F · P1 · P2.
    WithWitness · (FixIndM · F fmap · P1 · P2) · (FixM · F · P1 · P2) · (Q · P1 · P2) (λ x. x.1) e.

LiftProp1 ◂ ∀ F : (★ ➔ ★ ➔ ★) ➔ ★ ➔ ★ ➔ ★. ∀ fmap : FunctorP2 · F. ∀ Q : Π P1 : ★. Π P2 : ★. FixIndM · F fmap · P1 · P2 ➔ ★. ∀ P1 : ★. ∀ P2 : ★. ∀ e : FixIndM · F fmap · P1 · P2. (Lift · F fmap · Q · P1 · P2 e.1) ➔ Q · P1 · P2 e =
  Λ F. Λ fmap. Λ Q. Λ P1. Λ P2. Λ e. λ pr. ρ (sndS pr).1 - (sndS pr).2.

LiftProp2 ◂ ∀ F : (★ ➔ ★ ➔ ★) ➔ ★ ➔ ★ ➔ ★. ∀ fmap : FunctorP2 · F. ∀ Q : Π P1 : ★. Π P2 : ★. FixIndM · F fmap · P1 · P2 ➔ ★. ∀ P1 : ★. ∀ P2 : ★. Π e : FixIndM · F fmap · P1 · P2. Q · P1 · P2 e ➔ Lift · F fmap · Q · P1 · P2 e.1 =
  Λ F. Λ fmap. Λ Q. Λ P1. Λ P2. λ e. λ pr. sigma e · (λ x' : FixIndM · F fmap · P1 · P2. ι _ : {e ≃ x'}. Q · P1 · P2 x') [β{pr}, pr].

LiftProp3 ◂ ∀ F : (★ ➔ ★ ➔ ★) ➔ ★ ➔ ★ ➔ ★. ∀ fmap : FunctorP2 · F. ∀ Q : Π P1 : ★. Π P2 : ★. FixIndM · F fmap · P1 · P2 ➔ ★. ∀ P1 : ★. ∀ P2 : ★. ∀ e : FixM · F · P1 · P2. Lift · F fmap · Q · P1 · P2 e ➔ FixIndM · F fmap · P1 · P2 =
  Λ F. Λ fmap. Λ Q. Λ P2. Λ P2. Λ e. λ pr. fstS pr.

LiftProp4 ◂ ∀ F : (★ ➔ ★ ➔ ★) ➔ ★ ➔ ★ ➔ ★. ∀ fmap : FunctorP2 · F. ∀ Q : Π P1 : ★. Π P2 : ★. FixIndM · F fmap · P1 · P2 ➔ ★. ∀ P1 : ★. ∀ P2 : ★. ∀ e : FixM · F · P1 · P2. ∀ p : Lift · F fmap · Q · P1 · P2 e. {LiftProp3 p ≃ e} =
  Λ F. Λ fmap. Λ Q. Λ P1. Λ P2. Λ e. Λ pr. ρ (sndS pr).1 - β.

convIH ◂ 
 ∀ F : (★ ➔ ★ ➔ ★) ➔ ★ ➔ ★ ➔ ★.
 ∀ fmap : FunctorP2 · F.
 ∀ Q : Π P1 : ★. Π P2 : ★. FixIndM · F fmap · P1 · P2 ➔ ★.
 ∀ Y : Π P1 : ★. Π P2 : ★. FixM · F · P1 · P2 ➔ ★.
 Π Yprop1 : ∀ P1 : ★. ∀ P2 : ★. ∀ e : FixIndM · F fmap · P1 · P2. Y · P1 · P2 e.1 ➔ Q · P1 · P2 e.
 Π Yprop2 : ∀ P1 : ★. ∀ P2 : ★. Π e : FixIndM · F fmap · P1 · P2. Q · P1 · P2 e ➔ Y · P1 · P2 e.1.
 Π Yprop3 : ∀ P1 : ★. ∀ P2 : ★. ∀ e : FixM · F · P1 · P2. Y · P1 · P2 e ➔ FixIndM · F fmap · P1 · P2.
 Π Yprop4 : ∀ P1 : ★. ∀ P2 : ★. ∀ e : FixM · F · P1 · P2. ∀ p : Y · P1 · P2 e. {Yprop3 p ≃ e}.
 PrfAlgM · F fmap · (FixIndM · F fmap) · Q (inFixIndM · F -fmap) ➔
 PrfAlgM · F fmap · (FixM · F) · Y (inFixM · F) =
  Λ F. Λ fmap. Λ Q. Λ Y. λ qp3. λ qp4. λ qp1. λ qp2. λ q. Λ R. Λ cst. λ ih. Λ P1. Λ P2. λ gr.
    [cst2 ◂ CastP2 · R · (FixIndM · F fmap) =
      Λ P1. Λ P2. [λ r. φ (qp2 -(cast -(cst · P1 · P2) r) -(ih r)) -
        (qp1 -(cast -(cst · P1 · P2) r) (ih r)) {r}, β]] -
    qp4 (inFixIndM -fmap (cast -(fmap -cst2 · P1 · P2) gr))
      (q -cst2 (Λ P1. Λ P2. λ r. qp3 -(cast -(cst2 · P1 · P2) r) (ih r)) gr).

MendlerInd ◂ ∀ F : (★ ➔ ★ ➔ ★) ➔ ★ ➔ ★ ➔ ★. ∀ fmap : FunctorP2 · F. ∀ P1 : ★. ∀ P2 : ★. Π e : FixIndM · F fmap · P1 · P2. ∀ Q : Π P1 : ★. Π P2 : ★. FixIndM · F fmap · P1 · P2 ➔ ★. PrfAlgM · F fmap · (FixIndM · F fmap) · Q (inFixIndM · F -fmap) ➔ Q · P1 · P2 e = 
  Λ F. Λ fmap. Λ p1. Λ p2. λ e. Λ Q. λ q. LiftProp1 -fmap -e
    (e.2 (convIH -fmap (LiftProp1 -fmap · Q) (LiftProp2 -fmap · Q) (LiftProp3 -fmap · Q) (LiftProp4 -fmap · Q) q)).



ListF ◂ (★ ➔ ★ ➔ ★) ➔ ★ ➔ ★ ➔ ★ =
  λ List : ★ ➔ ★ ➔ ★. λ A : ★. λ B : ★.
    ι x : Top. ∀ X : Top ➔ ★ ➔ ★ ➔ ★.
      (∀ A : ★. ∀ B : ★. X β{λ n. λ c. n} · A · B) ➔
      (∀ A : ★. ∀ B : ★. Π h : A. Π t : List · A · B. X β{λ n. λ c. c h t} · B · A) ➔
      X x · A · B.

ListFmap ◂ FunctorP2 · ListF = Λ L. Λ L'. Λ cst. Λ A. Λ B.
  [λ l. [l.1, Λ X. λ n. λ c. l.2 n (Λ A. Λ B. λ h. λ t. c h (cast -(cst · A · B) t))], β].

List ◂ ★ ➔ ★ ➔ ★ = FixIndM · ListF ListFmap.

Nil ◂ ∀ A : ★. ∀ B : ★. List · A · B = Λ A. Λ B. inFixIndM -ListFmap · A · B
  [β{λ n. λ c. n}, Λ X. λ n. λ c. n · A · B].

Cons ◂ ∀ A : ★. ∀ B : ★. A ➔ List · A · B ➔ List · B · A =
  Λ A. Λ B. λ h. λ t. inFixIndM -ListFmap · B · A
  [β{λ n. λ c. c h t}, Λ X. λ n. λ c. c h t].

ListInd ◂
    ∀ A : ★. ∀ B : ★. Π l : List · A · B.
    ∀ Q : Π A : ★. Π B : ★. List · A · B ➔ ★.
    (∀ A : ★. ∀ B : ★. Q · A · B (Nil · A · B)) ➔
    (∀ A : ★. ∀ B : ★. Π h : A. Π t : List · A · B. Q · A · B t ➔ Q · B · A (Cons h t)) ➔
    Q · A · B l =
  Λ A. Λ B. λ l. Λ Q. λ n. λ c. MendlerInd -ListFmap l · Q
    (Λ R. Λ cst. λ ih. Λ P1. Λ P2. λ l.
      l.2 · (λ x : Top. λ P1 : ★. λ P2 : ★. ∀ l : ListF · R · P1 · P2. ∀ e : {l ≃ x}.
        Q · P1 · P2 (inFixIndM -ListFmap (cast -(ListFmap -cst · P1 · P2) (φ e - l {x}))))
        (Λ A. Λ B. Λ l. Λ e. n · A · B)
        (Λ A. Λ B. λ h. λ t. Λ l. Λ e. c h (cast -(cst · A · B) t) (ih t))
        -l -β).

tail ◂ ∀ A : ★. ∀ B : ★. List · A · B ➔ List · B · A =
  Λ A. Λ B. λ l.
    ListInd l
      · (λ A : ★. λ B : ★. λ l : List · A · B. List · B · A)
      (Λ A. Λ B. Nil · B · A)
      (Λ A. Λ B. λ h. λ t. λ x. t).
