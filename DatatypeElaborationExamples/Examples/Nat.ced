module Nat.
import RecType.

NatF ◂ ★ ➔ ★ = λ Nat : ★. ι x : Top. ∀ X : Top ➔ ★.
  X β{λ z. λ s. z} ➔ (Π n : Nat. X β{λ z. λ s. s n}) ➔ X x.
fmap ◂ RecFunctor · NatF = Λ M. Λ N. Λ c. [λ u. [u.1, Λ X. λ z. λ s. u.2 · X z (λ m. s (cast -c m))], β].

import Mendler · NatF -fmap.

Nat ◂ ★ = FixIndM.

Z ◂ Nat = inFixIndM [β{λ z. λ s. z}, Λ X. λ z. λ s. z].
S ◂ Nat ➔ Nat = λ n. inFixIndM [β{λ z. λ s. s n}, Λ X. λ z. λ s. s n].

NatInd ◂ Π n : Nat. ∀ Q : Nat ➔ ★. Q Z ➔ (Π n : Nat. Q n ➔ Q (S n)) ➔ Q n = 
 λ n. Λ Q. λ z. λ s. MendlerInd n · Q (Λ R. Λ c. λ ih. λ n.
   n.2 · (λ x : Top. ∀ m : NatF · R. ∀ e : {m ≃ x}.
       Q (inFixIndM (φ e - cast -(fmap -c) m {x})))
     (Λ m. Λ e. z) (λ n. Λ m. Λ e. s (cast -c n) (ih n)) -n -β).

foldr ◂ Nat ➔ ∀ X : ★. X ➔ (Nat ➔ X ➔ X) ➔ X =
  λ n. Λ X. NatInd n · (λ _ : Nat. X).

P ◂ Nat ➔ Nat = λ n. foldr n Z (λ n. λ x. n).

ps ◂ Π n : Nat. {P (S n) ≃ n} = λ n. β.
