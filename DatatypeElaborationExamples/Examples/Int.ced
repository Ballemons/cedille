module Int.

import Sum.
import Maybe.
import RecType.

-- A bit more complicated example of what we might elaborate a datatype to

absu = β<β>{λ i . i (λ ih . λ gr . λ f . f (λ alg . alg (λ fix . fix alg) gr) (gr (λ alg . alg (λ fix . fix alg) (λ n . λ j . n)) (λ i' . i' (λ i'' . λ alg . alg (λ fix . fix alg) (λ n . λ j . j (λ i1 . λ i2 . i1 (ih i'' (λ a . λ b . b))))) (λ i'' . λ alg . alg (λ fix . fix alg) (λ n . λ j . j (λ i1 . λ i2 . i1 (ih i'' (λ a . λ b . b)))))))) (λ a . λ b . b)}.
sbau = β<β>{λ i. i (λ ih . λ gr . λ f . f (λ alg . alg (λ fix . fix alg) gr) (gr (λ alg . alg (λ fix . fix alg) (λ n . λ j . n)) (λ i' . i' (λ i'' . λ alg . alg (λ fix . fix alg) (λ n . λ j . j (λ i1 . λ i2 . i2 (ih i'' (λ a . λ b . b))))) (λ i'' . λ alg . alg (λ fix . fix alg) (λ n . λ j . j (λ i1 . λ i2 . i2 (ih i'' (λ a . λ b . b)))))))) (λ a . λ b . b)}.

PosF ◂ ★ ➔ ★ = λ X : ★. ι x : X. {absu x ≃ x}.
NegF ◂ ★ ➔ ★ = λ X : ★. ι x : X. {sbau x ≃ x}.
NonZF ◂ ★ ➔ ★ = λ X : ★. Sum · (PosF · X) · (NegF · X).
IntF ◂ ★ ➔ ★ = λ X : ★. Maybe · (NonZF · X).

cast-sum ◂ ∀ A : ★. ∀ B : ★. ∀ C : ★. ∀ D : ★. Cast · A · C ➾ Cast · B · D ➾ Cast · (Sum · A · B) · (Sum · C · D) =
  Λ A. Λ B. Λ C. Λ D. Λ c1. Λ c2.
    [λ s. φ (θ<s> (SumInd s) (λ a. β) (λ b. β)) -
      SumFold s · (Sum · C · D)
        (λ a. inj1 (cast -c1 a) · D)
        (λ b. inj2 (cast -c2 b) · C) {s}, β].

fmap ◂ RecFunctor · IntF = Λ X. Λ Y. Λ c.
  [MaybeCast -(cast-sum · (PosF · X) · (NegF · X) · (PosF · Y) · (NegF · Y)
    -[λ x. [cast -c x.1, x.2], β] -[λ x. [cast -c x.1, x.2], β]), β].

import Mendler · IntF -fmap.

Int ◂ ★ = FixIndM.

Pos ◂ ★ = ι i : Int. {absu i ≃ i}.
Neg ◂ ★ = ι i : Int. {sbau i ≃ i}.
NonZ ◂ ★ = Sum · Pos · Neg.

Z ◂ Int = inFixIndM (nothing · NonZ).
SS ◂ Pos ➔ Pos = λ i. [inFixIndM (just (inj1 i · Neg)), ρ+ i.2 - β{inFixIndM (just (inj1 i))}].
PP ◂ Neg ➔ Neg = λ i. [inFixIndM (just (inj2 i · Pos)), ρ+ i.2 - β{inFixIndM (just (inj2 i))}].
ZS ◂ Pos = [Z, β{Z}].
ZP ◂ Neg = [Z, β{Z}].

IntInd ◂ Π i : Int. ∀ Q : Int ➔ ★. Q Z ➔ (Π i : Pos. Q i.1 ➔ Q (SS i).1) ➔ (Π i : Neg. Q i.1 ➔ Q (PP i).1) ➔ Q i =
  λ i. Λ Q. λ z. λ s. λ p. MendlerInd i · Q (Λ R. Λ c. λ ih. λ if.
    θ<if> (MaybeInd if) z (λ i. θ<i> (SumInd i)
      (λ i. s [cast -c i.1, i.2] (ih i.1))
      (λ i. p [cast -c i.1, i.2] (ih i.1)))).

foldr ◂ Int ➔ ∀ X : ★. X ➔ (Pos ➔ X ➔ X) ➔ (Neg ➔ X ➔ X) ➔ X =
  λ i. Λ X. IntInd i · (λ _ : Int. X).

abs ◂ Int ➔ Pos = λ i. foldr i ZS (λ _. SS) (λ _. SS).
sba ◂ Int ➔ Neg = λ i. foldr i ZP (λ _. PP) (λ _. PP).

S ◂ Int ➔ Int = λ i. foldr i (SS ZS).1 (λ i. λ x. (SS (SS i)).1) (λ i. λ x. i.1).
P ◂ Int ➔ Int = λ i. foldr i (PP ZP).1 (λ i. λ x. i.1) (λ i. λ x. (PP (PP i)).1).

bohm-out-abs-sba = β<β>{λ x1. x1 (λ _. λ x. x) (λ x. x) (λ x. x) (λ _. λ t. λ f. t) (λ _. λ t. λ f. f)}.

PosInd ◂ Π i : Pos. ∀ Q : Pos ➔ ★. Q ZS ➔ (Π i : Pos. Q i ➔ Q (SS i)) ➔ Top ➔ Q i =
  λ i. Λ Q. λ z. λ s. λ p. IntInd i.1 · (λ i : Int. ∀ e : {abs i ≃ i}. Q [i, ρ e - β{i}])
    (Λ e. z)
    (λ i. λ x. Λ e. s i (x -i.2))
    (λ i. λ x. Λ e.
      [e' = δ - χ {bohm-out-abs-sba (absu (PP i)) ≃ bohm-out-abs-sba (sbau (PP i))} - ρ (PP i).2 - ρ e - β] -
      φ (e' · {e' ≃ p i x}) - e' · (Q [(PP i).1, ρ e - β{PP i}]) {p i x}) -i.2.

NegInd ◂ Π i : Neg. ∀ Q : Neg ➔ ★. Q ZP ➔ Top ➔ (Π i : Neg. Q i ➔ Q (PP i)) ➔ Q i =
  λ i. Λ Q. λ z. λ s. λ p. IntInd i.1 · (λ i : Int. ∀ e : {sba i ≃ i}. Q [i, ρ e - β{i}])
    (Λ e. z)
    (λ i. λ x. Λ e.
      [e' = δ - χ {bohm-out-abs-sba (absu (SS i)) ≃ bohm-out-abs-sba (sbau (SS i))} - ρ (SS i).2 - ρ e - β] -
      φ (e' · {e' ≃ s i x}) - e' · (Q [(SS i).1, ρ e - β{SS i}]) {s i x})
    (λ i. λ x. Λ e. p i (x -i.2)) -i.2.

inds-eq ◂ ι _ : {PosInd ≃ IntInd}. {NegInd ≃ IntInd} = [β, β].

s-ss ◂ Π i : Pos. {S i ≃ SS i} = λ i. θ<i> (PosInd i) β (λ i. λ ih. β) β.
p-pp ◂ Π i : Neg. {P i ≃ PP i} = λ i. θ<i> (NegInd i) β β (λ i. λ ih. β).
