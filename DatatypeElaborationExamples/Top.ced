module Top.

Top ◂ ★ = {β ≃ β}.
TopT ◂ Top ➔ ★ = λ x : Top. {x ≃ x}.
RAA ◂ ★ = ∀ X : ★. X.
False ◂ ★ = RAA.
Eq ◂ ★ ➔ Top ➔ ★ = λ A : ★. λ b : Top. ι a : A. {a ≃ b}.
Eq2 ◂ Top ➔ ★ ➔ ★ = λ x : Top. λ A : ★. Eq · A x.
Not ◂ ★ ➔ ★ = λ X : ★. X ➾ RAA.
NotUE ◂ ★ ➔ ★ = λ X : ★. X ➔ RAA.

not-raa-top ◂ Top ➔ ∀ X : ★. Not · X ➾ X ➾ RAA =
  λ t. Λ X. Λ nx. Λ x. φ (nx -x · {nx ≃ t}) - nx -x {t}.
not-ue-raa-top ◂ Top ➔ ∀ X : ★. NotUE · X ➾ X ➔ RAA =
  λ t. Λ X. Λ nx. λ x. φ (nx x · {nx x ≃ t x}) - nx x {t x}.
not-raa = not-raa-top β.
not-raa' ◂ ∀ X : ★. ∀ Y : ★. X ➾ Not · X ➾ Y =
  Λ X. Λ Y. Λ x. Λ nx. not-raa · X -nx -x · Y.
not-ue-raa = not-ue-raa-top β.

{- Some fixed-point combinators -}
Y ◂ Top = β{λ f. (λ x. f (x x)) (λ x. f (x x))}.
triv ◂ Top = β{λ x. x x}.

{- Handy functions -}
flip ◂ ∀ A : ★. ∀ B : ★. ∀ C : ★. (A ➔ B ➔ C) ➔ (B ➔ A ➔ C) =
  Λ A. Λ B. Λ C. λ f. λ b. λ a. f a b.
comp ◂ ∀ A : ★. ∀ B : ★. ∀ C : ★. (B ➔ C) ➔ (A ➔ B) ➔ A ➔ C =
  Λ A. Λ B. Λ C. λ f. λ g. λ x. f (g x).
compE ◂ ∀ A : ★. ∀ B : ★. ∀ C : ★. (B ➾ C) ➔ (A ➾ B) ➾ A ➾ C =
  Λ A. Λ B. Λ C. λ f. Λ g. Λ x. f -(g -x).
compE' ◂ ∀ A : ★. ∀ B : ★. ∀ C : ★. (B ➾ C) ➔ (A ➔ B) ➾ A ➾ C =
  Λ A. Λ B. Λ C. λ f. Λ g. Λ x. f -(g x).
