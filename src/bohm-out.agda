module bohm-out where
open import lib
open import general-util
open import cedille-types
open import syntax-util

{- Implementation of the B√∂hm-Out Algorithm -}

private
  
  nfoldr : ‚Ñï ‚Üí ‚àÄ {‚Ñì} {X : Set ‚Ñì} ‚Üí X ‚Üí (‚Ñï ‚Üí X ‚Üí X) ‚Üí X
  nfoldr zero    z s = z
  nfoldr (suc n) z s = s n (nfoldr n z s)
  
  nfoldl : ‚Ñï ‚Üí ‚àÄ {‚Ñì} {X : Set ‚Ñì} ‚Üí X ‚Üí (‚Ñï ‚Üí X ‚Üí X) ‚Üí X
  nfoldl zero    z s = z
  nfoldl (suc n) z s = nfoldl n (s n z) s
  
  set-nth : ‚àÄ {‚Ñì} {X : Set ‚Ñì} ‚Üí ‚Ñï ‚Üí X ‚Üí ùïÉ X ‚Üí ùïÉ X
  set-nth n x [] = []
  set-nth zero x (x' :: xs) = x :: xs
  set-nth (suc n) x (x' :: xs) = x' :: set-nth n x xs
  
  
  
  -- BoÃàhm Tree
  data BT : Set where
    Node : (n i : ‚Ñï) ‚Üí ùïÉ BT ‚Üí BT
  -- n: number of lambdas currently bound
  -- i: head variable
  -- ùïÉ BT: list of arguments
  
  -- Path to difference
  data path : Set where
    hd : path                  -- Difference in heads
    as : path                  -- Difference in number of arguments
    ps : (n : ‚Ñï) ‚Üí path ‚Üí path -- Difference in nth subtrees (recursive)
  
  
  
  -- Œ∑ functions
  Œ∑-expand'' : ‚Ñï ‚Üí ùïÉ BT ‚Üí ùïÉ BT
  Œ∑-expand'' g [] = []
  Œ∑-expand'' g (Node n i b :: bs) =
    Node (suc n) (if i ‚â• g then suc i else i) (Œ∑-expand'' g b) :: Œ∑-expand'' g bs
  
  Œ∑-expand' : ‚Ñï ‚Üí BT ‚Üí BT
  Œ∑-expand' g (Node n i b) = Node (suc n) (if i ‚â• g then suc i else i) (Œ∑-expand'' g b)
  
  Œ∑-expand : BT ‚Üí BT
  Œ∑-expand t @ (Node n _ _) with Œ∑-expand' (suc n) t
  ...| Node n' i' b' = Node n' i' (b' ++ [ Node n' n' [] ])
  
  bt-n : BT ‚Üí ‚Ñï
  bt-n (Node n i b) = n
  
  Œ∑-equate : BT ‚Üí BT ‚Üí BT √ó BT
  Œ∑-equate t‚ÇÅ t‚ÇÇ =
    nfoldr (bt-n t‚ÇÇ ‚à∏ bt-n t‚ÇÅ) t‚ÇÅ (Œª _ ‚Üí Œ∑-expand) ,
    nfoldr (bt-n t‚ÇÅ ‚à∏ bt-n t‚ÇÇ) t‚ÇÇ (Œª _ ‚Üí Œ∑-expand)
  
  -- Œ∑-equates all nodes along path to difference
  Œ∑-equate-path : BT ‚Üí BT ‚Üí path ‚Üí BT √ó BT
  Œ∑-equate-path (Node n‚ÇÅ i‚ÇÅ b‚ÇÅ) (Node n‚ÇÇ i‚ÇÇ b‚ÇÇ) (ps d p) =
    let b-b = h d b‚ÇÅ b‚ÇÇ in
    Œ∑-equate (Node n‚ÇÅ i‚ÇÅ (fst b-b)) (Node n‚ÇÇ i‚ÇÇ (snd b-b))
    where
    h : ‚Ñï ‚Üí ùïÉ BT ‚Üí ùïÉ BT ‚Üí ùïÉ BT √ó ùïÉ BT
    h zero (b‚ÇÅ :: bs‚ÇÅ) (b‚ÇÇ :: bs‚ÇÇ) with Œ∑-equate-path b‚ÇÅ b‚ÇÇ p
    ...| b‚ÇÅ' , b‚ÇÇ' = b‚ÇÅ' :: bs‚ÇÅ , b‚ÇÇ' :: bs‚ÇÇ
    h (suc d) (b‚ÇÅ :: bs‚ÇÅ) (b‚ÇÇ :: bs‚ÇÇ) with h d bs‚ÇÅ bs‚ÇÇ
    ...| bs‚ÇÅ' , bs‚ÇÇ' = b‚ÇÅ :: bs‚ÇÅ' , b‚ÇÇ :: bs‚ÇÇ'
    h d b‚ÇÅ b‚ÇÇ = b‚ÇÅ , b‚ÇÇ
  Œ∑-equate-path t‚ÇÅ t‚ÇÇ p = Œ∑-equate t‚ÇÅ t‚ÇÇ
  
  
  
  -- Rotation functions
  rotate : (k : ‚Ñï) ‚Üí BT
  rotate k =
    Node (suc k) (suc k) (nfoldl k [] (Œª k' ‚Üí Node (suc k) (suc k') [] ::_))
  
  rotate-BT' : ‚Ñï ‚Üí ùïÉ BT ‚Üí ùïÉ BT
  rotate-BT' k [] = []
  rotate-BT' k (Node n i b :: bs) with i =‚Ñï k
  ...| ff = Node n i (rotate-BT' k b) :: rotate-BT' k bs
  ...| tt = Node (suc n) (suc n) (Œ∑-expand'' (suc n) (rotate-BT' k b)) :: rotate-BT' k bs
  rotate-BT : ‚Ñï ‚Üí BT ‚Üí BT
  rotate-BT k (Node n i b) with i =‚Ñï k
  ...| ff = Node n i (rotate-BT' k b)
  ...| tt = Node (suc n) (suc n) (Œ∑-expand'' (suc n) (rotate-BT' k b))
  
  -- Returns the greatest number of arguments k ever has at each node it where it is the head
  greatest-apps' : ‚Ñï ‚Üí ùïÉ BT ‚Üí ‚Ñï
  greatest-apps' k [] = zero
  greatest-apps' k (Node n k' bs' :: bs) with k =‚Ñï k'
  ...| ff = max (greatest-apps' k bs') (greatest-apps' k bs)
  ...| tt = max (length bs') (max (greatest-apps' k bs') (greatest-apps' k bs))
  greatest-apps : ‚Ñï ‚Üí BT ‚Üí ‚Ñï
  greatest-apps k (Node n i b) with k =‚Ñï i
  ...| ff = greatest-apps' k b
  ...| tt = max (length b) (greatest-apps' k b)
  greatest-Œ∑' : ‚Ñï ‚Üí ‚Ñï ‚Üí ùïÉ BT ‚Üí ùïÉ BT
  greatest-Œ∑' k m [] = []
  greatest-Œ∑' k m (Node n i bs :: bs') with k =‚Ñï i
  ...| ff = Node n i (greatest-Œ∑' k m bs) :: greatest-Œ∑' k m bs'
  ...| tt = nfoldr (m ‚à∏ length bs) (Node n i (greatest-Œ∑' k m bs)) (Œª _ ‚Üí Œ∑-expand) :: greatest-Œ∑' k m bs'
  greatest-Œ∑ : ‚Ñï ‚Üí ‚Ñï ‚Üí BT ‚Üí BT
  greatest-Œ∑ k m (Node n i b) with k =‚Ñï i
  ...| ff = Node n i (greatest-Œ∑' k m b)
  ...| tt = nfoldr (m ‚à∏ length b) (Node n i (greatest-Œ∑' k m b)) (Œª _ ‚Üí Œ∑-expand)
  
  -- Returns tt if k ever is at the head of a node along the path to the difference
  occurs-in-path : ‚Ñï ‚Üí BT ‚Üí path ‚Üí ùîπ
  occurs-in-path k (Node n i b) (ps d p) =
    k =‚Ñï i || maybe-else ff (Œª t ‚Üí occurs-in-path k t p) (nth d b)
  occurs-in-path k (Node n i b) p = k =‚Ñï i

  adjust-path : ‚Ñï ‚Üí BT ‚Üí path ‚Üí path
  adjust-path k (Node n i b) (ps d p) = maybe-else' (nth d b) (ps d p) Œª n ‚Üí ps d (adjust-path k n p)
  adjust-path k (Node n i b) as with k =‚Ñï i
  ...| tt = hd
  ...| ff = as
  adjust-path k (Node n i b) hd = hd
  
  
  
  -- Œî functions
  construct-BT : term ‚Üí maybe BT
  construct-BT = h zero empty-trie Node where
    h : ‚Ñï ‚Üí trie ‚Ñï ‚Üí ((n i : ‚Ñï) ‚Üí ùïÉ BT ‚Üí BT) ‚Üí term ‚Üí maybe BT
    h n vm f (Var _ x) = just (f n (trie-lookup-else zero vm x) [])
    h n vm f (App t NotErased t') =
      h n vm Node t' ‚â´=maybe Œª t' ‚Üí
      h n vm (Œª n i b ‚Üí f n i (b ++ [ t' ])) t
    h n vm f (Lam _ NotErased _ x NoClass t) = h (suc n) (trie-insert vm x (suc n)) f t
    h n vm f t = nothing
  
  {-# TERMINATING #-}
  construct-path' : BT ‚Üí BT ‚Üí maybe (path √ó BT √ó BT)
  construct-path : BT ‚Üí BT ‚Üí maybe (path √ó BT √ó BT)
  construct-path (Node _ zero _) _ = nothing
  construct-path _ (Node _ zero _) = nothing
  construct-path t‚ÇÅ t‚ÇÇ = uncurry construct-path' (Œ∑-equate t‚ÇÅ t‚ÇÇ)
  construct-path' t‚ÇÅ @ (Node n‚ÇÅ i‚ÇÅ b‚ÇÅ) t‚ÇÇ @ (Node n‚ÇÇ i‚ÇÇ b‚ÇÇ) =
    if ~ i‚ÇÅ =‚Ñï i‚ÇÇ
      then just (hd , t‚ÇÅ , t‚ÇÇ)
      else if length b‚ÇÅ =‚Ñï length b‚ÇÇ
        then maybe-map (Œª {(p , b‚ÇÅ , b‚ÇÇ) ‚Üí p , Node n‚ÇÅ i‚ÇÅ b‚ÇÅ , Node n‚ÇÇ i‚ÇÇ b‚ÇÇ}) (h zero b‚ÇÅ b‚ÇÇ)
        else just (as , t‚ÇÅ , t‚ÇÇ)
    where
    h : ‚Ñï ‚Üí ùïÉ BT ‚Üí ùïÉ BT ‚Üí maybe (path √ó ùïÉ BT √ó ùïÉ BT)
    h n (b‚ÇÅ :: bs‚ÇÅ) (b‚ÇÇ :: bs‚ÇÇ) =
      maybe-else
        (maybe-map (Œª {(p , bs‚ÇÅ , bs‚ÇÇ) ‚Üí p , b‚ÇÅ :: bs‚ÇÅ , b‚ÇÇ :: bs‚ÇÇ}) (h (suc n) bs‚ÇÅ bs‚ÇÇ))
        (Œª {(p , b‚ÇÅ , b‚ÇÇ) ‚Üí just (ps n p , b‚ÇÅ :: bs‚ÇÅ , b‚ÇÇ :: bs‚ÇÇ)})
        (construct-path b‚ÇÅ b‚ÇÇ)
    h _ _ _ = nothing
  
  {-# TERMINATING #-}
  construct-Œî : BT ‚Üí BT ‚Üí path ‚Üí ùïÉ BT
  construct-Œî (Node n‚ÇÅ i‚ÇÅ b‚ÇÅ) (Node n‚ÇÇ i‚ÇÇ b‚ÇÇ) hd =
    nfoldl n‚ÇÅ [] Œª m ‚Üí _::_
      (if suc m =‚Ñï i‚ÇÅ
        then Node (2 + length b‚ÇÅ) (1 + length b‚ÇÅ) []
        else if suc m =‚Ñï i‚ÇÇ
          then Node (2 + length b‚ÇÇ) (2 + length b‚ÇÇ) []
          else Node 1 1 [])
  construct-Œî (Node n‚ÇÅ i‚ÇÅ b‚ÇÅ) (Node n‚ÇÇ i‚ÇÇ b‚ÇÇ) as =
    let l‚ÇÅ = length b‚ÇÅ
        l‚ÇÇ = length b‚ÇÇ
        d = l‚ÇÅ > l‚ÇÇ
        lM = if d then l‚ÇÅ else l‚ÇÇ
        lm = if d then l‚ÇÇ else l‚ÇÅ
        l = lM ‚à∏ lm in
    nfoldl n‚ÇÅ
      (nfoldr l [ Node (2 + l) ((if d then 1 else 2) + l) [] ]
         Œª l' ‚Üí _++
           [ if suc l' =‚Ñï l
               then Node 2 (if d then 2 else 1) []
               else Node 1 1 [] ])
     (Œª n' ‚Üí _::_
       (if suc n' =‚Ñï i‚ÇÅ
         then Node (suc lM) (suc lM) []
         else Node 1 1 []))
  construct-Œî t‚ÇÅ @ (Node n‚ÇÅ i‚ÇÅ b‚ÇÅ) t‚ÇÇ @ (Node n‚ÇÇ i‚ÇÇ b‚ÇÇ) (ps d p)
    with nth d b‚ÇÅ ‚â´=maybe Œª b‚ÇÅ ‚Üí nth d b‚ÇÇ ‚â´=maybe Œª b‚ÇÇ ‚Üí just (b‚ÇÅ , b‚ÇÇ)
  ...| nothing = [] -- Shouldn't happen
  ...| just (t‚ÇÅ' @ (Node n‚ÇÅ' i‚ÇÅ' b‚ÇÅ') , t‚ÇÇ' @ (Node n‚ÇÇ' i‚ÇÇ' b‚ÇÇ'))
    with occurs-in-path i‚ÇÅ t‚ÇÅ' p || occurs-in-path i‚ÇÇ t‚ÇÇ' p
  ...| ff = set-nth (pred i‚ÇÅ) (Node (length b‚ÇÅ) (suc d) []) (construct-Œî t‚ÇÅ' t‚ÇÇ' p)
  ...| tt with max (greatest-apps i‚ÇÅ t‚ÇÅ) (greatest-apps i‚ÇÇ t‚ÇÇ)
  ...| k‚Çò with Œ∑-equate-path (rotate-BT i‚ÇÅ (greatest-Œ∑ i‚ÇÅ k‚Çò t‚ÇÅ))
                             (rotate-BT i‚ÇÇ (greatest-Œ∑ i‚ÇÇ k‚Çò t‚ÇÇ)) (ps d p)
  ...| t‚ÇÅ'' , t‚ÇÇ'' = set-nth (pred i‚ÇÅ) (rotate k‚Çò) (construct-Œî t‚ÇÅ'' t‚ÇÇ'' (ps d $ adjust-path i‚ÇÅ t‚ÇÅ' p))
  
  reconstruct : BT ‚Üí term
  reconstruct = h zero where
    mkvar : ‚Ñï ‚Üí var
    mkvar n = "x" ^ ‚Ñï-to-string n
    h : ‚Ñï ‚Üí BT ‚Üí term
    a : ‚Ñï ‚Üí term ‚Üí ùïÉ BT ‚Üí term
    a n t [] = t
    a n t (b :: bs) = a n (mapp t (h n b)) bs
    h m (Node n i b) = nfoldl (n ‚à∏ m) (a n (mvar (mkvar i)) b) (Œª nm ‚Üí mlam (mkvar (suc (m + nm))))
  
-- Returns a term f such that f t‚ÇÅ ‚âÉ Œª t. Œª f. t and f t‚ÇÇ ‚âÉ Œª t. Œª f. f, assuming two things:
-- 1. t‚ÇÅ ‚âÑ t‚ÇÇ
-- 2. The head of each node along the path to the difference between t‚ÇÅ and t‚ÇÇ is bound
--    withing the terms (so Œª x. Œª y. y y (x y) and Œª x. Œª y. y y (x x) works, but not
--    Œª x. Œª y. y y (f y), where f is already declared/defined)
make-contradiction : (t‚ÇÅ t‚ÇÇ : term) ‚Üí maybe term
make-contradiction t‚ÇÅ t‚ÇÇ =
  construct-BT t‚ÇÅ ‚â´=maybe Œª t‚ÇÅ ‚Üí
  construct-BT t‚ÇÇ ‚â´=maybe Œª t‚ÇÇ ‚Üí
  construct-path t‚ÇÅ t‚ÇÇ ‚â´=maybe Œª {(p , t‚ÇÅ , t‚ÇÇ) ‚Üí
  just (reconstruct (Node (suc zero) (suc zero)
    (map (Œ∑-expand' zero) (construct-Œî t‚ÇÅ t‚ÇÇ p))))}

-- Returns tt if the two terms are provably not equal
is-contradiction : term ‚Üí term ‚Üí ùîπ
is-contradiction t‚ÇÅ t‚ÇÇ = isJust (make-contradiction t‚ÇÅ t‚ÇÇ)

