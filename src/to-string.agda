module to-string where

open import lib
open import cedille-types
open import syntax-util

binder-to-string : binder ‚Üí string
binder-to-string All = "‚àÄ"
binder-to-string Pi = "Œ†"

maybeErased-to-string : maybeErased ‚Üí string
maybeErased-to-string Erased = "-"
maybeErased-to-string NotErased = ""

lam-to-string : lam ‚Üí string
lam-to-string ErasedLambda = "Œõ"
lam-to-string KeptLambda = "Œª"

leftRight-to-string : leftRight ‚Üí string
leftRight-to-string Left = "l"
leftRight-to-string Right = "r"
leftRight-to-string Both = ""

vars-to-string : vars ‚Üí string
vars-to-string (VarsStart v) = v
vars-to-string (VarsNext v vs) = v ^ " " ^ vars-to-string vs

theta-to-string : theta ‚Üí string
theta-to-string Abstract = "Œ∏"
theta-to-string AbstractEq = "Œ∏+"
theta-to-string (AbstractVars vs) = "Œ∏<" ^ vars-to-string vs ^ ">"

maybeMinus-to-string : maybeMinus ‚Üí string
maybeMinus-to-string EpsHnf = ""
maybeMinus-to-string EpsHanf = "-"

-- the ùîπ argument tells whether this is a top-level expression, or a subexpression
type-to-string : ùîπ ‚Üí type ‚Üí string
term-to-string : ùîπ ‚Üí term ‚Üí string
kind-to-string : ùîπ ‚Üí kind ‚Üí string
lterms-to-stringh : lterms ‚Üí string
type-to-stringh : {ed : exprd} ‚Üí ùîπ ‚Üí ‚ü¶ ed ‚üß ‚Üí type ‚Üí string
term-to-stringh : {ed : exprd} ‚Üí ùîπ ‚Üí ‚ü¶ ed ‚üß ‚Üí term ‚Üí string
kind-to-stringh : {ed : exprd} ‚Üí ùîπ ‚Üí ‚ü¶ ed ‚üß ‚Üí kind ‚Üí string
optClass-to-string : optClass ‚Üí string
optType-to-string : optType ‚Üí string
tk-to-string : tk ‚Üí string
liftingType-to-string : liftingType ‚Üí string
liftingType-to-stringh : {ed : exprd} ‚Üí ‚ü¶ ed ‚üß ‚Üí liftingType ‚Üí string
maybeAtype-to-string : maybeAtype ‚Üí string

-- If the first or second argument (toplevel, locally-not-needed) is true, don't put parens; else put parens
-- converts terms to string equivalents by adding parens
-- at the top level, parens are not needed
parens-unless : ùîπ ‚Üí ùîπ ‚Üí string ‚Üí string
parens-unless toplevel locally-not-needed s =
  if toplevel || locally-not-needed then s else ("(" ^ s ^ ")")

term-to-string toplevel t = term-to-stringh toplevel star t
type-to-string toplevel tp = type-to-stringh toplevel star tp
kind-to-string toplevel k = kind-to-stringh toplevel star k
liftingType-to-string l = liftingType-to-stringh star l

term-to-stringh toplevel  p (App t x t') = 
  parens-unless toplevel (is-app p) (term-to-stringh ff (App t x t') t ^ " " ^ (maybeErased-to-string x) ^ term-to-string ff t')
term-to-stringh toplevel p (AppTp t tp) = parens-unless toplevel (is-app p) (term-to-stringh ff (AppTp t tp) t ^ " ¬∑ " ^ type-to-string ff tp)
term-to-stringh toplevel p (Hole _) = "‚óè"
term-to-stringh toplevel p (Lam pi l pi' x o t) = 
  parens-unless toplevel (is-abs p) (lam-to-string l ^ " " ^ x ^ optClass-to-string o ^ " . " ^ term-to-stringh ff (Lam pi l pi' x o t) t)
term-to-stringh toplevel p (Unfold _ t) =
  "unfold " ^ (term-to-string toplevel t)
term-to-stringh toplevel p (Parens _ t _) = term-to-string toplevel t
term-to-stringh toplevel p (Var _ x) = x
term-to-stringh toplevel p (Beta _) = "Œ≤"
term-to-stringh toplevel p (Delta _ t) = "(Œ¥" ^ " " ^ term-to-string ff t ^ ")"
term-to-stringh toplevel p (InlineDef _ _ x t _) = "[ " ^ x ^ " ]"
term-to-stringh toplevel p (IotaPair _ t1 t2 _) = "[ " ^ term-to-string tt t1 ^ " , " ^ term-to-string tt t1 ^ " ]"
term-to-stringh toplevel p (IotaProj t n _) = term-to-string ff t ^ " . " ^ n
term-to-stringh toplevel p (PiInj _ n t) = "(œÄ" ^ n ^ " " ^ term-to-string ff t ^ ")"
term-to-stringh toplevel p (Epsilon _ lr m t) = "(Œµ" ^ leftRight-to-string lr ^ maybeMinus-to-string m ^ " " ^ term-to-string ff t ^ ")"
term-to-stringh toplevel p (Sigma _ t) = "(œÇ " ^ term-to-string ff t ^ ")"
term-to-stringh toplevel p (Theta _ u t ts) = "(" ^ theta-to-string u ^ " " ^ term-to-string ff t ^ lterms-to-stringh ts ^ ")"
term-to-stringh toplevel p (Rho _ r t t') = "(" ^ rho-to-string r ^ term-to-string ff t ^ " - " ^ term-to-string ff t' ^ ")"
  where rho-to-string : rho ‚Üí string
        rho-to-string RhoPlain = "œÅ"
        rho-to-string RhoPlus = "œÅ+"
term-to-stringh toplevel p (Chi _ T t') = "(œá " ^ maybeAtype-to-string T ^ " - " ^ term-to-string ff t' ^ ")"

type-to-stringh toplevel p (Abs pi b pi' x t t') = 
  parens-unless toplevel (is-abs p)
    (binder-to-string b ^ " " ^ x ^ " : " ^ tk-to-string t ^ " . " ^ type-to-stringh ff (Abs pi b pi' x t t') t')
type-to-stringh toplevel p (Mu pi pi' x k t) =
  parens-unless toplevel (is-abs p) ("Œº " ^ x ^ " : " ^ (kind-to-string ff k) ^ " . " ^ type-to-stringh ff (Mu pi pi' x k t) t)
type-to-stringh toplevel p (TpLambda pi pi' x tk t) = 
  parens-unless toplevel (is-abs p) ("Œª " ^ x ^ " : " ^ tk-to-string tk ^ " . " ^ type-to-stringh ff (TpLambda pi pi' x tk t) t )
type-to-stringh toplevel p (Iota pi pi' x m t) = parens-unless toplevel (is-abs p) ("Œπ " ^ x ^ optType-to-string m ^ " . " 
                                  ^ type-to-stringh ff (Iota pi pi' x m t) t)
type-to-stringh toplevel p (Lft _ _ X x x‚ÇÅ) = "(‚Üë " ^ X ^ " . " ^ term-to-string ff x ^ " : " ^ liftingType-to-string x‚ÇÅ ^ ")"
type-to-stringh toplevel p (TpApp t t‚ÇÅ) = parens-unless toplevel (is-app p) (type-to-stringh ff (TpApp t t‚ÇÅ) t ^ " ¬∑ " ^ type-to-string ff t‚ÇÅ)
type-to-stringh toplevel p (TpAppt t t') = parens-unless toplevel (is-app p) (type-to-stringh ff (TpAppt t t') t ^ " " ^ term-to-string ff t')
type-to-stringh toplevel p (TpArrow x UnerasedArrow t) =
  parens-unless toplevel (is-arrow p) (type-to-string ff x ^ " ‚ûî " ^  type-to-stringh ff (TpArrow x UnerasedArrow t) t)
type-to-stringh toplevel p (TpArrow x ErasedArrow t) = 
  parens-unless toplevel (is-arrow p) (type-to-string ff x ^ " ‚ûæ " ^  type-to-stringh ff (TpArrow x ErasedArrow t) t)
type-to-stringh toplevel p (TpEq t1 t2) = "(" ^ term-to-string ff t1 ^ " ‚âÉ " ^ term-to-string ff t2 ^ ")"
type-to-stringh toplevel p (TpParens _ t _) = type-to-string toplevel t
type-to-stringh toplevel p (TpVar _ x) = x
type-to-stringh toplevel p (NoSpans t _) = type-to-string ff t

kind-to-stringh toplevel p (KndArrow k k') =
  parens-unless toplevel (is-arrow p) (kind-to-string ff k ^ " ‚Üí " ^ kind-to-stringh ff (KndArrow k k') k')
kind-to-stringh toplevel p (KndParens _ k _) = kind-to-string toplevel k
kind-to-stringh toplevel p (KndPi pi pi' x u k) = 
  parens-unless toplevel (is-abs p) ("Œ† " ^ x ^ " : " ^ tk-to-string u ^ " . " ^ kind-to-stringh ff (KndPi pi pi' x u k) k )
kind-to-stringh toplevel p (KndTpArrow x k) =
  parens-unless toplevel (is-arrow p) (type-to-string ff x ^ " ‚Üí " ^ kind-to-stringh ff (KndTpArrow x k) k)
kind-to-stringh toplevel p (KndVar _ x) = x
kind-to-stringh toplevel p (Star _) = "‚òÖ"

liftingType-to-stringh p (LiftArrow t t‚ÇÅ) = 
  parens-unless ff (is-arrow p) (liftingType-to-string t ^ " ‚Üí " ^ liftingType-to-stringh (LiftArrow t t‚ÇÅ) t‚ÇÅ )
liftingType-to-stringh p (LiftTpArrow t t‚ÇÅ) = 
  parens-unless ff (is-arrow p) (type-to-string ff t ^ " ‚Üí " ^ liftingType-to-stringh (LiftTpArrow t t‚ÇÅ) t‚ÇÅ )
liftingType-to-stringh p (LiftParens _ t _) = liftingType-to-string t
liftingType-to-stringh p (LiftPi pi x x‚ÇÅ t) = 
  parens-unless ff (is-abs p) ("Œ† " ^ x ^ " : " ^ type-to-string ff x‚ÇÅ ^ " . " ^ liftingType-to-stringh (LiftPi pi x x‚ÇÅ t) t)
liftingType-to-stringh p (LiftStar _) = "‚òÜ"

optClass-to-string NoClass = ""
optClass-to-string (SomeClass x) = " : " ^ tk-to-string x

optType-to-string NoType = ""
optType-to-string (SomeType x) = " : " ^ type-to-string ff x

tk-to-string (Tkk k) = kind-to-string ff k
tk-to-string (Tkt t) = type-to-string ff t

lterms-to-stringh (LtermsNil _) = ""
lterms-to-stringh (LtermsCons m t ts) = " " ^ (maybeErased-to-string m) ^ term-to-string ff t ^ lterms-to-stringh ts

maybeAtype-to-string NoAtype = ""
maybeAtype-to-string (Atype T) = type-to-string ff T

to-string : {ed : exprd} ‚Üí ‚ü¶ ed ‚üß ‚Üí string
to-string{TERM} = term-to-string tt
to-string{TYPE} = type-to-string tt
to-string{KIND} = kind-to-string tt
to-string{LIFTINGTYPE} = liftingType-to-string 

to-string-if : {ed : exprd} ‚Üí maybe (‚ü¶ ed ‚üß) ‚Üí string
to-string-if (just e) = to-string e
to-string-if nothing = "[nothing]"
