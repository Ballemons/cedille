module int-ops.
import int.
import top.
import bool.

-- For pretty printing the hnf of an int.
print ◂ Int ➔ Top = λ i. β{λ z. λ s. λ p. i z (λ i. s) (λ i. p)}.

{- Operations
absi ◂ Int ➔ Int = λ i. Want to make absi ≃ abs...
sbai ◂ Int ➔ Int = λ i. Want to make sbai ≃ sba...
neg ◂ Int ➔ Int = λ i. Want to make neg ≃ λ z. λ s. λ p. i z p s...
-}
add ◂ Int ➔ Int ➔ Int = λ i. λ j. IntInt j · Int i (λ i. S) (λ i. P).
sub ◂ Int ➔ Int ➔ Int = λ i. λ j. IntInt j · Int i (λ i. P) (λ i. S).
mlt ◂ Int ➔ Int ➔ Int = λ i. λ j. IntInt j · Int Z (λ j. λ x. add x i) (λ j. λ x. sub x i).
--div ◂ Int ➔ Int ➔ Int = λ i. λ j. ●.
exp ◂ Int ➔ Int ➔ Int = λ i. λ j. IntInt j · Int SZ.1 (λ j. λ x. mlt x i) (λ j. λ x. SZ.1).
--nrt ◂ Int ➔ Int ➔ Int = λ i. λ j. ●.

-- Predicates
isZ    ◂ Int ➔ Bool = λ i. IntInt i · Bool tt (λ i. λ x. ff) (λ i. λ x. ff).
isSorZ ◂ Int ➔ Bool = λ i. IntInt i · Bool tt (λ i. λ x. tt) (λ i. λ x. ff).
isS    ◂ Int ➔ Bool = λ i. IntInt i · Bool ff (λ i. λ x. tt) (λ i. λ x. ff).
isPorZ ◂ Int ➔ Bool = λ i. IntInt i · Bool tt (λ i. λ x. ff) (λ i. λ x. tt).
isP    ◂ Int ➔ Bool = λ i. IntInt i · Bool ff (λ i. λ x. ff) (λ i. λ x. tt).
GT  ◂ Int ➔ Int ➔ Bool = λ i. λ j. isS    (sub i j).
GTE ◂ Int ➔ Int ➔ Bool = λ i. λ j. isSorZ (sub i j).
LT  ◂ Int ➔ Int ➔ Bool = λ i. λ j. isP    (sub i j).
LTE ◂ Int ➔ Int ➔ Bool = λ i. λ j. isPorZ (sub i j).
EQ  ◂ Int ➔ Int ➔ Bool = λ i. λ j. isZ    (sub i j).


-- Theorems
rec ◂ Π i : Int. {i Z (λ i. S) (λ i. P) ≃ i} = λ i. θ<i> (IntInd i) β
  (λ i. λ ih. ρ+ ih - (s-ss-thm i)) (λ i. λ ih. ρ+ ih - (p-pp-thm i)).

add-id1 ◂ Π i : Int. {add i Z ≃ i} = λ i. β.
add-id2 ◂ Π i : Int. {add Z i ≃ i} = λ i. θ<i> (IntInd i) β
  (λ i. λ ih. ρ+ ih - (s-ss-thm i))
  (λ i. λ ih. ρ+ ih - (p-pp-thm i)).

add-s1 ◂ Π i : Int. Π j : Int. {add i (S j) ≃ S (add i j)} = λ i. λ j. θ<j> (IntInd j) β
  (λ j. λ ih. ρ (s-ss-thm (SS j)) - β)
  (λ j. λ ih. ρ+ (sp-thm (add i j.1)) - β).
add-p1 ◂ Π i : Int. Π j : Int. {add i (P j) ≃ P (add i j)} = λ i. λ j. θ<j> (IntInd j) β
  (λ j. λ ih. ρ+ (ps-thm (add i j.1)) - β)
  (λ j. λ ih. ρ (p-pp-thm (PP j)) - β).
add-s2 ◂ Π i : Int. Π j : Int. {add (S i) j ≃ S (add i j)} = λ i. λ j. θ<j> (IntInd j) β
  (λ j. λ ih.
    ρ ς (s-ss-thm j) -
    ρ (add-s1 (S i) j.1) -
    ρ ih -
    ρ (s-ss-thm j) - β)
  (λ j. λ ih.
    ρ ς (p-pp-thm j) -
    ρ (add-p1 (S i) j.1) -
    ρ (add-p1 i j.1) -
    ρ ih -
    ρ (sp-thm (add i j.1)) -
    ρ (ps-thm (add i j.1)) - β).
add-p2 ◂ Π i : Int. Π j : Int. {add (P i) j ≃ P (add i j)} = λ i. λ j. θ<j> (IntInd j) β
  (λ j. λ ih.
    ρ ς (s-ss-thm j) -
    ρ (add-s1 (P i) j.1) -
    ρ (add-s1 i j.1) -
    ρ ih -
    ρ (sp-thm (add i j.1)) -
    ρ (ps-thm (add i j.1)) - β)
  (λ j. λ ih.
    ρ ς (p-pp-thm j) -
    ρ (add-p1 (P i) j.1) -
    ρ ih -
    ρ (p-pp-thm j) - β).

add-comm ◂ Π i : Int. Π j : Int. {add i j ≃ add j i} = λ i. λ j.
  θ<j> (IntInd j) (ρ (add-id2 i) - β)
    (λ j. λ ih.
      ρ ς (s-ss-thm j) -
      ρ (add-s1 i j.1) -
      ρ (add-s2 j.1 i) -
      ρ ih - β)
    (λ j. λ ih.
      ρ ς (p-pp-thm j) -
      ρ (add-p1 i j.1) -
      ρ (add-p2 j.1 i) -
      ρ ih - β).

add-assoc ◂ Π i : Int. Π j : Int. Π k : Int. {add i (add j k) ≃ add (add i j) k} =
  λ i. λ j. λ k. θ<i> (IntInd i)
    (ρ (add-id2 (add j k)) - ρ (add-id2 j) - β)
      (λ i. λ ih.
        ρ ς (s-ss-thm i) -
        ρ (add-s2 i.1 (add j k)) -
        ρ (add-s2 i.1 j) -
        ρ (add-s2 (add i.1 j) k) -
        ρ ih - β)
      (λ i. λ ih.
        ρ ς (p-pp-thm i) -
        ρ (add-p2 i.1 (add j k)) -
        ρ (add-p2 i.1 j) -
        ρ (add-p2 (add i.1 j) k) -
        ρ ih - β).

add-1-s ◂ Π i : Int. {add i SZ ≃ S i} = λ i. β.
sub-1-p ◂ Π i : Int. {sub i SZ ≃ P i} = λ i. β.

mlt-z1 ◂ Π i : Int. {mlt i Z ≃ Z} = λ i. β.
mlt-z2 ◂ Π i : Int. {mlt Z i ≃ Z} = λ i. θ<i> (IntInd i) β
  (λ i. λ ih. ρ+ ih - β) (λ i. λ ih. ρ+ ih - β).
mlt-id1 ◂ Π i : Int. {mlt i SZ ≃ i} = λ i. ρ+ (add-id2 i) - β.
mlt-id2 ◂ Π i : Int. {mlt SZ i ≃ i} = λ i. θ<i> (IntInd i) β
  (λ i. λ ih. ρ+ ih - ρ (s-ss-thm i) - β)
  (λ i. λ ih. ρ+ ih - ρ (p-pp-thm i) - β).


exp-z1 ◂ Π i : Int. {exp i Z ≃ SZ} = λ i. β.
-- exp-z2 ◂ Π i : Int. exp Z i ≃ Z or SZ?
exp-id ◂ Π i : Int. {exp i SZ ≃ i} = λ i. ρ+ (rec i) - β.
exp-sz ◂ Π i : Int. {exp SZ i ≃ SZ} = λ i. θ<i> (IntInd i) β
  (λ i. λ ih. ρ+ ih - β) (λ i. λ ih. β).
