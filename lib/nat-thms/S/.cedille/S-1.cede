{"spans":[["Cedille source file (/mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/nat-thms/S/S-1.ced)",1,354,{}],["Term-level definition (checking)",253,350,{"checking-mode":"0 checking","summary":"1 S-ineq-bool : Π x : Nat . ((eqnat (S x) x) ≃ ff)","erasure":"2 λ x . (x (λ px . λ h . β) β)"}],["Application of a term to a term",312,348,{"checking-mode":"0 checking","language-level":"1 term","expected-type":"2 ((eqnat (S x) x) ≃ ff)","type":"3 ((eqnat (S x) x) ≃ ff)"}],["Beta axiom",347,348,{"checking-mode":"0 checking","language-level":"1 term","explanation":"2 A term constant whose type states that β-equal terms are provably equal","type":"3 ((eqnat (S Z) Z) ≃ ff)"}],["Application of a term to a term",312,342,{"checking-mode":"0 synthesizing","language-level":"1 term","type":"2 ((λ x : Nat . ((eqnat (S x) x) ≃ ff)) Z) → ((λ x : Nat . ((eqnat (S x) x) ≃ ff)) x)"}],["Rho",333,340,{"language-level":"0 term","the equation":"1 ((eqnat (S px) px) ≃ ff)","type":"2 ((eqnat (S (S px)) (S px)) ≃ ff)","explanation":"3 Rewrite terms in the expected type, using an equation. "}],["Beta axiom",339,340,{"checking-mode":"0 checking","language-level":"1 term","explanation":"2 A term constant whose type states that β-equal terms are provably equal","type":"3 (ff ≃ ff)"}],["Term variable",335,336,{"checking-mode":"0 synthesizing","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/nat-thms/S/S-1.ced - 329","symbol":"3 h","type":"4 (λ x : Nat . ((eqnat (S x) x) ≃ ff)) px","hnf of type":"5 ((eqnat (S px) px) ≃ ff)"}],["Term variable",329,330,{"checking-mode":"0 checking","language-level":"1 term","location":"2 missing - missing","symbol":"3 h","type":"4 (λ x : Nat . ((eqnat (S x) x) ≃ ff)) px","hnf of type":"5 ((eqnat (S px) px) ≃ ff)"}],["Lambda abstraction (term-level)",327,340,{"language-level":"0 term","binder":"1 0","type":"2 ((λ x : Nat . ((eqnat (S x) x) ≃ ff)) px) → ((λ x : Nat . ((eqnat (S x) x) ≃ ff)) (S px))"}],["Lambda",327,328,{"punctuation":"0 true","not-for-navigation":"1 true"}],["Term variable",322,324,{"checking-mode":"0 checking","language-level":"1 term","location":"2 missing - missing","symbol":"3 px","type":"4 Nat","hnf of type":"5 Nat"}],["Lambda abstraction (term-level)",320,340,{"language-level":"0 term","binder":"1 0","type":"2 Π n : Nat . (((λ x : Nat . ((eqnat (S x) x) ≃ ff)) n) → ((λ x : Nat . ((eqnat (S x) x) ≃ ff)) (S n)))"}],["Lambda",320,321,{"punctuation":"0 true","not-for-navigation":"1 true"}],["Parens",318,342,{"punctuation":"0 true","not-for-navigation":"1 true"}],["Application of a term to a type",312,313,{"checking-mode":"0 synthesizing","language-level":"1 term","type":"2 (Π n : Nat . (((λ x : Nat . ((eqnat (S x) x) ≃ ff)) n) → ((λ x : Nat . ((eqnat (S x) x) ≃ ff)) (S n)))) → ((λ x : Nat . ((eqnat (S x) x) ≃ ff)) Z) → ((λ x : Nat . ((eqnat (S x) x) ≃ ff)) x)"}],["Term variable",312,313,{"checking-mode":"0 synthesizing","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/nat-thms/S/S-1.ced - 306","symbol":"3 x","type":"4 Nat","hnf of type":"5 Nat"}],["Theta",310,349,{"language-level":"0 term","expected-type":"1 ((eqnat (S x) x) ≃ ff)","the motive":"2 λ x : Nat . ((eqnat (S x) x) ≃ ff)","explanation":"3 Perform an elimination with the first term, after abstracting it from the expected type."}],["Term variable",306,307,{"checking-mode":"0 checking","language-level":"1 term","location":"2 missing - missing","symbol":"3 x","type":"4 Nat","hnf of type":"5 Nat"}],["Lambda abstraction (term-level)",304,349,{"language-level":"0 term","binder":"1 0","type":"2 Π x : Nat . ((eqnat (S x) x) ≃ ff)"}],["Lambda",304,305,{"punctuation":"0 true","not-for-navigation":"1 true"}],["Equation",279,299,{"checking-mode":"0 checking","language-level":"1 type","kind":"2 ★"}],["Term variable",297,299,{"checking-mode":"0 checking","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/bool.ced - 52","symbol":"3 ff"}],["Term variable",293,294,{"checking-mode":"0 checking","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/nat-thms/S/S-1.ced - 269","symbol":"3 x"}],["Term variable",289,290,{"checking-mode":"0 checking","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/nat-thms/S/S-1.ced - 269","symbol":"3 x"}],["Term variable",287,288,{"checking-mode":"0 checking","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/nat.ced - 41","symbol":"3 S"}],["Term variable",279,284,{"checking-mode":"0 checking","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/nat.ced - 1276","symbol":"3 eqnat"}],["Term variable",269,270,{"checking-mode":"0 checking","language-level":"1 term","location":"2 missing - missing","symbol":"3 x","type":"4 Nat","hnf of type":"5 Nat"}],["Type variable",273,276,{"checking-mode":"0 checking","language-level":"1 type","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/nat.ced - 35","symbol":"3 Nat","expected kind":"4 ★","kind":"5 ★"}],["Forall",267,268,{"punctuation":"0 true","not-for-navigation":"1 true"}],["Dependent function type",267,299,{"checking-mode":"0 checking","language-level":"1 type","binder":"2 0","kind":"3 ★"}],["Term-level definition (checking)",132,251,{"checking-mode":"0 checking","summary":"1 S-add-one-1 : Π n : Nat . ((add n one) ≃ (S n))","erasure":"2 λ n . (n (λ p . λ h . β) β)"}],["Application of a term to a term",186,249,{"checking-mode":"0 checking","language-level":"1 term","expected-type":"2 ((add n one) ≃ (S n))","type":"3 ((add n one) ≃ (S n))"}],["Beta axiom",248,249,{"checking-mode":"0 checking","language-level":"1 term","explanation":"2 A term constant whose type states that β-equal terms are provably equal","type":"3 ((add Z one) ≃ (S Z))"}],["Application of a term to a term",186,243,{"checking-mode":"0 synthesizing","language-level":"1 term","type":"2 ((λ n : Nat . ((add n one) ≃ (S n))) Z) → ((λ n : Nat . ((add n one) ≃ (S n))) n)"}],["Rho",209,241,{"language-level":"0 term","the equation":"1 ((add p one) ≃ (S p))","type":"2 ((λ s . λ z' . (s (p (λ n' . S) one) (p (λ n' . S) one s z'))) ≃ (S (S p)))","explanation":"3 Rewrite terms in the expected type, using an equation. "}],["Rho",215,241,{"language-level":"0 term","the equation":"1 ((add n (S Z)) ≃ (S (add n Z)))","type":"2 ((λ s . λ z' . (s (S p) (S p s z'))) ≃ (S (S p)))","explanation":"3 Rewrite terms in the expected type, using an equation. "}],["Beta axiom",240,241,{"checking-mode":"0 checking","language-level":"1 term","explanation":"2 A term constant whose type states that β-equal terms are provably equal","type":"3 ((λ s . λ z' . (s (S p) (S p s z'))) ≃ (S (S p)))"}],["Application of a term to a term",219,235,{"checking-mode":"0 synthesizing","language-level":"1 term","type":"2 ((add n (S Z)) ≃ (S (add n Z)))"}],["Term variable",234,235,{"checking-mode":"0 checking","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/nat.ced - 57","symbol":"3 Z","expected-type":"4 Nat","type":"5 Nat"}],["Application of a term to a term",219,233,{"checking-mode":"0 synthesizing","language-level":"1 term","type":"2 Π m : Nat . ((add n (S m)) ≃ (S (add n m)))"}],["Term variable",232,233,{"checking-mode":"0 checking","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/nat-thms/S/S-1.ced - 180","symbol":"3 n","expected-type":"4 Nat","type":"5 Nat"}],["Term variable",219,231,{"checking-mode":"0 synthesizing","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/nat-thms/add/add-0.ced - 323","symbol":"3 add-S-comm-1","type":"4 Π n : Nat . Π m : Nat . ((add n (S m)) ≃ (S (add n m)))","hnf of type":"5 Π n : Nat . Π m : Nat . ((add n (S m)) ≃ (S (add n m)))"}],["Parens",217,237,{"punctuation":"0 true","not-for-navigation":"1 true"}],["Term variable",211,212,{"checking-mode":"0 synthesizing","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/nat-thms/S/S-1.ced - 202","symbol":"3 h","type":"4 (λ n : Nat . ((add n one) ≃ (S n))) p","hnf of type":"5 ((add p one) ≃ (S p))"}],["Epsilon",206,241,{"checking-mode":"0 checking","language-level":"1 term","type":"2 ((add (S p) one) ≃ (S (S p)))","explanation":"3 Normalize the left-hand side of the expected equation, using head reduction."}],["Term variable",202,203,{"checking-mode":"0 checking","language-level":"1 term","location":"2 missing - missing","symbol":"3 h","type":"4 (λ n : Nat . ((add n one) ≃ (S n))) p","hnf of type":"5 ((add p one) ≃ (S p))"}],["Lambda abstraction (term-level)",200,241,{"language-level":"0 term","binder":"1 0","type":"2 ((λ n : Nat . ((add n one) ≃ (S n))) p) → ((λ n : Nat . ((add n one) ≃ (S n))) (S p))"}],["Lambda",200,201,{"punctuation":"0 true","not-for-navigation":"1 true"}],["Term variable",196,197,{"checking-mode":"0 checking","language-level":"1 term","location":"2 missing - missing","symbol":"3 p","type":"4 Nat","hnf of type":"5 Nat"}],["Lambda abstraction (term-level)",194,241,{"language-level":"0 term","binder":"1 0","type":"2 Π n' : Nat . (((λ n : Nat . ((add n one) ≃ (S n))) n') → ((λ n : Nat . ((add n one) ≃ (S n))) (S n')))"}],["Lambda",194,195,{"punctuation":"0 true","not-for-navigation":"1 true"}],["Parens",192,243,{"punctuation":"0 true","not-for-navigation":"1 true"}],["Application of a term to a type",186,187,{"checking-mode":"0 synthesizing","language-level":"1 term","type":"2 (Π n' : Nat . (((λ n : Nat . ((add n one) ≃ (S n))) n') → ((λ n : Nat . ((add n one) ≃ (S n))) (S n')))) → ((λ n : Nat . ((add n one) ≃ (S n))) Z) → ((λ n : Nat . ((add n one) ≃ (S n))) n)"}],["Term variable",186,187,{"checking-mode":"0 synthesizing","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/nat-thms/S/S-1.ced - 180","symbol":"3 n","type":"4 Nat","hnf of type":"5 Nat"}],["Theta",184,250,{"language-level":"0 term","expected-type":"1 ((add n one) ≃ (S n))","the motive":"2 λ n : Nat . ((add n one) ≃ (S n))","explanation":"3 Perform an elimination with the first term, after abstracting it from the expected type."}],["Term variable",180,181,{"checking-mode":"0 checking","language-level":"1 term","location":"2 missing - missing","symbol":"3 n","type":"4 Nat","hnf of type":"5 Nat"}],["Lambda abstraction (term-level)",178,250,{"language-level":"0 term","binder":"1 0","type":"2 Π n : Nat . ((add n one) ≃ (S n))"}],["Lambda",178,179,{"punctuation":"0 true","not-for-navigation":"1 true"}],["Equation",158,173,{"checking-mode":"0 checking","language-level":"1 type","kind":"2 ★"}],["Term variable",172,173,{"checking-mode":"0 checking","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/nat-thms/S/S-1.ced - 148","symbol":"3 n"}],["Term variable",170,171,{"checking-mode":"0 checking","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/nat.ced - 41","symbol":"3 S"}],["Term variable",164,167,{"checking-mode":"0 checking","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/nat.ced - 219","symbol":"3 one"}],["Term variable",162,163,{"checking-mode":"0 checking","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/nat-thms/S/S-1.ced - 148","symbol":"3 n"}],["Term variable",158,161,{"checking-mode":"0 checking","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/nat.ced - 238","symbol":"3 add"}],["Term variable",148,149,{"checking-mode":"0 checking","language-level":"1 term","location":"2 missing - missing","symbol":"3 n","type":"4 Nat","hnf of type":"5 Nat"}],["Type variable",152,155,{"checking-mode":"0 checking","language-level":"1 type","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/nat.ced - 35","symbol":"3 Nat","expected kind":"4 ★","kind":"5 ★"}],["Forall",146,147,{"punctuation":"0 true","not-for-navigation":"1 true"}],["Dependent function type",146,173,{"checking-mode":"0 checking","language-level":"1 type","binder":"2 0","kind":"3 ★"}],["Term-level definition (checking)",29,130,{"checking-mode":"0 checking","summary":"1 S-refl-iter : Π x : Nat . (x ≃ (x (λ p . S) Z))","erasure":"2 λ x . β"}],["Rho",85,128,{"language-level":"0 term","the equation":"1 ((x (λ p . S) Z) ≃ (add x Z))","type":"2 (x ≃ (x (λ p . S) Z))","explanation":"3 Rewrite terms in the expected type, using an equation. "}],["Rho",109,128,{"language-level":"0 term","the equation":"1 ((add x Z) ≃ x)","type":"2 (x ≃ (add x Z))","explanation":"3 Rewrite terms in the expected type, using an equation. "}],["Beta axiom",127,128,{"checking-mode":"0 checking","language-level":"1 term","explanation":"2 A term constant whose type states that β-equal terms are provably equal","type":"3 (x ≃ x)"}],["Application of a term to a term",113,122,{"checking-mode":"0 synthesizing","language-level":"1 term","type":"2 ((add x Z) ≃ x)"}],["Term variable",121,122,{"checking-mode":"0 checking","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/nat-thms/S/S-1.ced - 81","symbol":"3 x","expected-type":"4 Nat","type":"5 Nat"}],["Term variable",113,120,{"checking-mode":"0 synthesizing","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/nat-thms/add/add-0.ced - 155","symbol":"3 add-Z-1","type":"4 Π n : Nat . ((add n Z) ≃ n)","hnf of type":"5 Π n : Nat . ((add n Z) ≃ n)"}],["Parens",111,124,{"punctuation":"0 true","not-for-navigation":"1 true"}],["Sigma",87,106,{"language-level":"0 term","type":"1 ((x (λ p . S) Z) ≃ (add x Z))","explanation":"2 Swap the sides of the equation synthesized for the body of this term."}],["Application of a term to a term",91,103,{"checking-mode":"0 synthesizing","language-level":"1 term","type":"2 ((add x Z) ≃ (x (λ p . S) Z))"}],["Term variable",102,103,{"checking-mode":"0 checking","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/nat.ced - 57","symbol":"3 Z","expected-type":"4 Nat","type":"5 Nat"}],["Application of a term to a term",91,101,{"checking-mode":"0 synthesizing","language-level":"1 term","type":"2 Π y : Nat . ((add x y) ≃ (x (λ p . S) y))"}],["Term variable",100,101,{"checking-mode":"0 checking","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/nat-thms/S/S-1.ced - 81","symbol":"3 x","expected-type":"4 Nat","type":"5 Nat"}],["Term variable",91,99,{"checking-mode":"0 synthesizing","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/nat-thms/add/add-0.ced - 28","symbol":"3 add-defn","type":"4 Π x : Nat . Π y : Nat . ((add x y) ≃ (x (λ p . S) y))","hnf of type":"5 Π x : Nat . Π y : Nat . ((add x y) ≃ (x (λ p . S) y))"}],["Parens",89,106,{"punctuation":"0 true","not-for-navigation":"1 true"}],["Term variable",81,82,{"checking-mode":"0 checking","language-level":"1 term","location":"2 missing - missing","symbol":"3 x","type":"4 Nat","hnf of type":"5 Nat"}],["Lambda abstraction (term-level)",79,128,{"language-level":"0 term","binder":"1 0","type":"2 Π x : Nat . (x ≃ (x (λ p . S) Z))"}],["Lambda",79,80,{"punctuation":"0 true","not-for-navigation":"1 true"}],["Equation",55,74,{"checking-mode":"0 checking","language-level":"1 type","kind":"2 ★"}],["Term variable",73,74,{"checking-mode":"0 checking","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/nat.ced - 57","symbol":"3 Z"}],["Term variable",69,70,{"checking-mode":"0 checking","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/nat.ced - 41","symbol":"3 S"}],["Term variable",59,60,{"checking-mode":"0 checking","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/nat-thms/S/S-1.ced - 45","symbol":"3 x"}],["Term variable",55,56,{"checking-mode":"0 checking","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/nat-thms/S/S-1.ced - 45","symbol":"3 x"}],["Term variable",45,46,{"checking-mode":"0 checking","language-level":"1 term","location":"2 missing - missing","symbol":"3 x","type":"4 Nat","hnf of type":"5 Nat"}],["Type variable",49,52,{"checking-mode":"0 checking","language-level":"1 type","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/nat.ced - 35","symbol":"3 Nat","expected kind":"4 ★","kind":"5 ★"}],["Forall",43,44,{"punctuation":"0 true","not-for-navigation":"1 true"}],["Dependent function type",43,74,{"checking-mode":"0 checking","language-level":"1 type","binder":"2 0","kind":"3 ★"}],["Import of another source file",1,27,{"location":"0 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/nat-thms/add/add-0.ced - 1"}]]}
