{- (Unsigned) Intrinsically Parametric Integers in the Style of Parigot Naturals -}

module int.
import cast.
import recType.
import top.

{- Pre-Type Definitions -}
abs ◂ Top = β{λ i. λ z. λ s. λ p. i z s s}.
sba ◂ Top = β{λ i. λ z. λ s. λ p. i z p p}.
zu ◂ Top = β{λ z. λ s. λ p. z}.
ssu ◂ Top = β{λ i. λ z. λ s. λ p. s i (i z s p)}.
ppu ◂ Top = β{λ i. λ z. λ s. λ p. p i (i z s p)}.
su ◂ Top = β{λ i. i (ssu zu) (λ i. ssu) (λ i. λ x. i)}.
pu ◂ Top = β{λ i. i (ppu zu) (λ i. λ x. i) (λ i. ppu)}.


{- For pretty printing the normalization of an int -}
print ◂ Top = β{λ i. λ z. λ s. λ p. i z (λ i. s) (λ i. p)}.

Pos'' ◂ ★ ➔ ★ = λ I : ★. ι i : I. {i ≃ abs i}.
Neg'' ◂ ★ ➔ ★ = λ I : ★. ι i : I. {i ≃ sba i}.


{- Recusive Type Definitions -}

IntF ◂ ★ ➔ ★ = λ I : ★. ι i : (∀ X : ★.
  Π z : X.
  (ι s : Top. Π i : Pos'' · I. Π x : X. (∀ p : Top. {i z s p ≃ x}) ➾ X) ➔
  (ι p : Top. Π i : Neg'' · I. Π x : X. (∀ s : Top. {i z s p ≃ x}) ➾ X) ➔
  X). {i zu (λ i. ssu) (λ i. ppu) ≃ i}.
Int' ◂ ★ = Rec · IntF.
Pos' ◂ ★ = Pos'' · Int'.
Neg' ◂ ★ = Neg'' · Int'.

IntFmap ◂ RecFunctor · IntF = Λ I. Λ J. λ c.
  [λ i. [Λ X. λ z. λ s. λ p. i.1 · X z
    [β{s}, λ i. s.2 [cast · I · J -c i.1, i.2]]
    [β{p}, λ i. p.2 [cast · I · J -c i.1, i.2]], ρ+ i.2 - β{i}], β].
IntFold   ◂ IntF · Int' ➔ Int' = cast -(recFold   · IntF -IntFmap).
IntUnfold ◂ Int' ➔ IntF · Int' = cast -(recUnfold · IntF -IntFmap).

Z' ◂ Int' = IntFold [Λ X. λ z. λ s. λ p. z, β{zu}].
SS' ◂ Pos' ➔ Pos' = λ i. [IntFold [Λ X. λ z. λ s. λ p.
    s.2 i ((IntUnfold i.1).1 · X z s p) -(Λ p. ρ i.2 - β),
  ρ+ (IntUnfold i.1).2 - β{λ z. λ s. λ p. s i (i z s p)}],
  ρ i.2 - β{λ z. λ s. λ p. s i (i z s p)}].
PP' ◂ Neg' ➔ Neg' = λ i. [IntFold [Λ X. λ z. λ s. λ p.
    p.2 i ((IntUnfold i.1).1 · X z s p) -(Λ s. ρ i.2 - β),
  ρ+ (IntUnfold i.1).2 - β{λ z. λ s. λ p. p i (i z s p)}],
  ρ i.2 - β{λ z. λ s. λ p. p i (i z s p)}].


{- Parametric Integer Definitions -}

IntParam ◂ Int' ➔ ★ = λ i : Int'. ∀ X : ★. ∀ Q : X ➔ ★.
  ∀ z : X.
  ∀ s : (ι s : Top. Π i : Pos'. Π x : X. (∀ p : Top. {i z s p ≃ x}) ➾ X).
  ∀ p : (ι p : Top. Π i : Neg'. Π x : X. (∀ s : Top. {i z s p ≃ x}) ➾ X).
  Q z ➔
  (Π i : Pos'. ∀ x : X. Π q : Q x. ∀ e : (∀ p : Top. {i z s p ≃ x}). Q (s.2 i x -e)) ➔
  (Π i : Neg'. ∀ x : X. Π q : Q x. ∀ e : (∀ s : Top. {i z s p ≃ x}). Q (p.2 i x -e)) ➔
  Q ((IntUnfold i).1 · X z s p).

Int ◂ ★ = ι i : Int'. ι _ : {i Z' (λ i. SS') (λ i. PP') ≃ i}. IntParam i.
Pos ◂ ★ = Pos'' · Int.
Neg ◂ ★ = Neg'' · Int.

Z ◂ Int = [Z', [β{Z'}, Λ X. Λ Q. Λ zero. Λ succ. Λ pred. λ z. λ s. λ p. z]].
ZS ◂ Pos = [Z, β{Z}].
ZP ◂ Neg = [Z, β{Z}].

SS ◂ Pos ➔ Pos = λ i. [[(SS' [i.1.1, i.2]).1,
  [ρ+ i.1.2.1 - β{SS' i},
   Λ X. Λ Q. Λ zero. Λ succ. Λ pred. λ z. λ s. λ p.
     s [i.1.1, i.2] -((IntUnfold i.1.1).1 · X zero succ pred)
       (i.1.2.2 · X · Q -zero -succ -pred z s p) -(Λ p. ρ i.2 - β)]],
   ρ i.2 - β{SS' i}].
PP ◂ Neg ➔ Neg = λ i. [[(PP' [i.1.1, i.2]).1,
  [ρ+ i.1.2.1 - β{PP' i},
   Λ X. Λ Q. Λ zero. Λ succ. Λ pred. λ z. λ s. λ p.
     p [i.1.1, i.2] -((IntUnfold i.1.1).1 · X zero succ pred)
       (i.1.2.2 · X · Q -zero -succ -pred z s p) -(Λ s. ρ i.2 - β)]],
   ρ i.2 - β{PP' i}].

SZ ◂ Pos = SS ZS.
PZ ◂ Neg = PP ZP.


{- Induction Principles -}

IntInd ◂ Π i : Int. ∀ Q : Int ➔ ★.
    Q Z ➔
    (Π i : Pos. Q i.1 ➔ Q (SS i).1) ➔
    (Π i : Neg. Q i.1 ➔ Q (PP i).1) ➔
    Q i =
  λ i. φ β - (Λ Q. λ z. λ s. λ p. ρ ς i.2.1 - (i.2.2 · Int · Q -Z
    -[β{λ i. SS}, λ i. λ x. Λ r.
      (SS [x, ρ ς (r -β{λ i. PP'}) - ρ (IntUnfold i.1).2 - ρ i.2 - β{x}]).1]
    -[β{λ i. PP}, λ i. λ x. Λ r.
      (PP [x, ρ ς (r -β{λ i. SS'}) - ρ (IntUnfold i.1).2 - ρ i.2 - β{x}]).1] z
    (λ i. Λ x. λ q. Λ r. [e ◂ {x ≃ i} = ρ ς (r -β{λ i. PP'}) - (IntUnfold i.1).2] -
      φ (ρ e - β) - (s [x, ρ e - ρ i.2 - β{x}] q) {s i q})
    (λ i. Λ x. λ q. Λ r. [e ◂ {x ≃ i} = ρ ς (r -β{λ i. SS'}) - (IntUnfold i.1).2] -
      φ (ρ e - β) - (p [x, ρ e - ρ i.2 - β{x}] q) {p i q}))) {i}.

IntIndS ◂ Π i : Pos. ∀ Q : Pos ➔ ★.
    Q ZS ➔
    (Π i : Pos. Q i ➔ Q (SS i)) ➔
    Top ➔
    Q i =
  λ i. φ (ρ+ i.2 - β) - (Λ Q. λ z. λ s. λ p.
    ρ ς i.1.2.1 - ρ i.2 - (i.1.2.2 · Pos · Q -ZS
    -[β{λ i. SS}, λ i. λ x. Λ r. SS x]
    -[β{λ i. SS}, λ i. λ x. Λ r. SS x] z
    (λ i. Λ x. λ q. Λ r.
      φ (ρ ς (r -β{λ i. PP'}) - ρ (IntUnfold i.1).2 - β) - (s x q) {s i q})
    (λ i. Λ x. λ q. Λ r. φ (ρ (r -β{λ i. SS'}) - β) -
      (s x q) {s (i Z (λ i. SS) (λ i. SS)) q}))) {i}.

IntIndP ◂ Π i : Neg. ∀ Q : Neg ➔ ★.
    Q ZP ➔
    Top ➔
    (Π i : Neg. Q i ➔ Q (PP i)) ➔
    Q i =
  λ i. φ (ρ+ i.2 - β) - (Λ Q. λ z. λ s. λ p.
    ρ ς i.1.2.1 - ρ i.2 - (i.1.2.2 · Neg · Q -ZP
    -[β{λ i. PP}, λ i. λ x. Λ r. PP x]
    -[β{λ i. PP}, λ i. λ x. Λ r. PP x] z
    (λ i. Λ x. λ q. Λ r. φ (ρ ς (r -β{λ i. PP'}) - β) -
      (p x q) {p (i Z (λ i. PP) (λ i. PP)) q})
    (λ i. Λ x. λ q. Λ r. φ (ρ ς (r -β{λ i. SS'}) - ρ (IntUnfold i.1).2 - β) -
      (p x q) {p i q}))) {i}.

s-ss-thm ◂ Π i : Pos. {su i ≃ SS i} = λ i. θ<i> (IntIndS i) β (λ i. λ ih. ρ+ ih - β) β.
p-pp-thm ◂ Π i : Neg. {pu i ≃ PP i} = λ i. θ<i> (IntIndP i) β β (λ i. λ ih. ρ+ ih - β).

S ◂ Int ➔ Int = λ i. [r = IntInd i · (λ i : Int. ι j : Int. {j ≃ su i}) [SZ.1, β{SZ}]
  (λ i. λ x. [(SS [x.1, ρ x.2 - ρ (s-ss-thm i) - ρ i.2 - β{x}]).1, ρ x.2 - β{SS x}])
  (λ i. λ x. [i.1, β{i}])] - φ r.2 - r.1 {su i}.
P ◂ Int ➔ Int = λ i. [r = IntInd i · (λ i : Int. ι j : Int. {j ≃ pu i}) [PZ.1, β{PZ}]
  (λ i. λ x. [i.1, β{i}])
  (λ i. λ x. [(PP [x.1, ρ x.2 - ρ (p-pp-thm i) - ρ i.2 - β{x}]).1, ρ x.2 - β{PP x}])] - φ r.2 - r.1 {pu i}.


IntInt ◂ Π i : Int. ∀ X : ★. X ➔ (Pos ➔ X ➔ X) ➔ (Neg ➔ X ➔ X) ➔ X =
  λ i. Λ X. IntInd i · (λ i : Int. X).

IntInd2 ◂ Π i : Int. ∀ Q : Int ➔ ★.
    Q Z ➔
    (Π i : Pos. Q i.1 ➔ Q (S i.1)) ➔
    (Π i : Neg. Q i.1 ➔ Q (P i.1)) ➔ Q i =
  λ i. Λ Q. λ z. λ s. λ p. IntInd i · Q z (λ i. ρ ς (s-ss-thm i) - (s i)) (λ i. ρ ς (p-pp-thm i) - (p i)).

IntInd3 ◂ Π i : Int. ∀ Q : Int ➔ ★.
    Q Z ➔
    (Π i : Int. Q i ➔ Q (S i)) ➔
    (Π i : Int. Q i ➔ Q (P i)) ➔ Q i =
  λ i. Λ Q. λ z. λ s. λ p. IntInd i · Q z (λ i. ρ ς (s-ss-thm i) - (s i.1)) (λ i. ρ ς (p-pp-thm i) - (p i.1)).

sp-thm ◂ Π i : Int. {S (P i) ≃ i} = λ i. θ<i> (IntInd i) β
  (λ i. λ ih. s-ss-thm i)
  (λ i. λ ih. p-pp-thm i).
ps-thm ◂ Π i : Int. {P (S i) ≃ i} = λ i. θ<i> (IntInd i) β
  (λ i. λ ih. s-ss-thm i)
  (λ i. λ ih. p-pp-thm i).

abse ◂ Int ➔ Pos = λ i. IntInt i · Pos ZS (λ i. SS) (λ i. SS).
sbae ◂ Int ➔ Neg = λ i. IntInt i · Neg ZP (λ i. PP) (λ i. PP).

