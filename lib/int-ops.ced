module int-ops.
import int.
import top.
import bool.

{- Operations -}
neg ◂ Int ➔ Int = λ i. IntInt i Z (λ i. P) (λ i. S).
sgn ◂ Int ➔ Int = λ i. IntInt i Z (λ i. λ x. SZ.1) (λ i. λ x. PZ.1).
add ◂ Int ➔ Int ➔ Int = λ i. λ j. IntInt j i (λ i. S) (λ i. P).
sub ◂ Int ➔ Int ➔ Int = λ i. λ j. IntInt j i (λ i. P) (λ i. S).
mlt ◂ Int ➔ Int ➔ Int = λ i. λ j. IntInt j Z (λ j. λ x. add x i) (λ j. λ x. sub x i).
exp ◂ Int ➔ Int ➔ Int = λ i. λ j. IntInt j SZ.1 (λ j. λ x. mlt x i) (λ j. λ x. SZ.1).
sqr ◂ Int ➔ Int = λ i. mlt i i.

Fx ◂ ★ = Int ➔ Int.
cmp ◂ Fx ➔ Fx ➔ Fx = λ f. λ g. λ i. f (g i).

Sum ◂ Π n : Int. Π k : Int. Fx ➔ Int = λ n. λ k. λ f. IntInt (sub n k) Z
  (λ i. add (f (add i.1 k)))
  (λ i. add (f (add i.1 k))).

Prd ◂ Π n : Int. Π k : Int. Fx ➔ Int = λ n. λ k. λ f. IntInt (sub n k) SZ.1
  (λ i. mlt (f (add i.1 k)))
  (λ i. mlt (f (add i.1 k))).

{- Predicates -}

isZ    ◂ Int ➔ Bool = λ i. IntInt i tt (λ i. λ x. ff) (λ i. λ x. ff).
isSorZ ◂ Int ➔ Bool = λ i. IntInt i tt (λ i. λ x. tt) (λ i. λ x. ff).
isS    ◂ Int ➔ Bool = λ i. IntInt i ff (λ i. λ x. tt) (λ i. λ x. ff).
isPorZ ◂ Int ➔ Bool = λ i. IntInt i tt (λ i. λ x. ff) (λ i. λ x. tt).
isP    ◂ Int ➔ Bool = λ i. IntInt i ff (λ i. λ x. ff) (λ i. λ x. tt).
Even   ◂ Int ➔ Bool = λ i. IntInt i tt (λ i. not) (λ i. not).
Odd    ◂ Int ➔ Bool = λ i. IntInt i ff (λ i. not) (λ i. not).
GT  ◂ Int ➔ Int ➔ Bool = λ i. λ j. isS    (sub i j).
GTE ◂ Int ➔ Int ➔ Bool = λ i. λ j. isSorZ (sub i j).
LT  ◂ Int ➔ Int ➔ Bool = λ i. λ j. isP    (sub i j).
LTE ◂ Int ➔ Int ➔ Bool = λ i. λ j. isPorZ (sub i j).
EQ  ◂ Int ➔ Int ➔ Bool = λ i. λ j. isZ    (sub i j).
