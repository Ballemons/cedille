import nat.
import false.

addZ ⇐ Π x : Nat . add x Z ≃ x
  = λ x . θ x (λ n . λ u . εl (ρ εl- u - β)) β .

addS ⇐ Π x : Nat . Π y : Nat . add x (S y) ≃ S (add x y)
  = λ x . λ y . θ x 
                 (λ n . λ u . εl- (ρ εl u - β)) β.

addComm ⇐ Π x : Nat . Π y : Nat . add x y ≃ add y x 
  = λ x . λ y . θ x 
                  (λ x . λ u .
                     (εl- (ρ u - ρ (addS y x) - β)))
                  (εl ρ (addZ y) - β) . 
  
addAssoc ⇐ Π x : Nat . Π y : Nat . Π z : Nat . add x (add y z) ≃ add (add x y) z = 
  λ x . λ y . λ z . θ x (λ n . λ ih . εl ρ ih - β) β .

compareEq ⇐ Π x : Nat . Π y : Nat . (compare x y ≃ EQ) → x ≃ y =
  λ x . θ x (λ p . λ r . λ y . 
              θ y (λ p' . λ r' . λ u . ρ (r p' u) - β) (λ u . δ u)) 
            (λ y . θ y (λ p' . λ r' . λ u . δ u) (λ u . β)) .

eqnatEq ⇐ Π x : Nat . Π y : Nat . (eqnat x y ≃ tt) → x ≃ y = 
  λ x . λ y . λ u . θ+ (compare x y) (λ v . δ (ρ v - εl u)) (compareEq x y) (λ v . δ (ρ v - εl u)) .


eqnatS ⇐ Π x : Nat . eqnat x (S x) ≃ ff =
  λ x . θ x (λ p . λ u . ρ u - β) β .

eqnatSym ⇐ Π x : Nat . Π y : Nat . eqnat x y ≃ eqnat y x = 
  λ x . θ x 
          (λ x . λ u . λ y . 
               θ y (λ y . λ v . (u y)) β)
          (λ y . θ y (λ py . λ u . β) β) .

% S has no fixed point
nofixS ⇐ Π x : Nat . (S x ≃ x) → False = 
  λ x . θ x (λ n . λ ih . λ u . ih (π1 ε u)) (λ u . δ ε u) .
