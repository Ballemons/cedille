module RecType(F : ★ ➔ ★).

import top.
import cast.

RecFunctor ◂ ★ =
  ∀ X : ★ . ∀ Y : ★ . Cast · X · Y ➔ Cast · (F · X) · (F · Y) .

recFmap ◂ ∀ X : ★ . ∀ Y : ★ . RecFunctor ➾ Cast · X · Y ➾ F · X ➔ F · Y =
  Λ X . Λ Y . Λ fmap . Λ c . λ f . cast -(fmap c) f .

Rec ◂ ★ = ∀ X : ★ . Cast · (F · X) · X ➾ X . 

recCast ◂ ∀ X : ★ . Cast · (F · X) · X ➾ Cast · Rec · X =
  Λ X . Λ c . [ λ d . d · X -c , β ].

recIn ◂ RecFunctor ➾ Cast · (F · Rec) · Rec =
  Λ fmap . 
    [ λ x . Λ X . Λ c .
      cast · (F · X) · X -c
        (cast · (F · Rec) · (F · X)
          -(fmap · Rec · X (recCast · X -c)) x),
      β ].

recOut ◂ RecFunctor ➾ Cast · Rec · (F · Rec) =
  Λ fmap . [λ x . x · (F · Rec) -(fmap · (F · Rec) · Rec (recIn -fmap)) , β ].

recFold ◂ RecFunctor ➾ Cast · (F · Rec) · Rec = recIn .
recUnfold ◂ RecFunctor ➾ Cast · Rec · (F · Rec) = recOut .

recIso1 ◂ ∀ a : Top . {recFold (recUnfold a) ≃ a} = Λ a . β.
recIso2 ◂ ∀ a : Top . {recUnfold (recFold a) ≃ a} = Λ a . β.

