{"spans":[["Cedille source file (/mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/map/map-0.ced)",1,250,{}],["Term-level definition (checking)",15,247,{"checking-mode":"0 checking","summary":"1 map-append : ∀ A : ★ . ∀ B : ★ . ∀ f : (A → B) . Π l : (List · A) . Π l' : (List · A) . ((map f (append l l')) ≃ (append (map f l) (map f l')))","erasure":"2 λ l . λ l' . (l (λ h . λ t . λ ih . β) β)"}],["Application of a term to a term",208,244,{"checking-mode":"0 checking","language-level":"1 term","expected-type":"2 ((map f (append l l')) ≃ (append (map f l) (map f l')))","type":"3 ((map f (append l l')) ≃ (append (map f l) (map f l')))"}],["Beta axiom",243,244,{"checking-mode":"0 checking","language-level":"1 term","explanation":"2 A term constant whose type states that β-equal terms are provably equal","type":"3 ((map f (append Nil l')) ≃ (append (map f Nil) (map f l')))"}],["Application of a term to a term",208,242,{"checking-mode":"0 synthesizing","language-level":"1 term","type":"2 ((λ l : (List · A) . ((map f (append l l')) ≃ (append (map f l) (map f l')))) Nil) → ((λ l : (List · A) . ((map f (append l l')) ≃ (append (map f l) (map f l')))) l)"}],["Rho",233,241,{"language-level":"0 term","the equation":"1 ((map f (append t l')) ≃ (append (map f t) (map f l')))","type":"2 ((λ c . λ e . (c (f h) (t appendCons l' (λ h' . λ t' . λ r . (Cons (f h') r)) Nil) (t appendCons l' (λ h' . λ t' . λ r . (Cons (f h') r)) Nil c e))) ≃ (append (map f (Cons h t)) (map f l')))","explanation":"3 Rewrite terms in the expected type, using an equation. "}],["Beta axiom",240,241,{"checking-mode":"0 checking","language-level":"1 term","explanation":"2 A term constant whose type states that β-equal terms are provably equal","type":"3 ((λ c . λ e . (c (f h) (append (map f t) (map f l')) (append (map f t) (map f l') c e))) ≃ (append (map f (Cons h t)) (map f l')))"}],["Term variable",235,237,{"checking-mode":"0 synthesizing","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/map/map-0.ced - 225","symbol":"3 ih","type":"4 (λ l : (List · A) . ((map f (append l l')) ≃ (append (map f l) (map f l')))) t","hnf of type":"5 ((map f (append t l')) ≃ (append (map f t) (map f l')))"}],["Epsilon",230,241,{"checking-mode":"0 checking","language-level":"1 term","type":"2 ((map f (append (Cons h t) l')) ≃ (append (map f (Cons h t)) (map f l')))","explanation":"3 Normalize the left-hand side of the expected equation, using head reduction."}],["Term variable",225,227,{"checking-mode":"0 checking","language-level":"1 term","location":"2 missing - missing","symbol":"3 ih","type":"4 (λ l : (List · A) . ((map f (append l l')) ≃ (append (map f l) (map f l')))) t","hnf of type":"5 ((map f (append t l')) ≃ (append (map f t) (map f l')))"}],["Lambda abstraction (term-level)",223,241,{"language-level":"0 term","binder":"1 0","type":"2 ((λ l : (List · A) . ((map f (append l l')) ≃ (append (map f l) (map f l')))) t) → ((λ l : (List · A) . ((map f (append l l')) ≃ (append (map f l) (map f l')))) (Cons h t))"}],["Lambda",223,224,{"punctuation":"0 true","not-for-navigation":"1 true"}],["Term variable",219,220,{"checking-mode":"0 checking","language-level":"1 term","location":"2 missing - missing","symbol":"3 t","type":"4 List · A","hnf of type":"5 List · A"}],["Lambda abstraction (term-level)",217,241,{"language-level":"0 term","binder":"1 0","type":"2 Π t : (List · A) . (((λ l : (List · A) . ((map f (append l l')) ≃ (append (map f l) (map f l')))) t) → ((λ l : (List · A) . ((map f (append l l')) ≃ (append (map f l) (map f l')))) (Cons h t)))"}],["Lambda",217,218,{"punctuation":"0 true","not-for-navigation":"1 true"}],["Term variable",213,214,{"checking-mode":"0 checking","language-level":"1 term","location":"2 missing - missing","symbol":"3 h","type":"4 A","hnf of type":"5 A"}],["Lambda abstraction (term-level)",211,241,{"language-level":"0 term","binder":"1 0","type":"2 Π h : A . Π t : (List · A) . (((λ l : (List · A) . ((map f (append l l')) ≃ (append (map f l) (map f l')))) t) → ((λ l : (List · A) . ((map f (append l l')) ≃ (append (map f l) (map f l')))) (Cons h t)))"}],["Lambda",211,212,{"punctuation":"0 true","not-for-navigation":"1 true"}],["Parens",210,242,{"punctuation":"0 true","not-for-navigation":"1 true"}],["Application of a term to a type",208,209,{"checking-mode":"0 synthesizing","language-level":"1 term","type":"2 (Π h : A . Π t : (List · A) . (((λ l : (List · A) . ((map f (append l l')) ≃ (append (map f l) (map f l')))) t) → ((λ l : (List · A) . ((map f (append l l')) ≃ (append (map f l) (map f l')))) (Cons h t)))) → ((λ l : (List · A) . ((map f (append l l')) ≃ (append (map f l) (map f l')))) Nil) → ((λ l : (List · A) . ((map f (append l l')) ≃ (append (map f l) (map f l')))) l)"}],["Term variable",208,209,{"checking-mode":"0 synthesizing","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/map/map-0.ced - 187","symbol":"3 l","type":"4 List · A","hnf of type":"5 List · A"}],["Theta",206,245,{"language-level":"0 term","expected-type":"1 ((map f (append l l')) ≃ (append (map f l) (map f l')))","the motive":"2 λ l : (List · A) . ((map f (append l l')) ≃ (append (map f l) (map f l')))","explanation":"3 Perform an elimination with the first term, after abstracting it from the expected type."}],["Term variable",193,195,{"checking-mode":"0 checking","language-level":"1 term","location":"2 missing - missing","symbol":"3 l'","type":"4 List · A","hnf of type":"5 List · A"}],["Lambda abstraction (term-level)",191,245,{"language-level":"0 term","binder":"1 0","type":"2 Π l' : (List · A) . ((map f (append l l')) ≃ (append (map f l) (map f l')))"}],["Lambda",191,192,{"punctuation":"0 true","not-for-navigation":"1 true"}],["Term variable",187,188,{"checking-mode":"0 checking","language-level":"1 term","location":"2 missing - missing","symbol":"3 l","type":"4 List · A","hnf of type":"5 List · A"}],["Lambda abstraction (term-level)",185,245,{"language-level":"0 term","binder":"1 0","type":"2 Π l : (List · A) . Π l' : (List · A) . ((map f (append l l')) ≃ (append (map f l) (map f l')))"}],["Lambda",185,186,{"punctuation":"0 true","not-for-navigation":"1 true"}],["Term variable",181,182,{"checking-mode":"0 checking","language-level":"1 term","location":"2 missing - missing","symbol":"3 f","type":"4 A → B","hnf of type":"5 A → B"}],["Erased lambda abstraction (term-level)",179,245,{"language-level":"0 term","binder":"1 0","type":"2 ∀ f : (A → B) . Π l : (List · A) . Π l' : (List · A) . ((map f (append l l')) ≃ (append (map f l) (map f l')))"}],["Lambda",179,180,{"punctuation":"0 true","not-for-navigation":"1 true"}],["Type variable",175,176,{"checking-mode":"0 checking","language-level":"1 type","location":"2 missing - missing","symbol":"3 B","kind":"4 ★"}],["Erased lambda abstraction (term-level)",173,245,{"language-level":"0 term","binder":"1 0","type":"2 ∀ B : ★ . ∀ f : (A → B) . Π l : (List · A) . Π l' : (List · A) . ((map f (append l l')) ≃ (append (map f l) (map f l')))"}],["Lambda",173,174,{"punctuation":"0 true","not-for-navigation":"1 true"}],["Type variable",169,170,{"checking-mode":"0 checking","language-level":"1 type","location":"2 missing - missing","symbol":"3 A","kind":"4 ★"}],["Erased lambda abstraction (term-level)",167,245,{"language-level":"0 term","binder":"1 0","type":"2 ∀ A : ★ . ∀ B : ★ . ∀ f : (A → B) . Π l : (List · A) . Π l' : (List · A) . ((map f (append l l')) ≃ (append (map f l) (map f l')))"}],["Lambda",167,168,{"punctuation":"0 true","not-for-navigation":"1 true"}],["Equation",110,159,{"checking-mode":"0 checking","language-level":"1 type","kind":"2 ★"}],["Term variable",156,158,{"checking-mode":"0 checking","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/map/map-0.ced - 81","symbol":"3 l'"}],["Term variable",154,155,{"checking-mode":"0 checking","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/map/map-0.ced - 50","symbol":"3 f"}],["Term variable",150,153,{"checking-mode":"0 checking","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list.ced - 1549","symbol":"3 map"}],["Term variable",146,147,{"checking-mode":"0 checking","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/map/map-0.ced - 64","symbol":"3 l"}],["Term variable",144,145,{"checking-mode":"0 checking","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/map/map-0.ced - 50","symbol":"3 f"}],["Term variable",140,143,{"checking-mode":"0 checking","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list.ced - 1549","symbol":"3 map"}],["Term variable",132,138,{"checking-mode":"0 checking","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list.ced - 397","symbol":"3 append"}],["Term variable",126,128,{"checking-mode":"0 checking","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/map/map-0.ced - 81","symbol":"3 l'"}],["Term variable",124,125,{"checking-mode":"0 checking","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/map/map-0.ced - 64","symbol":"3 l"}],["Term variable",117,123,{"checking-mode":"0 checking","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list.ced - 397","symbol":"3 append"}],["Term variable",114,115,{"checking-mode":"0 checking","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/map/map-0.ced - 50","symbol":"3 f"}],["Term variable",110,113,{"checking-mode":"0 checking","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list.ced - 1549","symbol":"3 map"}],["Term variable",81,83,{"checking-mode":"0 checking","language-level":"1 term","location":"2 missing - missing","symbol":"3 l'","type":"4 List · A","hnf of type":"5 List · A"}],["Application of a type to a type",86,94,{"checking-mode":"0 checking","language-level":"1 type","expected kind":"2 ★","kind":"3 ★"}],["Type variable",93,94,{"checking-mode":"0 checking","language-level":"1 type","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/map/map-0.ced - 30","symbol":"3 A","expected kind":"4 ★","kind":"5 ★"}],["Type variable",86,90,{"checking-mode":"0 synthesizing","language-level":"1 type","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list.ced - 45","symbol":"3 List","kind":"4 ★ → ★"}],["Forall",79,80,{"punctuation":"0 true","not-for-navigation":"1 true"}],["Dependent function type",79,159,{"checking-mode":"0 checking","language-level":"1 type","binder":"2 0","kind":"3 ★"}],["Term variable",64,65,{"checking-mode":"0 checking","language-level":"1 term","location":"2 missing - missing","symbol":"3 l","type":"4 List · A","hnf of type":"5 List · A"}],["Application of a type to a type",68,76,{"checking-mode":"0 checking","language-level":"1 type","expected kind":"2 ★","kind":"3 ★"}],["Type variable",75,76,{"checking-mode":"0 checking","language-level":"1 type","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/map/map-0.ced - 30","symbol":"3 A","expected kind":"4 ★","kind":"5 ★"}],["Type variable",68,72,{"checking-mode":"0 synthesizing","language-level":"1 type","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list.ced - 45","symbol":"3 List","kind":"4 ★ → ★"}],["Forall",62,63,{"punctuation":"0 true","not-for-navigation":"1 true"}],["Dependent function type",62,159,{"checking-mode":"0 checking","language-level":"1 type","binder":"2 0","kind":"3 ★"}],["Term variable",50,51,{"checking-mode":"0 checking","language-level":"1 term","location":"2 missing - missing","symbol":"3 f","type":"4 A → B","hnf of type":"5 A → B"}],["Type variable",58,59,{"checking-mode":"0 checking","language-level":"1 type","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/map/map-0.ced - 40","symbol":"3 B","expected kind":"4 ★","kind":"5 ★"}],["Type variable",54,55,{"checking-mode":"0 checking","language-level":"1 type","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/map/map-0.ced - 30","symbol":"3 A","expected kind":"4 ★","kind":"5 ★"}],["Arrow type",54,59,{"checking-mode":"0 checking","language-level":"1 type","kind":"2 ★"}],["Forall",48,49,{"punctuation":"0 true","not-for-navigation":"1 true"}],["Implicit dependent function type",48,159,{"checking-mode":"0 checking","language-level":"1 type","binder":"2 0","kind":"3 ★"}],["Type variable",40,41,{"checking-mode":"0 checking","language-level":"1 type","location":"2 missing - missing","symbol":"3 B","kind":"4 ★"}],["Star",44,45,{"checking-mode":"0 checking","language-level":"1 kind"}],["Forall",38,39,{"punctuation":"0 true","not-for-navigation":"1 true"}],["Implicit dependent function type",38,159,{"checking-mode":"0 checking","language-level":"1 type","binder":"2 0","kind":"3 ★"}],["Type variable",30,31,{"checking-mode":"0 checking","language-level":"1 type","location":"2 missing - missing","symbol":"3 A","kind":"4 ★"}],["Star",34,35,{"checking-mode":"0 checking","language-level":"1 kind"}],["Forall",28,29,{"punctuation":"0 true","not-for-navigation":"1 true"}],["Implicit dependent function type",28,159,{"checking-mode":"0 checking","language-level":"1 type","binder":"2 0","kind":"3 ★"}],["Import of another source file",1,13,{"location":"0 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list.ced - 1"}]]}
