{"spans":[["Cedille source file (/mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/sreverse/sreverse-0.ced)",1,391,{}],["Term-level definition (checking)",215,389,{"checking-mode":"0 checking","summary":"1 sreverse-involution : ∀ A : ★ . Π l : (List · A) . ((sreverse (sreverse l)) ≃ l)","erasure":"2 λ l . (l (λ h . λ t . λ ih . β) β)"}],["Application of a term to a term",308,387,{"checking-mode":"0 checking","language-level":"1 term","expected-type":"2 ((sreverse (sreverse l)) ≃ l)","type":"3 ((sreverse (sreverse l)) ≃ l)"}],["Beta axiom",386,387,{"checking-mode":"0 checking","language-level":"1 term","explanation":"2 A term constant whose type states that β-equal terms are provably equal","type":"3 ((sreverse (sreverse Nil)) ≃ Nil)"}],["Application of a term to a term",308,385,{"checking-mode":"0 synthesizing","language-level":"1 term","type":"2 ((λ l : (List · A) . ((sreverse (sreverse l)) ≃ l)) Nil) → ((λ l : (List · A) . ((sreverse (sreverse l)) ≃ l)) l)"}],["Rho",333,384,{"language-level":"0 term","the equation":"1 ((sreverse (append (sreverse t) (Cons h Nil))) ≃ (Cons h (sreverse (sreverse t))))","type":"2 ((t sreverseCons Nil appendCons (singleton h) sreverseCons Nil) ≃ (Cons h t))","explanation":"3 Rewrite terms in the expected type, using an equation. "}],["Rho",376,384,{"language-level":"0 term","the equation":"1 ((sreverse (sreverse t)) ≃ t)","type":"2 ((Cons h (sreverse (sreverse t))) ≃ (Cons h t))","explanation":"3 Rewrite terms in the expected type, using an equation. "}],["Beta axiom",383,384,{"checking-mode":"0 checking","language-level":"1 term","explanation":"2 A term constant whose type states that β-equal terms are provably equal","type":"3 ((Cons h t) ≃ (Cons h t))"}],["Term variable",378,380,{"checking-mode":"0 synthesizing","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/sreverse/sreverse-0.ced - 325","symbol":"3 ih","type":"4 (λ l : (List · A) . ((sreverse (sreverse l)) ≃ l)) t","hnf of type":"5 ((sreverse (sreverse t)) ≃ t)"}],["Application of a term to a term",336,372,{"checking-mode":"0 synthesizing","language-level":"1 term","type":"2 ((sreverse (append (sreverse t) (Cons h Nil))) ≃ (Cons h (sreverse (sreverse t))))"}],["Term variable",371,372,{"checking-mode":"0 checking","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/sreverse/sreverse-0.ced - 313","symbol":"3 h","expected-type":"4 A","type":"5 A"}],["Application of a term to a term",336,370,{"checking-mode":"0 synthesizing","language-level":"1 term","type":"2 Π a : A . ((sreverse (append (sreverse · A t) (Cons · A a Nil · A))) ≃ (Cons · A a (sreverse (sreverse · A t))))"}],["Application of a term to a term",355,369,{"checking-mode":"0 checking","language-level":"1 term","expected-type":"2 List · A","type":"3 List · A"}],["Term variable",368,369,{"checking-mode":"0 checking","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/sreverse/sreverse-0.ced - 319","symbol":"3 t","expected-type":"4 List · A","type":"5 List · A"}],["Application of a term to a type",355,367,{"checking-mode":"0 synthesizing","language-level":"1 term","type":"2 (List · A) → (List · A)"}],["Type variable",366,367,{"checking-mode":"0 checking","language-level":"1 type","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/sreverse/sreverse-0.ced - 296","symbol":"3 A","expected kind":"4 ★","kind":"5 ★"}],["Term variable",355,363,{"checking-mode":"0 synthesizing","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list.ced - 1842","symbol":"3 sreverse","type":"4 ∀ A : ★ . ((List · A) → (List · A))","hnf of type":"5 ∀ A : ★ . ((List · A) → (List · A))"}],["Parens",354,370,{"punctuation":"0 true","not-for-navigation":"1 true"}],["Application of a term to a type",336,353,{"checking-mode":"0 synthesizing","language-level":"1 term","type":"2 Π l : (List · A) . Π a : A . ((sreverse (append l (Cons · A a Nil · A))) ≃ (Cons · A a (sreverse l)))"}],["Type variable",352,353,{"checking-mode":"0 checking","language-level":"1 type","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/sreverse/sreverse-0.ced - 296","symbol":"3 A","expected kind":"4 ★","kind":"5 ★"}],["Term variable",336,349,{"checking-mode":"0 synthesizing","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/sreverse/sreverse-0.ced - 15","symbol":"3 sreverse-last","type":"4 ∀ A : ★ . Π l : (List · A) . Π a : A . ((sreverse (append l (Cons · A a Nil · A))) ≃ (Cons · A a (sreverse l)))","hnf of type":"5 ∀ A : ★ . Π l : (List · A) . Π a : A . ((sreverse (append l (Cons · A a Nil · A))) ≃ (Cons · A a (sreverse l)))"}],["Parens",335,373,{"punctuation":"0 true","not-for-navigation":"1 true"}],["Epsilon",330,384,{"checking-mode":"0 checking","language-level":"1 term","type":"2 ((sreverse (sreverse (Cons h t))) ≃ (Cons h t))","explanation":"3 Normalize the left-hand side of the expected equation, using head reduction."}],["Term variable",325,327,{"checking-mode":"0 checking","language-level":"1 term","location":"2 missing - missing","symbol":"3 ih","type":"4 (λ l : (List · A) . ((sreverse (sreverse l)) ≃ l)) t","hnf of type":"5 ((sreverse (sreverse t)) ≃ t)"}],["Lambda abstraction (term-level)",323,384,{"language-level":"0 term","binder":"1 0","type":"2 ((λ l : (List · A) . ((sreverse (sreverse l)) ≃ l)) t) → ((λ l : (List · A) . ((sreverse (sreverse l)) ≃ l)) (Cons h t))"}],["Lambda",323,324,{"punctuation":"0 true","not-for-navigation":"1 true"}],["Term variable",319,320,{"checking-mode":"0 checking","language-level":"1 term","location":"2 missing - missing","symbol":"3 t","type":"4 List · A","hnf of type":"5 List · A"}],["Lambda abstraction (term-level)",317,384,{"language-level":"0 term","binder":"1 0","type":"2 Π t : (List · A) . (((λ l : (List · A) . ((sreverse (sreverse l)) ≃ l)) t) → ((λ l : (List · A) . ((sreverse (sreverse l)) ≃ l)) (Cons h t)))"}],["Lambda",317,318,{"punctuation":"0 true","not-for-navigation":"1 true"}],["Term variable",313,314,{"checking-mode":"0 checking","language-level":"1 term","location":"2 missing - missing","symbol":"3 h","type":"4 A","hnf of type":"5 A"}],["Lambda abstraction (term-level)",311,384,{"language-level":"0 term","binder":"1 0","type":"2 Π h : A . Π t : (List · A) . (((λ l : (List · A) . ((sreverse (sreverse l)) ≃ l)) t) → ((λ l : (List · A) . ((sreverse (sreverse l)) ≃ l)) (Cons h t)))"}],["Lambda",311,312,{"punctuation":"0 true","not-for-navigation":"1 true"}],["Parens",310,385,{"punctuation":"0 true","not-for-navigation":"1 true"}],["Application of a term to a type",308,309,{"checking-mode":"0 synthesizing","language-level":"1 term","type":"2 (Π h : A . Π t : (List · A) . (((λ l : (List · A) . ((sreverse (sreverse l)) ≃ l)) t) → ((λ l : (List · A) . ((sreverse (sreverse l)) ≃ l)) (Cons h t)))) → ((λ l : (List · A) . ((sreverse (sreverse l)) ≃ l)) Nil) → ((λ l : (List · A) . ((sreverse (sreverse l)) ≃ l)) l)"}],["Term variable",308,309,{"checking-mode":"0 synthesizing","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/sreverse/sreverse-0.ced - 302","symbol":"3 l","type":"4 List · A","hnf of type":"5 List · A"}],["Theta",306,388,{"language-level":"0 term","expected-type":"1 ((sreverse (sreverse l)) ≃ l)","the motive":"2 λ l : (List · A) . ((sreverse (sreverse l)) ≃ l)","explanation":"3 Perform an elimination with the first term, after abstracting it from the expected type."}],["Term variable",302,303,{"checking-mode":"0 checking","language-level":"1 term","location":"2 missing - missing","symbol":"3 l","type":"4 List · A","hnf of type":"5 List · A"}],["Lambda abstraction (term-level)",300,388,{"language-level":"0 term","binder":"1 0","type":"2 Π l : (List · A) . ((sreverse (sreverse l)) ≃ l)"}],["Lambda",300,301,{"punctuation":"0 true","not-for-navigation":"1 true"}],["Type variable",296,297,{"checking-mode":"0 checking","language-level":"1 type","location":"2 missing - missing","symbol":"3 A","kind":"4 ★"}],["Erased lambda abstraction (term-level)",294,388,{"language-level":"0 term","binder":"1 0","type":"2 ∀ A : ★ . Π l : (List · A) . ((sreverse (sreverse l)) ≃ l)"}],["Lambda",294,295,{"punctuation":"0 true","not-for-navigation":"1 true"}],["Equation",264,289,{"checking-mode":"0 checking","language-level":"1 type","kind":"2 ★"}],["Term variable",288,289,{"checking-mode":"0 checking","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/sreverse/sreverse-0.ced - 249","symbol":"3 l"}],["Term variable",283,284,{"checking-mode":"0 checking","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/sreverse/sreverse-0.ced - 249","symbol":"3 l"}],["Term variable",274,282,{"checking-mode":"0 checking","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list.ced - 1842","symbol":"3 sreverse"}],["Term variable",264,272,{"checking-mode":"0 checking","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list.ced - 1842","symbol":"3 sreverse"}],["Term variable",249,250,{"checking-mode":"0 checking","language-level":"1 term","location":"2 missing - missing","symbol":"3 l","type":"4 List · A","hnf of type":"5 List · A"}],["Application of a type to a type",253,261,{"checking-mode":"0 checking","language-level":"1 type","expected kind":"2 ★","kind":"3 ★"}],["Type variable",260,261,{"checking-mode":"0 checking","language-level":"1 type","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/sreverse/sreverse-0.ced - 239","symbol":"3 A","expected kind":"4 ★","kind":"5 ★"}],["Type variable",253,257,{"checking-mode":"0 synthesizing","language-level":"1 type","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list.ced - 45","symbol":"3 List","kind":"4 ★ → ★"}],["Forall",247,248,{"punctuation":"0 true","not-for-navigation":"1 true"}],["Dependent function type",247,289,{"checking-mode":"0 checking","language-level":"1 type","binder":"2 0","kind":"3 ★"}],["Type variable",239,240,{"checking-mode":"0 checking","language-level":"1 type","location":"2 missing - missing","symbol":"3 A","kind":"4 ★"}],["Star",243,244,{"checking-mode":"0 checking","language-level":"1 kind"}],["Forall",237,238,{"punctuation":"0 true","not-for-navigation":"1 true"}],["Implicit dependent function type",237,289,{"checking-mode":"0 checking","language-level":"1 type","binder":"2 0","kind":"3 ★"}],["Term-level definition (checking)",15,213,{"checking-mode":"0 checking","summary":"1 sreverse-last : ∀ A : ★ . Π l : (List · A) . Π a : A . ((sreverse (append l (Cons · A a Nil · A))) ≃ (Cons · A a (sreverse l)))","erasure":"2 λ l . λ a . (l (λ h . λ t . λ ih . β) β)"}],["Application of a term to a term",175,211,{"checking-mode":"0 checking","language-level":"1 term","expected-type":"2 ((sreverse (append l (Cons a Nil))) ≃ (Cons a (sreverse l)))","type":"3 ((sreverse (append l (Cons a Nil))) ≃ (Cons a (sreverse l)))"}],["Beta axiom",210,211,{"checking-mode":"0 checking","language-level":"1 term","explanation":"2 A term constant whose type states that β-equal terms are provably equal","type":"3 ((sreverse (append Nil (Cons a Nil))) ≃ (Cons a (sreverse Nil)))"}],["Application of a term to a term",175,209,{"checking-mode":"0 synthesizing","language-level":"1 term","type":"2 ((λ l : (List · A) . ((sreverse (append l (Cons a Nil))) ≃ (Cons a (sreverse l)))) Nil) → ((λ l : (List · A) . ((sreverse (append l (Cons a Nil))) ≃ (Cons a (sreverse l)))) l)"}],["Rho",200,208,{"language-level":"0 term","the equation":"1 ((sreverse (append t (Cons a Nil))) ≃ (Cons a (sreverse t)))","type":"2 ((t appendCons (Cons a Nil) sreverseCons Nil appendCons (singleton h)) ≃ (Cons a (sreverse (Cons h t))))","explanation":"3 Rewrite terms in the expected type, using an equation. "}],["Beta axiom",207,208,{"checking-mode":"0 checking","language-level":"1 term","explanation":"2 A term constant whose type states that β-equal terms are provably equal","type":"3 ((Cons a (sreverse t) appendCons (singleton h)) ≃ (Cons a (sreverse (Cons h t))))"}],["Term variable",202,204,{"checking-mode":"0 synthesizing","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/sreverse/sreverse-0.ced - 192","symbol":"3 ih","type":"4 (λ l : (List · A) . ((sreverse (append l (Cons a Nil))) ≃ (Cons a (sreverse l)))) t","hnf of type":"5 ((sreverse (append t (Cons a Nil))) ≃ (Cons a (sreverse t)))"}],["Epsilon",197,208,{"checking-mode":"0 checking","language-level":"1 term","type":"2 ((sreverse (append (Cons h t) (Cons a Nil))) ≃ (Cons a (sreverse (Cons h t))))","explanation":"3 Normalize the left-hand side of the expected equation, using head reduction."}],["Term variable",192,194,{"checking-mode":"0 checking","language-level":"1 term","location":"2 missing - missing","symbol":"3 ih","type":"4 (λ l : (List · A) . ((sreverse (append l (Cons a Nil))) ≃ (Cons a (sreverse l)))) t","hnf of type":"5 ((sreverse (append t (Cons a Nil))) ≃ (Cons a (sreverse t)))"}],["Lambda abstraction (term-level)",190,208,{"language-level":"0 term","binder":"1 0","type":"2 ((λ l : (List · A) . ((sreverse (append l (Cons a Nil))) ≃ (Cons a (sreverse l)))) t) → ((λ l : (List · A) . ((sreverse (append l (Cons a Nil))) ≃ (Cons a (sreverse l)))) (Cons h t))"}],["Lambda",190,191,{"punctuation":"0 true","not-for-navigation":"1 true"}],["Term variable",186,187,{"checking-mode":"0 checking","language-level":"1 term","location":"2 missing - missing","symbol":"3 t","type":"4 List · A","hnf of type":"5 List · A"}],["Lambda abstraction (term-level)",184,208,{"language-level":"0 term","binder":"1 0","type":"2 Π t : (List · A) . (((λ l : (List · A) . ((sreverse (append l (Cons a Nil))) ≃ (Cons a (sreverse l)))) t) → ((λ l : (List · A) . ((sreverse (append l (Cons a Nil))) ≃ (Cons a (sreverse l)))) (Cons h t)))"}],["Lambda",184,185,{"punctuation":"0 true","not-for-navigation":"1 true"}],["Term variable",180,181,{"checking-mode":"0 checking","language-level":"1 term","location":"2 missing - missing","symbol":"3 h","type":"4 A","hnf of type":"5 A"}],["Lambda abstraction (term-level)",178,208,{"language-level":"0 term","binder":"1 0","type":"2 Π h : A . Π t : (List · A) . (((λ l : (List · A) . ((sreverse (append l (Cons a Nil))) ≃ (Cons a (sreverse l)))) t) → ((λ l : (List · A) . ((sreverse (append l (Cons a Nil))) ≃ (Cons a (sreverse l)))) (Cons h t)))"}],["Lambda",178,179,{"punctuation":"0 true","not-for-navigation":"1 true"}],["Parens",177,209,{"punctuation":"0 true","not-for-navigation":"1 true"}],["Application of a term to a type",175,176,{"checking-mode":"0 synthesizing","language-level":"1 term","type":"2 (Π h : A . Π t : (List · A) . (((λ l : (List · A) . ((sreverse (append l (Cons a Nil))) ≃ (Cons a (sreverse l)))) t) → ((λ l : (List · A) . ((sreverse (append l (Cons a Nil))) ≃ (Cons a (sreverse l)))) (Cons h t)))) → ((λ l : (List · A) . ((sreverse (append l (Cons a Nil))) ≃ (Cons a (sreverse l)))) Nil) → ((λ l : (List · A) . ((sreverse (append l (Cons a Nil))) ≃ (Cons a (sreverse l)))) l)"}],["Term variable",175,176,{"checking-mode":"0 synthesizing","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/sreverse/sreverse-0.ced - 163","symbol":"3 l","type":"4 List · A","hnf of type":"5 List · A"}],["Theta",173,212,{"language-level":"0 term","expected-type":"1 ((sreverse (append l (Cons a Nil))) ≃ (Cons a (sreverse l)))","the motive":"2 λ l : (List · A) . ((sreverse (append l (Cons a Nil))) ≃ (Cons a (sreverse l)))","explanation":"3 Perform an elimination with the first term, after abstracting it from the expected type."}],["Term variable",169,170,{"checking-mode":"0 checking","language-level":"1 term","location":"2 missing - missing","symbol":"3 a","type":"4 A","hnf of type":"5 A"}],["Lambda abstraction (term-level)",167,212,{"language-level":"0 term","binder":"1 0","type":"2 Π a : A . ((sreverse (append l (Cons · A a Nil · A))) ≃ (Cons · A a (sreverse l)))"}],["Lambda",167,168,{"punctuation":"0 true","not-for-navigation":"1 true"}],["Term variable",163,164,{"checking-mode":"0 checking","language-level":"1 term","location":"2 missing - missing","symbol":"3 l","type":"4 List · A","hnf of type":"5 List · A"}],["Lambda abstraction (term-level)",161,212,{"language-level":"0 term","binder":"1 0","type":"2 Π l : (List · A) . Π a : A . ((sreverse (append l (Cons · A a Nil · A))) ≃ (Cons · A a (sreverse l)))"}],["Lambda",161,162,{"punctuation":"0 true","not-for-navigation":"1 true"}],["Type variable",157,158,{"checking-mode":"0 checking","language-level":"1 type","location":"2 missing - missing","symbol":"3 A","kind":"4 ★"}],["Erased lambda abstraction (term-level)",155,212,{"language-level":"0 term","binder":"1 0","type":"2 ∀ A : ★ . Π l : (List · A) . Π a : A . ((sreverse (append l (Cons · A a Nil · A))) ≃ (Cons · A a (sreverse l)))"}],["Lambda",155,156,{"punctuation":"0 true","not-for-navigation":"1 true"}],["Equation",84,150,{"checking-mode":"0 checking","language-level":"1 type","kind":"2 ★"}],["Term variable",148,149,{"checking-mode":"0 checking","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/sreverse/sreverse-0.ced - 43","symbol":"3 l"}],["Term variable",139,147,{"checking-mode":"0 checking","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list.ced - 1842","symbol":"3 sreverse"}],["Term variable",136,137,{"checking-mode":"0 checking","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/sreverse/sreverse-0.ced - 60","symbol":"3 a"}],["Term variable",127,131,{"checking-mode":"0 checking","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list.ced - 62","symbol":"3 Cons"}],["Term variable",115,118,{"checking-mode":"0 checking","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list.ced - 87","symbol":"3 Nil"}],["Term variable",113,114,{"checking-mode":"0 checking","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/sreverse/sreverse-0.ced - 60","symbol":"3 a"}],["Term variable",104,108,{"checking-mode":"0 checking","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list.ced - 62","symbol":"3 Cons"}],["Term variable",101,102,{"checking-mode":"0 checking","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/sreverse/sreverse-0.ced - 43","symbol":"3 l"}],["Term variable",94,100,{"checking-mode":"0 checking","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list.ced - 397","symbol":"3 append"}],["Term variable",84,92,{"checking-mode":"0 checking","language-level":"1 term","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list.ced - 1842","symbol":"3 sreverse"}],["Term variable",60,61,{"checking-mode":"0 checking","language-level":"1 term","location":"2 missing - missing","symbol":"3 a","type":"4 A","hnf of type":"5 A"}],["Type variable",64,65,{"checking-mode":"0 checking","language-level":"1 type","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/sreverse/sreverse-0.ced - 33","symbol":"3 A","expected kind":"4 ★","kind":"5 ★"}],["Forall",58,59,{"punctuation":"0 true","not-for-navigation":"1 true"}],["Dependent function type",58,150,{"checking-mode":"0 checking","language-level":"1 type","binder":"2 0","kind":"3 ★"}],["Term variable",43,44,{"checking-mode":"0 checking","language-level":"1 term","location":"2 missing - missing","symbol":"3 l","type":"4 List · A","hnf of type":"5 List · A"}],["Application of a type to a type",47,55,{"checking-mode":"0 checking","language-level":"1 type","expected kind":"2 ★","kind":"3 ★"}],["Type variable",54,55,{"checking-mode":"0 checking","language-level":"1 type","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/sreverse/sreverse-0.ced - 33","symbol":"3 A","expected kind":"4 ★","kind":"5 ★"}],["Type variable",47,51,{"checking-mode":"0 synthesizing","language-level":"1 type","location":"2 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list.ced - 45","symbol":"3 List","kind":"4 ★ → ★"}],["Forall",41,42,{"punctuation":"0 true","not-for-navigation":"1 true"}],["Dependent function type",41,150,{"checking-mode":"0 checking","language-level":"1 type","binder":"2 0","kind":"3 ★"}],["Type variable",33,34,{"checking-mode":"0 checking","language-level":"1 type","location":"2 missing - missing","symbol":"3 A","kind":"4 ★"}],["Star",37,38,{"checking-mode":"0 checking","language-level":"1 kind"}],["Forall",31,32,{"punctuation":"0 true","not-for-navigation":"1 true"}],["Implicit dependent function type",31,150,{"checking-mode":"0 checking","language-level":"1 type","binder":"2 0","kind":"3 ★"}],["Import of another source file",1,13,{"location":"0 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list.ced - 1"}]]}
