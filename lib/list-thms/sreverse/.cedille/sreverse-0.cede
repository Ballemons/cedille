{"spans":[["Cedille source file (/mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/sreverse/sreverse-0.ced)",1,391,{}],["Term-level definition (checking)",215,389,{"summary":"0 sreverse-involution : ∀ A : ★ . Π l : (List · A) . ((sreverse (sreverse l)) ≃ l)","erasure":"1 λ l . (l (λ h . λ t . λ ih . β) β)"}],["Application of a term to a term",308,387,{"language-level":"0 term","expected-type":"1 ((sreverse (sreverse l)) ≃ l)","type":"2 ((sreverse (sreverse l)) ≃ l)"}],["Beta axiom",386,387,{"language-level":"0 term","explanation":"1 A term constant whose type states that β-equal terms are provably equal","type":"2 ((sreverse (sreverse Nil)) ≃ Nil)"}],["Application of a term to a term",308,385,{"language-level":"0 term","type":"1 ((λ l : (List · A) . ((sreverse (sreverse l)) ≃ l)) Nil) → ((λ l : (List · A) . ((sreverse (sreverse l)) ≃ l)) l)"}],["Rho",333,384,{"language-level":"0 term","the equation":"1 ((sreverse (append (sreverse t) (Cons h Nil))) ≃ (Cons h (sreverse (sreverse t))))","type":"2 ((t sreverseCons Nil appendCons (singleton h) sreverseCons Nil) ≃ (Cons h t))","explanation":"3 Rewrite terms in the expected type, using an equation. "}],["Rho",376,384,{"language-level":"0 term","the equation":"1 ((sreverse (sreverse t)) ≃ t)","type":"2 ((Cons h (sreverse (sreverse t))) ≃ (Cons h t))","explanation":"3 Rewrite terms in the expected type, using an equation. "}],["Beta axiom",383,384,{"language-level":"0 term","explanation":"1 A term constant whose type states that β-equal terms are provably equal","type":"2 ((Cons h t) ≃ (Cons h t))"}],["Term variable",378,380,{"language-level":"0 term","location":"1 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/sreverse/sreverse-0.ced - 325","symbol":"2 ih","type":"3 (λ l : (List · A) . ((sreverse (sreverse l)) ≃ l)) t","hnf of type":"4 ((sreverse (sreverse t)) ≃ t)"}],["Application of a term to a term",336,372,{"language-level":"0 term","type":"1 ((sreverse (append (sreverse t) (Cons h Nil))) ≃ (Cons h (sreverse (sreverse t))))"}],["Term variable",371,372,{"language-level":"0 term","location":"1 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/sreverse/sreverse-0.ced - 313","symbol":"2 h","expected-type":"3 A","type":"4 A"}],["Application of a term to a term",336,370,{"language-level":"0 term","type":"1 Π a : A . ((sreverse (append (sreverse · A t) (Cons · A a Nil · A))) ≃ (Cons · A a (sreverse (sreverse · A t))))"}],["Application of a term to a term",355,369,{"language-level":"0 term","expected-type":"1 List · A","type":"2 List · A"}],["Term variable",368,369,{"language-level":"0 term","location":"1 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/sreverse/sreverse-0.ced - 319","symbol":"2 t","expected-type":"3 List · A","type":"4 List · A"}],["Application of a term to a type",355,367,{"language-level":"0 term","type":"1 (List · A) → (List · A)"}],["Type variable",366,367,{"language-level":"0 type","location":"1 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/sreverse/sreverse-0.ced - 296","symbol":"2 A","expected kind":"3 ★","kind":"4 ★"}],["Term variable",355,363,{"language-level":"0 term","location":"1 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list.ced - 1842","symbol":"2 sreverse","type":"3 ∀ A : ★ . ((List · A) → (List · A))","hnf of type":"4 ∀ A : ★ . ((List · A) → (List · A))"}],["Punctuation",354,370,{"not-for-navigation":"0 true"}],["Application of a term to a type",336,353,{"language-level":"0 term","type":"1 Π l : (List · A) . Π a : A . ((sreverse (append l (Cons · A a Nil · A))) ≃ (Cons · A a (sreverse l)))"}],["Type variable",352,353,{"language-level":"0 type","location":"1 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/sreverse/sreverse-0.ced - 296","symbol":"2 A","expected kind":"3 ★","kind":"4 ★"}],["Term variable",336,349,{"language-level":"0 term","location":"1 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/sreverse/sreverse-0.ced - 15","symbol":"2 sreverse-last","type":"3 ∀ A : ★ . Π l : (List · A) . Π a : A . ((sreverse (append l (Cons · A a Nil · A))) ≃ (Cons · A a (sreverse l)))","hnf of type":"4 ∀ A : ★ . Π l : (List · A) . Π a : A . ((sreverse (append l (Cons · A a Nil · A))) ≃ (Cons · A a (sreverse l)))"}],["Punctuation",335,373,{"not-for-navigation":"0 true"}],["Epsilon",330,384,{"language-level":"0 term","type":"1 ((sreverse (sreverse (Cons h t))) ≃ (Cons h t))","explanation":"2 Normalize the left-hand side of the expected equation, using head reduction."}],["Term variable",325,327,{"language-level":"0 term","location":"1 missing - missing","symbol":"2 ih","type":"3 (λ l : (List · A) . ((sreverse (sreverse l)) ≃ l)) t","hnf of type":"4 ((sreverse (sreverse t)) ≃ t)"}],["Lambda abstraction (term-level)",323,384,{"language-level":"0 term","binder":"1 0","type":"2 ((λ l : (List · A) . ((sreverse (sreverse l)) ≃ l)) t) → ((λ l : (List · A) . ((sreverse (sreverse l)) ≃ l)) (Cons h t))"}],["Punctuation",323,324,{"not-for-navigation":"0 true"}],["Term variable",319,320,{"language-level":"0 term","location":"1 missing - missing","symbol":"2 t","type":"3 List · A","hnf of type":"4 List · A"}],["Lambda abstraction (term-level)",317,384,{"language-level":"0 term","binder":"1 0","type":"2 Π t : (List · A) . (((λ l : (List · A) . ((sreverse (sreverse l)) ≃ l)) t) → ((λ l : (List · A) . ((sreverse (sreverse l)) ≃ l)) (Cons h t)))"}],["Punctuation",317,318,{"not-for-navigation":"0 true"}],["Term variable",313,314,{"language-level":"0 term","location":"1 missing - missing","symbol":"2 h","type":"3 A","hnf of type":"4 A"}],["Lambda abstraction (term-level)",311,384,{"language-level":"0 term","binder":"1 0","type":"2 Π h : A . Π t : (List · A) . (((λ l : (List · A) . ((sreverse (sreverse l)) ≃ l)) t) → ((λ l : (List · A) . ((sreverse (sreverse l)) ≃ l)) (Cons h t)))"}],["Punctuation",311,312,{"not-for-navigation":"0 true"}],["Punctuation",310,385,{"not-for-navigation":"0 true"}],["Application of a term to a type",308,309,{"language-level":"0 term","type":"1 (Π h : A . Π t : (List · A) . (((λ l : (List · A) . ((sreverse (sreverse l)) ≃ l)) t) → ((λ l : (List · A) . ((sreverse (sreverse l)) ≃ l)) (Cons h t)))) → ((λ l : (List · A) . ((sreverse (sreverse l)) ≃ l)) Nil) → ((λ l : (List · A) . ((sreverse (sreverse l)) ≃ l)) l)"}],["Term variable",308,309,{"language-level":"0 term","location":"1 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/sreverse/sreverse-0.ced - 302","symbol":"2 l","type":"3 List · A","hnf of type":"4 List · A"}],["Theta",306,388,{"language-level":"0 term","expected-type":"1 ((sreverse (sreverse l)) ≃ l)","the motive":"2 λ l : (List · A) . ((sreverse (sreverse l)) ≃ l)","explanation":"3 Perform an elimination with the first term, after abstracting it from the expected type."}],["Term variable",302,303,{"language-level":"0 term","location":"1 missing - missing","symbol":"2 l","type":"3 List · A","hnf of type":"4 List · A"}],["Lambda abstraction (term-level)",300,388,{"language-level":"0 term","binder":"1 0","type":"2 Π l : (List · A) . ((sreverse (sreverse l)) ≃ l)"}],["Punctuation",300,301,{"not-for-navigation":"0 true"}],["Type variable",296,297,{"language-level":"0 type","location":"1 missing - missing","symbol":"2 A","kind":"3 ★"}],["Erased lambda abstraction (term-level)",294,388,{"language-level":"0 term","binder":"1 0","type":"2 ∀ A : ★ . Π l : (List · A) . ((sreverse (sreverse l)) ≃ l)"}],["Punctuation",294,295,{"not-for-navigation":"0 true"}],["Equation",264,289,{"language-level":"0 type","kind":"1 ★"}],["Term variable",288,289,{"language-level":"0 term","location":"1 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/sreverse/sreverse-0.ced - 249","symbol":"2 l"}],["Term variable",283,284,{"language-level":"0 term","location":"1 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/sreverse/sreverse-0.ced - 249","symbol":"2 l"}],["Term variable",274,282,{"language-level":"0 term","location":"1 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list.ced - 1842","symbol":"2 sreverse"}],["Term variable",264,272,{"language-level":"0 term","location":"1 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list.ced - 1842","symbol":"2 sreverse"}],["Term variable",249,250,{"language-level":"0 term","location":"1 missing - missing","symbol":"2 l","type":"3 List · A","hnf of type":"4 List · A"}],["Application of a type to a type",253,261,{"language-level":"0 type","expected kind":"1 ★","kind":"2 ★"}],["Type variable",260,261,{"language-level":"0 type","location":"1 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/sreverse/sreverse-0.ced - 239","symbol":"2 A","expected kind":"3 ★","kind":"4 ★"}],["Type variable",253,257,{"language-level":"0 type","location":"1 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list.ced - 45","symbol":"2 List","kind":"3 ★ → ★"}],["Punctuation",247,248,{"not-for-navigation":"0 true"}],["Dependent function type",247,289,{"language-level":"0 type","binder":"1 0","kind":"2 ★"}],["Type variable",239,240,{"language-level":"0 type","location":"1 missing - missing","symbol":"2 A","kind":"3 ★"}],["Star",243,244,{"language-level":"0 kind"}],["Punctuation",237,238,{"not-for-navigation":"0 true"}],["Implicit dependent function type",237,289,{"language-level":"0 type","binder":"1 0","kind":"2 ★"}],["Term-level definition (checking)",15,213,{"summary":"0 sreverse-last : ∀ A : ★ . Π l : (List · A) . Π a : A . ((sreverse (append l (Cons · A a Nil · A))) ≃ (Cons · A a (sreverse l)))","erasure":"1 λ l . λ a . (l (λ h . λ t . λ ih . β) β)"}],["Application of a term to a term",175,211,{"language-level":"0 term","expected-type":"1 ((sreverse (append l (Cons a Nil))) ≃ (Cons a (sreverse l)))","type":"2 ((sreverse (append l (Cons a Nil))) ≃ (Cons a (sreverse l)))"}],["Beta axiom",210,211,{"language-level":"0 term","explanation":"1 A term constant whose type states that β-equal terms are provably equal","type":"2 ((sreverse (append Nil (Cons a Nil))) ≃ (Cons a (sreverse Nil)))"}],["Application of a term to a term",175,209,{"language-level":"0 term","type":"1 ((λ l : (List · A) . ((sreverse (append l (Cons a Nil))) ≃ (Cons a (sreverse l)))) Nil) → ((λ l : (List · A) . ((sreverse (append l (Cons a Nil))) ≃ (Cons a (sreverse l)))) l)"}],["Rho",200,208,{"language-level":"0 term","the equation":"1 ((sreverse (append t (Cons a Nil))) ≃ (Cons a (sreverse t)))","type":"2 ((t appendCons (Cons a Nil) sreverseCons Nil appendCons (singleton h)) ≃ (Cons a (sreverse (Cons h t))))","explanation":"3 Rewrite terms in the expected type, using an equation. "}],["Beta axiom",207,208,{"language-level":"0 term","explanation":"1 A term constant whose type states that β-equal terms are provably equal","type":"2 ((Cons a (sreverse t) appendCons (singleton h)) ≃ (Cons a (sreverse (Cons h t))))"}],["Term variable",202,204,{"language-level":"0 term","location":"1 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/sreverse/sreverse-0.ced - 192","symbol":"2 ih","type":"3 (λ l : (List · A) . ((sreverse (append l (Cons a Nil))) ≃ (Cons a (sreverse l)))) t","hnf of type":"4 ((sreverse (append t (Cons a Nil))) ≃ (Cons a (sreverse t)))"}],["Epsilon",197,208,{"language-level":"0 term","type":"1 ((sreverse (append (Cons h t) (Cons a Nil))) ≃ (Cons a (sreverse (Cons h t))))","explanation":"2 Normalize the left-hand side of the expected equation, using head reduction."}],["Term variable",192,194,{"language-level":"0 term","location":"1 missing - missing","symbol":"2 ih","type":"3 (λ l : (List · A) . ((sreverse (append l (Cons a Nil))) ≃ (Cons a (sreverse l)))) t","hnf of type":"4 ((sreverse (append t (Cons a Nil))) ≃ (Cons a (sreverse t)))"}],["Lambda abstraction (term-level)",190,208,{"language-level":"0 term","binder":"1 0","type":"2 ((λ l : (List · A) . ((sreverse (append l (Cons a Nil))) ≃ (Cons a (sreverse l)))) t) → ((λ l : (List · A) . ((sreverse (append l (Cons a Nil))) ≃ (Cons a (sreverse l)))) (Cons h t))"}],["Punctuation",190,191,{"not-for-navigation":"0 true"}],["Term variable",186,187,{"language-level":"0 term","location":"1 missing - missing","symbol":"2 t","type":"3 List · A","hnf of type":"4 List · A"}],["Lambda abstraction (term-level)",184,208,{"language-level":"0 term","binder":"1 0","type":"2 Π t : (List · A) . (((λ l : (List · A) . ((sreverse (append l (Cons a Nil))) ≃ (Cons a (sreverse l)))) t) → ((λ l : (List · A) . ((sreverse (append l (Cons a Nil))) ≃ (Cons a (sreverse l)))) (Cons h t)))"}],["Punctuation",184,185,{"not-for-navigation":"0 true"}],["Term variable",180,181,{"language-level":"0 term","location":"1 missing - missing","symbol":"2 h","type":"3 A","hnf of type":"4 A"}],["Lambda abstraction (term-level)",178,208,{"language-level":"0 term","binder":"1 0","type":"2 Π h : A . Π t : (List · A) . (((λ l : (List · A) . ((sreverse (append l (Cons a Nil))) ≃ (Cons a (sreverse l)))) t) → ((λ l : (List · A) . ((sreverse (append l (Cons a Nil))) ≃ (Cons a (sreverse l)))) (Cons h t)))"}],["Punctuation",178,179,{"not-for-navigation":"0 true"}],["Punctuation",177,209,{"not-for-navigation":"0 true"}],["Application of a term to a type",175,176,{"language-level":"0 term","type":"1 (Π h : A . Π t : (List · A) . (((λ l : (List · A) . ((sreverse (append l (Cons a Nil))) ≃ (Cons a (sreverse l)))) t) → ((λ l : (List · A) . ((sreverse (append l (Cons a Nil))) ≃ (Cons a (sreverse l)))) (Cons h t)))) → ((λ l : (List · A) . ((sreverse (append l (Cons a Nil))) ≃ (Cons a (sreverse l)))) Nil) → ((λ l : (List · A) . ((sreverse (append l (Cons a Nil))) ≃ (Cons a (sreverse l)))) l)"}],["Term variable",175,176,{"language-level":"0 term","location":"1 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/sreverse/sreverse-0.ced - 163","symbol":"2 l","type":"3 List · A","hnf of type":"4 List · A"}],["Theta",173,212,{"language-level":"0 term","expected-type":"1 ((sreverse (append l (Cons a Nil))) ≃ (Cons a (sreverse l)))","the motive":"2 λ l : (List · A) . ((sreverse (append l (Cons a Nil))) ≃ (Cons a (sreverse l)))","explanation":"3 Perform an elimination with the first term, after abstracting it from the expected type."}],["Term variable",169,170,{"language-level":"0 term","location":"1 missing - missing","symbol":"2 a","type":"3 A","hnf of type":"4 A"}],["Lambda abstraction (term-level)",167,212,{"language-level":"0 term","binder":"1 0","type":"2 Π a : A . ((sreverse (append l (Cons · A a Nil · A))) ≃ (Cons · A a (sreverse l)))"}],["Punctuation",167,168,{"not-for-navigation":"0 true"}],["Term variable",163,164,{"language-level":"0 term","location":"1 missing - missing","symbol":"2 l","type":"3 List · A","hnf of type":"4 List · A"}],["Lambda abstraction (term-level)",161,212,{"language-level":"0 term","binder":"1 0","type":"2 Π l : (List · A) . Π a : A . ((sreverse (append l (Cons · A a Nil · A))) ≃ (Cons · A a (sreverse l)))"}],["Punctuation",161,162,{"not-for-navigation":"0 true"}],["Type variable",157,158,{"language-level":"0 type","location":"1 missing - missing","symbol":"2 A","kind":"3 ★"}],["Erased lambda abstraction (term-level)",155,212,{"language-level":"0 term","binder":"1 0","type":"2 ∀ A : ★ . Π l : (List · A) . Π a : A . ((sreverse (append l (Cons · A a Nil · A))) ≃ (Cons · A a (sreverse l)))"}],["Punctuation",155,156,{"not-for-navigation":"0 true"}],["Equation",84,150,{"language-level":"0 type","kind":"1 ★"}],["Term variable",148,149,{"language-level":"0 term","location":"1 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/sreverse/sreverse-0.ced - 43","symbol":"2 l"}],["Term variable",139,147,{"language-level":"0 term","location":"1 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list.ced - 1842","symbol":"2 sreverse"}],["Term variable",136,137,{"language-level":"0 term","location":"1 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/sreverse/sreverse-0.ced - 60","symbol":"2 a"}],["Term variable",127,131,{"language-level":"0 term","location":"1 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list.ced - 62","symbol":"2 Cons"}],["Term variable",115,118,{"language-level":"0 term","location":"1 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list.ced - 87","symbol":"2 Nil"}],["Term variable",113,114,{"language-level":"0 term","location":"1 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/sreverse/sreverse-0.ced - 60","symbol":"2 a"}],["Term variable",104,108,{"language-level":"0 term","location":"1 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list.ced - 62","symbol":"2 Cons"}],["Term variable",101,102,{"language-level":"0 term","location":"1 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/sreverse/sreverse-0.ced - 43","symbol":"2 l"}],["Term variable",94,100,{"language-level":"0 term","location":"1 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list.ced - 397","symbol":"2 append"}],["Term variable",84,92,{"language-level":"0 term","location":"1 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list.ced - 1842","symbol":"2 sreverse"}],["Term variable",60,61,{"language-level":"0 term","location":"1 missing - missing","symbol":"2 a","type":"3 A","hnf of type":"4 A"}],["Type variable",64,65,{"language-level":"0 type","location":"1 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/sreverse/sreverse-0.ced - 33","symbol":"2 A","expected kind":"3 ★","kind":"4 ★"}],["Punctuation",58,59,{"not-for-navigation":"0 true"}],["Dependent function type",58,150,{"language-level":"0 type","binder":"1 0","kind":"2 ★"}],["Term variable",43,44,{"language-level":"0 term","location":"1 missing - missing","symbol":"2 l","type":"3 List · A","hnf of type":"4 List · A"}],["Application of a type to a type",47,55,{"language-level":"0 type","expected kind":"1 ★","kind":"2 ★"}],["Type variable",54,55,{"language-level":"0 type","location":"1 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list-thms/sreverse/sreverse-0.ced - 33","symbol":"2 A","expected kind":"3 ★","kind":"4 ★"}],["Type variable",47,51,{"language-level":"0 type","location":"1 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list.ced - 45","symbol":"2 List","kind":"3 ★ → ★"}],["Punctuation",41,42,{"not-for-navigation":"0 true"}],["Dependent function type",41,150,{"language-level":"0 type","binder":"1 0","kind":"2 ★"}],["Type variable",33,34,{"language-level":"0 type","location":"1 missing - missing","symbol":"2 A","kind":"3 ★"}],["Star",37,38,{"language-level":"0 kind"}],["Punctuation",31,32,{"not-for-navigation":"0 true"}],["Implicit dependent function type",31,150,{"language-level":"0 type","binder":"1 0","kind":"2 ★"}],["Import of another source file",1,13,{"location":"0 /mnt/nfs/netapp2/grad/guneratne/cedille-stuff/cedille/lib/list.ced - 1"}]]}
