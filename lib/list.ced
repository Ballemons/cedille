rec List (A : ★) : | Cons : A → List → List , Nil : List =
  ∀ P : List → ★ .
    (Π h : A . Π t : List . P t → P (Cons h t)) → 
    P Nil → 
    P self
  with
    Cons = λ a . λ v . Λ P . λ c . λ e . c a v (v · P c e),
    Nil = Λ P . λ c . λ n . n 
.

appendCons ⇐ ∀ A : ★ . A → List · A → List · A → List · A =
  Λ A . λ h . λ t . λ r . Cons · A h r .

append ⇐ ∀ A : ★ . List · A → List · A → List · A =
  Λ A . λ l . λ l' .
   θ l (appendCons · A) l' .

CList ⇐ ★ → ★ = λ A : ★ . ∀ X : ★ . (A → X → X) → X → X .

CCons ⇐ ∀ A : ★ . A → CList · A → CList · A = Λ A . λ h . λ t . Λ X . λ c . λ e . c h (t · X c e) .

CNil ⇐ ∀ A : ★ . CList · A = Λ A . Λ X . λ c . λ e . e .

toCList ⇐ ∀ A : ★. List · A → CList · A = 
  Λ A . λ l . θ l (λ h . λ t . λ ct . CCons · A h ct) (CNil · A) .

map ⇐ ∀ A : ★ . ∀ B : ★ . (A → B) → List · A → List · B =
  Λ A . Λ B . λ f . λ l .
    θ l (λ h . λ t . λ r . Cons · B (f h) r)
      (Nil · B) .
