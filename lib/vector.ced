import nat .
import nat-thms/compare.

rec Vector (A : ★) : (n : Nat)
| Vcons : ∀ n : Nat . A → Vector n → Vector (S n) ,
  Vnil : Vector Z
=
  ∀ P : Π n : Nat . Vector n → ★ .
    (∀ n : Nat . Π a : A . Π v : Vector n . P n v → P (S n) (Vcons -n a v)) → 
    P Z Vnil → 
    P n self
  with
    Vcons = Λ n . λ a . λ v . Λ P . λ c . λ e . c -n a v (v · P c e) ,
    Vnil = Λ P . λ c . λ n . n 
.

Vmap ⇐ ∀ A : ★ . ∀ B : ★ . ∀ n : Nat . (A → B) → Vector · A n → Vector · B n =
  Λ A . Λ B . Λ n . λ f . λ v .
    v · (λ n : Nat . λ _ : Vector · A n . Vector · B n)
      (Λ n . λ a . λ v . λ r . Vcons · B -n (f a) r)
      (Vnil · B).

% return the i'th element from the end of the given vector
Vlast ⇐ ∀ A : ★ . Π n : Nat . Vector · A n → Π i : Nat . ∀ _ : Lt i n . A =
  Λ A . λ n . λ v .
    v · (λ n : Nat . λ v : Vector · A n . Π n' : Nat . ∀ _ : n ≃ n' . Π i : Nat . ∀ _ : Lt i n' . A)
      (Λ n . λ h . λ _ . λ r . λ n' .
         θ n' (λ n' . λ _ . Λ e . λ i . Λ u1 .
                 θ+ (eqnat i n') (λ u . h) (λ u . r n' -(π1 e) i -(Lt-not-eqnat i n' u1 u)))
              (Λ u . δ u))
      (λ n' . Λ e . λ i . Λ u . δ ε ((Not-Lt-Z i (ρ e - u)) · (tt ≃ ff)))
      n -β.
    
Vrepeat ⇐ ∀ A : ★ . Π n : Nat . A → Vector · A n =
  Λ A . λ n . λ a .
    θ n (λ n . λ v . Vcons · A -n a v) (Vnil · A) .
