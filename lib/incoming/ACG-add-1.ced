import ACG-add-0.
import ACG-succ-0.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                               %
%  Add-Symm : Addition is symmetric             %
%                                               %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  Add-Symm ⇐ Π n : Nat . Π m : Nat .

  % Theorem

  add n m ≃ add m n

  % Inductive Step

  = λ n . λ m . θ n ( λ p . λ h . εl ρ h
      	      	      	      	     - ρ ( Add-Succ-Comm-1 m p )
				       - β )

  % Base Case

  ( εl ρ ( Add-Ident-1 m )
       - β ) .

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                               %
%  Add-One-Equals-Succ : The successor          %
%    function is equal to Add one               %
%                                               %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  Add-One-Equals-Succ-1 ⇐ Π n : Nat .

  % Theorem

  add n one ≃ S n =

  % Inductive Step

  λ n . θ n ( λ p . λ h . εl ρ h
                             - ρ ( Add-Succ-Comm-1 n Z )
			       - β )

  % Base Case

  β .
  
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                               %
%  Add-Inj : Add x is injective			%
%                                               %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  Add-Inj-0 ⇐ Π x : Nat . Π y : Nat . Π z : Nat .

  % Theorem

  ( add x y ≃ add x z ) → y ≃ z =

  λ x . λ y . λ z . θ x

  % Inductive Step

  ( λ px . λ h . λ pf .

    h
  % Proves add px y equals add px z
      ( Succ-Inj ( add px y ) ( add px z )
        (
        % Proves S add px y equals S add px z
	  ρ ( Add-Succ-Comm-0 px y )
	  - ρ ( Add-Succ-Comm-0 px z )
            - pf
        )
      )
    )

  % Base Case

  ( λ pf . ρ ( Add-Ident-0 y )
	   - ρ ( Add-Ident-0 z )
	     - pf ) .
				    
