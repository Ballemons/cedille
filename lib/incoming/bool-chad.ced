import bool.

if ⇐ ∀ A : ★ . Bool → A → A → A =                                              
  Λ a . λ b . λ t . λ f . b · (λ b : Bool . a) t f .                           
                                                                                 
impl ⇐ Bool → Bool → Bool =                                                    
  λ x . λ y . x · (λ b : Bool . Bool) y tt . 

% if-then-else and implication proofs
if-same ⇐ Π x : Bool . Π y : Bool . if x y y ≃ y =
  λ x . λ y . θ y ρ (bool-tt-tt x) - β ρ (bool-ff-ff x) - β .

ff-imp ⇐ Π x : Bool . impl ff x ≃ tt =
  λ x . β .

imp-ff ⇐ Π x : Bool . impl x ff ≃ not x =
  λ x . β .

tt-imp ⇐ Π x : Bool . impl tt x ≃ x =
  λ x . β .

imp-tt ⇐ Π x : Bool . impl x tt ≃ tt =
  λ x . ρ (bool-tt-tt x ) - β .
