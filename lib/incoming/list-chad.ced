import list.
import bool.
import nat.
import maybe.

% operations
lengthCons ⇐ ∀ A : ★ . A → List · A → Nat → Nat =
  Λ A . λ h . λ t . λ r . S r .

length ⇐ ∀ A : ★ . List · A → Nat =
  Λ A . λ l . l · (λ l' : (List · A) . Nat) (lengthCons · A) Z .

foldr ⇐ ∀ A : ★ . ∀ B : ★ . (A → (List · A) → B → B) → B → List · A → B =
  Λ A . Λ B . λ f . λ b . λ l . θ l f b .

lengthFold ⇐ ∀ A : ★ . List · A → Nat =
  Λ A . (foldr · A · Nat) (lengthCons · A) Z .

is-empty ⇐ ∀ A : ★ . List · A → Bool =
  Λ A . λ l . θ l (λ h . λ t . λ r . ff) tt .

head ⇐ ∀ A : ★ . Π l : (List · A) . (is-empty l ≃ ff) → A =
  Λ A . λ l . θ l (λ h . λ t . λ r . λ p . h ) (λ p . δ p) .

head1 ⇐ ∀ A : ★ . List · A → Maybe · A =
  Λ A . λ l . θ l (λ h . λ t . λ r . just · A h) (nothing · A) .

tail ⇐ ∀ A : ★ . List · A → List · A =
  Λ A . λ l . θ l (λ h . λ t . λ r . t) (Nil · A) .

singleton ⇐ ∀ A : ★ . A → List · A =
  Λ A . λ a . (Cons · A) a (Nil · A) .

reverseCons ⇐ ∀ A : ★ . A → (List · A) → (List · A) → (List · A) =
  Λ A . λ h . λ t . λ r . (append · A) r (singleton · A h) .

reverse ⇐ ∀ A : ★ . (List · A) → (List · A) =
  Λ A . (foldr · A · (List · A)) (reverseCons · A) (Nil · A) .

repeat ⇐ ∀ A : ★ . A → Nat → List · A =
  Λ A . λ a . λ n . θ n (λ n . (Cons · A) a) (Nil · A) .

filter ⇐ ∀ A : ★ . (A → Bool) → List · A → List · A =
  Λ A . λ f . λ l . θ l (λ h . λ t . λ r . (if · (List · A)) (f h) (Cons · A h r) r) (Nil · A) .



% theorems
length-append ⇐  ∀ A : ★ . Π l1 : List · A . Π l2 : List · A . length (append l1 l2) ≃ add (length l1) (length l2) =
  Λ A . λ l1 . λ l2 . θ l1 (λ h . λ t . λ ih . εl ρ ih - β ) β .

append-empty ⇐ ∀ A : ★ . Π l : List · A . append l (Nil · A) ≃ l =
  Λ A . λ l . θ l (λ h . λ t . λ ih . εl ρ ih - β ) β . 

reverse-last ⇐ ∀ A : ★ . Π l : List · A . Π a : A . reverse (append l (Cons · A a Nil · A)) ≃ Cons · A a (reverse l) =
  Λ A . λ l . λ a . θ l (λ h . λ t . λ ih . εl ρ ih - β) β .

reverse-involution ⇐ ∀ A : ★ . Π l : List · A . reverse (reverse l) ≃ l =
  Λ A . λ l . θ l (λ h . λ t . λ ih . εl ρ (reverse-last · A (reverse · A t) h) - ρ ih - β) β .




% tests and example terms
list1 = (Cons · Bool) tt (Nil · Bool) .
list2 = (Cons · Bool) ff ((Cons · Bool) ff (Nil · Bool)) .
list3 = (Cons · Bool) ff (Nil · Bool) .
list4 = (Cons · Bool) ff ((Cons · Bool) tt ((Cons · Bool) tt (Nil · Bool))) .

append-test = append · Bool list1 list2 !
append-test1 = append · Bool list1 list3 !

length-test = (length · Bool) list1 !
length-test1 = (length · Bool) (Nil · Bool) !
lengthFold-test = (lengthFold · Bool) list1 !

reverse-test = (reverse · Bool) list4 !
reverse-test1 = (reverse · Bool) ((reverse · Bool) list4) !

is-empty-test = (is-empty · Bool) list1 !
is-empty-test1 = (is-empty · Bool) (Nil · Bool) !

head-test = head · Bool list1 β !

tail-test = tail · Bool list4 !

repeat-test = repeat · Bool tt (S (S Z)) !

filter-test = filter · Bool (λ b . if · Bool b tt ff) list4 !

readableList = (toCList · Bool) filter-test !
