import list.
import bool.
import nat.
import maybe.

concat ⇐ ∀ A : ★ . (List · (List · A)) → List · A =                            
  Λ A . λ l . θ l (λ h . λ t . λ r . append · A h r) (Nil · A) .

lengthFold ⇐ ∀ A : ★ . List · A → Nat =
  Λ A . (foldr · A · Nat) (lengthCons · A) Z .


filter-append ⇐ ∀ A : ★ . Π p : A → Bool . Π l1 : List · A . Π l2 : List · A . 
  filter p (append l1 l2) ≃ append (filter p l1) (filter p l2) =
    Λ A . λ p . λ l1 . λ l2 . θ l1                                               
      (λ h . λ t . λ ih . θ+ (p h)                                               
      (λ a . ε ρ a - εl ρ ih - β)                                              
      (λ a . ε ρ a - εl ρ ih - β))                                             
    β .                                                                        
                                                                                                     
is-empty-append ⇐ ∀ A : ★ . Π l1 : List · A . Π l2 : List · A . 
  is-empty (append l1 l2) ≃ and (is-empty l1) (is-empty l2) =
    Λ A . λ l1 . λ l2 . θ l1 (λ h . λ t . λ ih . β) β .                          

concat-append ⇐ ∀ A : ★ . Π l1 : (List · (List · A)) . Π l2 : (List · (List · A)) . 
  concat (append l1 l2) ≃ append (concat l1) (concat l2) =
    Λ A . λ l1 . λ l2 . θ l1 (λ h . λ t . λ ih . ρ ih - ρ ς append-assoc - ●) β .


