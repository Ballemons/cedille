import nat-thms-add-0.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%						%
%  S-Refl-Iter : Iterating the successor on	%
%    Z returns the iterator    	       	  	%
%						%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  S-refl-iter ⇐ Π x : Nat . x ≃ x ( λ p . S ) Z =

  λ x . ρ ς ( add-defn x Z  )
      	- ρ ( add-Z-1 x )
	  - β .

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%						%
%  S-Add-One : The successor function is	%
%    equal to Add one				%
%						%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  S-add-one-1 ⇐ Π n : Nat . add n one ≃ S n =

  % Inductive Step

  λ n . θ n ( λ p . λ h . εl ρ h
      	      	      	       - ρ ( add-S-comm-1 n Z )
			       	 - β )

  % Base Case

  β .


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                               %
%  S-Ineq : A number cannot equal its own    %
%     successor                                 %
%                                               %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  S-ineq-bool ⇐ Π x : Nat . eqnat ( S x ) x ≃ ff =

  % Inductive Step

  λ x . θ x ( λ px . λ h . ρ h
      	      	       	     - β )

  % Base Case

  β .  
